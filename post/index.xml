<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on John Andersen (pdxjohnny)</title>
    <link>https://pdxjohnny.github.io/post/index.xml</link>
    <description>Recent content in Posts on John Andersen (pdxjohnny)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Nov 2016 12:22:04 -0800</lastBuildDate>
    <atom:link href="https://pdxjohnny.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>3 Resistor Bias Circuit with NMOS Transistor</title>
      <link>https://pdxjohnny.github.io/post/3-resistor-bias-nmos/</link>
      <pubDate>Fri, 11 Nov 2016 12:22:04 -0800</pubDate>
      
      <guid>https://pdxjohnny.github.io/post/3-resistor-bias-nmos/</guid>
      <description>

&lt;h2 id=&#34;circuit&#34;&gt;Circuit&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://pdxjohnny.github.io/images/3-resistor-bias-circuit.png&#34; alt=&#34;3-resistor-bias-circuit&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pick a Vdd&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;9 Volts
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pick a transistor and Vtn for it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2N7002
Vtn = 1.6
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pick and Id&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2 mA
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find RL for Vdd and Id&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RL = Vdd / Id
RL = 9 Volts / 2 mA
RL = 4.5 k Ohms
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pick a much smaller current for R1 and R2, Ir (bias resistor current)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Ir = 200 uA
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Find R1 and R2 such that the voltage drop across R2 is the same as Vtn. This
is so that any input signal at all will act to turn on the transistor. Then
make R1 drop the rest of Vdd.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;R2 = Vtn / Ir
R2 = 1.6 / 200 uA
R2 = 8 k Ohms

R2 = (Vdd - Vtn) / Ir
R2 = (9 - 1.6) / 200 uA
R2 = 7.4 / 200 uA
R2 = 37 k Ohms
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Plug in reasonable values for the rest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cin and Cout should both be much much (two orders of magnitude) less than their
respective resistors.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Rin = 1 k Ohms
Cin = 470 nF
Cout = 470 nF
Rout = 100k
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ARM workflow with qemu and arm-none-eabi</title>
      <link>https://pdxjohnny.github.io/post/arm-qemu/</link>
      <pubDate>Wed, 09 Nov 2016 14:57:07 -0800</pubDate>
      
      <guid>https://pdxjohnny.github.io/post/arm-qemu/</guid>
      <description>

&lt;p&gt;This should get you up and running writing ARM assembly without hardware.&lt;/p&gt;

&lt;p&gt;Clone this the repo for this turtorial.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://gist.github.com/pdxjohnny/3de9a9bdd38cacf3ea394207762f1002 arm-qemu
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;The first step is to install the necessary packages. These are the
arm-none-eabi tool chain and qemu with arm support.&lt;/p&gt;

&lt;h4 id=&#34;arch-linux&#34;&gt;Arch Linux&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;sudo pacman -S arm-none-eabi-gcc arm-none-eabi-binutils arm-none-eabi-gdb \
  arm-none-eabi-newlib qemu qemu-arch-extra
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ubuntu&#34;&gt;Ubuntu&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;sudo apt -y install make qemu-system-arm \
    gcc-arm-none-eabi binutils-arm-none-eabi gdb-arm-none-eabi \
    libstdc++-arm-none-eabi-newlib libnewlib-arm-none-eabi
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gdb&#34;&gt;GDB&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;.gdbinit&lt;/code&gt; we have placed commands which gdb will run on startup. But to
make this work the &lt;code&gt;.gdbinit&lt;/code&gt; file in our home directory needs to say its ok
for gdb to load this &lt;code&gt;.gdbinit&lt;/code&gt; file. To do that we just add the directory to
the auto-load safe-path.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;set auto-load safe-path $PWD&amp;quot; &amp;gt;&amp;gt; ~/.gdbinit
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;building&#34;&gt;Building&lt;/h2&gt;

&lt;p&gt;The Makefile should have plenty of comments to help you understand what is
being done in it. It takes all the &lt;code&gt;.s&lt;/code&gt; assembly files in the current directory
and compiles them into object files. Then it runs the linker to create the ELF
binary. All of this is done with arm-none-eabi-gcc rather than your regular
gcc for host programs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will rebuild all the modified &lt;code&gt;.s&lt;/code&gt; files into their object file forms and
relink to the binary. Run &lt;code&gt;make clean all&lt;/code&gt; if you are having really weird
errors. That usually fixes things.&lt;/p&gt;

&lt;h2 id=&#34;running&#34;&gt;Running&lt;/h2&gt;

&lt;p&gt;To run you can do &lt;code&gt;qemu-arm ./main&lt;/code&gt;. But hey why not put it in the Makefile
right.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make all qemu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will rebuild any changed files and run the created binary in qemu.&lt;/p&gt;

&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;Oh you ran the program and everything exploded? Time to debug.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make all gdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will rebuild all your source files and start the program in qemu with it as a
gdb target on port 1234, so make sure nothing else is using that port or change
it in the &lt;code&gt;.gdbinit&lt;/code&gt; file and &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;help-nothing-works&#34;&gt;Help nothing works&lt;/h2&gt;

&lt;p&gt;Comment on the gist with the problem so we can figure it out and everyone else
can see the solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trinity fuzzer on Android (on Intel)</title>
      <link>https://pdxjohnny.github.io/post/trinity-fuzzer-android/</link>
      <pubDate>Mon, 17 Oct 2016 12:51:22 -0700</pubDate>
      
      <guid>https://pdxjohnny.github.io/post/trinity-fuzzer-android/</guid>
      <description>

&lt;h2 id=&#34;step-1-clone-trinity&#34;&gt;Step 1 - Clone trinity&lt;/h2&gt;

&lt;p&gt;Grab the source for trinity. We need to make some minor modifications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At the time of writing this the latest commit on master was
3a0e33d1db3214503316840ecfb90075d60ab3be adapt instructions as necessary. The
basic idea of static linking and disabling of feature&amp;rsquo;s you don&amp;rsquo;t need is
still the same.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/kernelslacker/trinity
cd trinity
./configure
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-32-bit-and-static-compilation&#34;&gt;Step 2 - 32 bit and static compilation&lt;/h2&gt;

&lt;p&gt;Edit the make file and add &lt;code&gt;-m32&lt;/code&gt; to any line containing &lt;code&gt;CFLAGS&lt;/code&gt; and add
&lt;code&gt;-static&lt;/code&gt; to any line containing &lt;code&gt;LDFLAGS&lt;/code&gt;. Just one line not all of them that
say LD/CFLAGS. For example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CFLAGS += -Wall -Wextra -g -O2 -I. -Iinclude/ -Wimplicit -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -D__linux__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Becomes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CFLAGS += -Wall -Wextra -g -O2 -I. -Iinclude/ -Wimplicit -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -D__linux__ -m32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LDFLAGS += -rdynamic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Becomes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LDFLAGS += -rdynamic -static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just change two lines and you&amp;rsquo;re done.&lt;/p&gt;

&lt;h2 id=&#34;step-3-fix-syscalls-send-c&#34;&gt;Step 3 - Fix syscalls/send.c&lt;/h2&gt;

&lt;p&gt;I found that gcc 6.2.1 said that this is an error so it wouldn&amp;rsquo;t let me
compile without this typecast. I haven&amp;rsquo;t noticed anything strange by doing this
so I assume everything still works.&lt;/p&gt;

&lt;p&gt;Change the line that reads&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;proto-&amp;gt;gen_packet(&amp;amp;si-&amp;gt;triplet, ptr, &amp;amp;rec-&amp;gt;a3);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;proto-&amp;gt;gen_packet(&amp;amp;si-&amp;gt;triplet, ptr, (size_t *) &amp;amp;rec-&amp;gt;a3);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you should now make it past that compilation error.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;syscalls/send.c:33:41: error: passing argument 3 of ‘proto-&amp;gt;gen_packet’ from
incompatible pointer type [-Werror=incompatible-pointer-types]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;step-4-edit-config-h&#34;&gt;Step 4 - Edit config.h&lt;/h2&gt;

&lt;p&gt;Take out anything you don&amp;rsquo;t need or can&amp;rsquo;t compile from &lt;code&gt;config.h&lt;/code&gt;. For instance
Android recommends building on Ubuntu 16.04 so we were on a Ubuntu 16.04.1 LTS
machine which at the time of writing is Linux 4.4ish. So we couldn&amp;rsquo;t compile
&lt;code&gt;fds/bpf.c&lt;/code&gt; because the kernel headers didn&amp;rsquo;t contain the right version of
&lt;code&gt;linux/bpf.h&lt;/code&gt; (bpf_addr was missing some members).&lt;/p&gt;

&lt;p&gt;The solution is to comment out &lt;code&gt;USE_BPF&lt;/code&gt; from &lt;code&gt;config.h&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define USE_BPF 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// #define USE_BPF 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-5-verify&#34;&gt;Step 5 - Verify&lt;/h2&gt;

&lt;p&gt;Before we push to the device make sure it has a chance of working. This means
that it will be 32-bit staticly linked. For the edits we just made to the
commit refernced at the top of this doc file reports the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;file trinity
trinity: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=e533cc2db1db19c044bdbfa566c72299df7eefc2, not stripped
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-6-push-and-run&#34;&gt;Step 6 - Push and Run&lt;/h2&gt;

&lt;p&gt;Put in on the device and run from &lt;code&gt;/sdcard&lt;/code&gt; folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb root
adb remount rw
adb disable-verity
adb reboot
adb push trinity /data/trinity
adb shell &#39;cd /sdcard &amp;amp;&amp;amp; /data/trinity --dangerous -V /dev/ 2&amp;gt;&amp;amp;1&#39; | tee trinity-dev-1.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take the blue pill and profit&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>