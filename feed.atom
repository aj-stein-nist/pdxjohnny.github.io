<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
  <title>pdxjohnny&#39;s blog</title>
  <subtitle></subtitle>
  <id>https://pdxjohnny.github.io/</id>
  <author>
    <name>pdxjohnny&#39;s blog</name>
    <uri>https://pdxjohnny.github.io/</uri>
  </author>
  <icon>https://pdxjohnny.github.io/image/brand/icon-1-1.png</icon>
  <logo>https://pdxjohnny.github.io/image/brand/icon-2-1.png</logo>
  <updated>2020-10-06T17:55:14Z</updated>
  <link rel="self" type="application/atom+xml" href="https://pdxjohnny.github.io/feed.atom" hreflang="en-us"/>
  <link rel="alternate" type="text/html" href="https://pdxjohnny.github.io/" hreflang="en-us"/>
  <entry>
    <title>C Development</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/c-development/</id>
    <updated>2020-08-20T21:00:00Z</updated>
    <published>2020-08-20T21:00:00Z</published>
    <content type="html"><![CDATA[<blockquote>
<p>This post is in progress</p>
</blockquote>
<h2 id="make">make</h2>
<p>The <code>make</code> command line utility can be used to help you organize the build
process of your project.</p>
<h3 id="make---tip-and-ticks">make - Tip and Ticks</h3>
<ul>
<li>Use the <code>-j</code> flag to have make compile with all the cores on your machine.
This will speed up your builds when you have many files. If you're having
trouble reading the errors, remove this flag to go back to using only one
core.</li>
</ul>
<h2 id="autotools">autotools</h2>
<p><code>autoconf</code> is a package which provides the tooling that a lot of long time C
projects use. Projects which use <code>autoconf</code> have files such as</p>
<ul>
<li><code>bootstrap</code></li>
<li><code>bootstrap.sh</code></li>
<li><code>configure</code></li>
<li><code>configure.sh</code></li>
<li><code>configure.ac</code></li>
<li><code>Makefile.am</code></li>
</ul>
<p>You'll hear these projects referred to as &quot;autoconf&quot; or &quot;autotools&quot; based
projects.</p>
<h3 id="autotools---troubleshooting">autotools - Troubleshooting</h3>
<p>If you get issues with projects that have <code>bootstrap</code>, <code>configure.sh</code>, or
<code>configure.ac</code>, you likely need to make sure the following packages are
installed on your system. Typaclly you'll find you're missing <code>autoconf-archive</code>
or <code>pkg-config</code>. These can be the source of many m4 macro not found errors.</p>
<ul>
<li>automake</li>
<li>autoconf</li>
<li>autoconf-archive</li>
<li>pkg-config</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Terminal Quickstart</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/terminal-quickstart/</id>
    <updated>2020-07-27T18:00:00Z</updated>
    <published>2020-07-29T18:00:00Z</published>
    <content type="html"><![CDATA[<center>
<img alt="Its dangerous to go alone, take this! $ _" src="/images/terminal-quickstart.gif" />
</center>
<h2 id="how-to-read-examples">How to read examples</h2>
<p>You're about to see a lot of examples similar to this one</p>
<pre><code class="language-console" data-lang="console">$ echo Hello World
Hello World
</code></pre><p>The first line in the above example shows</p>
<ul>
<li>
<p>The <em>prompt</em> (<code>$ </code>)</p>
</li>
<li>
<p>The <em>command</em> (<code>echo</code>)</p>
</li>
<li>
<p>The <em>arguments</em> (<code>Hello World</code>)</p>
</li>
</ul>
<p>The second line and all the lines following it until you see another prompt
<code>$ </code> show the output which was a result of running a command. In the above
example. The output was <code>Hello World</code> (the same as the arguments, this is the
purpose of the <code>echo</code> command).</p>
<h2 id="command">Command</h2>
<p>The first word (Including underscores or hyphens) after the prompt <code>$ </code> is the
command.</p>
<pre><code class="language-console" data-lang="console">$ ls
  ^^
   \--- Command
</code></pre><h2 id="argument">Argument</h2>
<p>Everything after the command are called arguments.</p>
<pre><code class="language-console" data-lang="console">$ ls   -l   mydirectory
  ^^   ^^   ^^^^^^^^^^^
   |    |    \--- Argument
   |    |
   |    \--- Argument
   |
   \--- Command
</code></pre><h2 id="running-a-command">Running a command</h2>
<p>To run a command. Type the command and it's arguments into your terminal /
shell. Then hit enter.</p>
<p>In the terminal, there is a general philosophy that no news means good news.
Many commands will only output text to the terminal if that is a part of their
core functionality. Otherwise commands usually output logging information or
error information.</p>
<h2 id="string">String</h2>
<p>The term <em>string</em> means a sequence of characters. Strings are usually found
or referred to within quotes. One can use the word string to talk about any
sequence of characters. Where <em>character</em> likely means something that can be
found in the <a href="https://man7.org/linux/man-pages/man7/ascii.7.html">ASCII</a> table.</p>
<pre><code>       Char          Char
       ----------------------
       SPACE         `
       !             a
       &quot;             b
       #             c
       $             d
       %             e
       &amp;             f
       '             g
       (             h
       )             i
       *             j
       +             k
       ,             l
       -             m
       .             n
       /             o
       0             p
       1             q
       2             r
       3             s
       4             t
       5             u
       6             v
       7             w
       8             x
       9             y
       :             z
       ;             {
       &lt;             |
       =             }
       &gt;             ~
</code></pre><p>For example you could call each of the following a string</p>
<ul>
<li>
<p>&quot;Hello World&quot;</p>
</li>
<li>
<p>/home/username</p>
</li>
<li>
<p>UNIX</p>
</li>
</ul>
<h2 id="navigation-and-paths">Navigation and paths</h2>
<p>A directory is another word for a folder</p>
<p>When talking about where something is (a directory, a file, a command, etc.) we
use the word <em>path</em>.</p>
<p>The last part of a path is the something (the directory, the file, the command,
etc.)</p>
<p>Whenever we have a string that contains all the information we'd need to get
from where we are to wherever something is, we call it a path.</p>
<ul>
<li>
<p><code>.</code> means the directory you're in</p>
</li>
<li>
<p><code>..</code> means the directory above the directory you're in</p>
</li>
<li>
<p><code>/</code> means the path <em>separator</em></p>
</li>
</ul>
<p>The file system works like a tree. We call something a <em>full path</em> or an
<em>absolute path</em> when it starts with <code>/</code>.</p>
<p>The directory a full path starts with is called the <em>root</em>. It's name is &quot;the
root directory&quot;, because we can't give it a name, since it's denoted via the
path separator. Whenever you see <code>/</code> as the only character in a path, or as the
first character of a path, think to yourself, that's the root directory.</p>
<p>Where <code>/</code> is not the first or only character, it's used to show separation
between files and directories.</p>
<p>Examples</p>
<ul>
<li>
<p><code>/</code></p>
<ul>
<li>The root directory</li>
</ul>
</li>
<li>
<p><code>/a/b/c.txt</code></p>
<ul>
<li>Start at the root directory. Then go directory <code>a</code>. Within directory <code>a</code>
there is a directory <code>b</code>. Go into directory <code>b</code>. Within directory <code>b</code> there
is a file named <code>c.txt</code>. This is the file the path is referencing</li>
</ul>
</li>
<li>
<p><code>./a.out</code></p>
<ul>
<li><code>.</code> means the current directory. The separator is seen after it. Then we see
<code>a.out</code> which is the file the path is referencing</li>
</ul>
</li>
<li>
<p><code>../updog</code></p>
<ul>
<li>Look in the directory above the one we're currently in for a file named
<code>updog</code></li>
</ul>
</li>
<li>
<p><code>../../updog</code></p>
<ul>
<li>Look in the directory above the directory above the one we're currently in
for a file named <code>updog</code></li>
</ul>
</li>
</ul>
<h2 id="useful-commands">Useful Commands</h2>
<p>Here are some commands that will be useful for you to understand where you are,
how to move around, and what stuff is in the directory (aka folder) you're in.</p>
<h3 id="where-am-i">Where am I?</h3>
<p>Use the <code>pwd</code> command to find out where you are on your system</p>
<p>In the below example, we run the <code>pwd</code> command and it tells us we're in our
<code>HOME</code> directory.</p>
<pre><code class="language-console" data-lang="console">$ pwd
/home/username
</code></pre><h3 id="what-files-are-here">What files are here?</h3>
<p>The <code>ls</code> command prints the contents of the directory we are currently in</p>
<pre><code class="language-console" data-lang="console">$ ls
file1  file2
</code></pre><p>We can supply it with the name of a directory as an argument to have it list the
contents of that directory</p>
<pre><code class="language-console" data-lang="console">$ ls my-directory
file1  file2
</code></pre><p>If we give <code>-lAF</code> as an argument to <code>ls</code> it will show us all the hidden files as
a long list.</p>
<pre><code class="language-console" data-lang="console">$ ls -lAF
total 0
-rw-rw-r--. 1 username username 0 Jul 30 18:00 file1
-rw-rw-r--. 1 username username 0 Jul 30 18:00 file2
</code></pre><h3 id="how-do-i-move-around">How do I move around?</h3>
<p>Pass the path as the only argument to the <code>cd</code> command to change where you
currently are, known as your <em>current working directory</em>.</p>
<pre><code class="language-console" data-lang="console">$ cd somewhere
</code></pre><p>Pass no arguments to be taken to your home directory</p>
<pre><code class="language-console" data-lang="console">$ cd
</code></pre><h3 id="how-to-i-create-new-directories">How to I create new directories?</h3>
<pre><code class="language-console" data-lang="console">$ mkdir -p my-new-directory
</code></pre><h3 id="download-files">Download files?</h3>
<p>The curl or wget commands download files when provided with a URL</p>
<p>wget will save the file as it's filename</p>
<pre><code class="language-console" data-lang="console">$ wget 'https://example.com/file.tar.gz'
</code></pre><p>curl usually needs to be told to follow redirects using <code>-L</code> and then to have it
save the file as the filename you'll need <code>-O</code> (which if you put it with the
<code>-L</code> you only need one <code>-</code>).</p>
<pre><code class="language-console" data-lang="console">$ curl -LO 'https://example.com/file.tar.gz'
</code></pre><blockquote>
<p>Sometimes one is installed on your system and the other isn't. Try the other
one if you're seeing something allong the lines of &quot;Command not found&quot;</p>
</blockquote>
<h3 id="extract-zip-and-tar-files">Extract zip and tar files?</h3>
<p>When you download software it usually in a <code>.tar</code> or <code>.zip</code> file.</p>
<p>You can extract <code>.tar</code> files using the tar command.</p>
<pre><code class="language-console" data-lang="console">$ tar -xvf file.tar.gz
</code></pre><p>You can extract <code>.zip</code> files using the unzip command.</p>
<pre><code class="language-console" data-lang="console">$ unzip file.zip
</code></pre><h2 id="editor---vim">Editor - VIM</h2>
<p>vim (aka vi) is a common editor you'll find installed on a lot of UNIX systems.</p>
<p>To edit <code>filename.c</code> pass it as an argument to vim</p>
<pre><code class="language-console" data-lang="console">$ vim filename.c
</code></pre><p>Press</p>
<ul>
<li>
<p><code>i</code> to start editing</p>
<ul>
<li>Use the arrow keys to move around</li>
</ul>
</li>
<li>
<p><code>ESC</code> to get out of editing mode</p>
<ul>
<li>
<p><code>:w</code> and then enter to save the file</p>
</li>
<li>
<p><code>:q</code> and then enter to quit</p>
</li>
</ul>
</li>
</ul>
<p>You can learn how to use vim by going to <a href="https://vim-adventures.com/">https://vim-adventures.com/</a></p>
<h2 id="keyboard-shortcuts">Keyboard Shortcuts</h2>
<p>Some keys or key combinations that can speed you up.</p>
<h3 id="tab">Tab</h3>
<p>Whenever you hit the Tab key on your keyboard (above Caps Lock) your shell will
attempt to auto complete whatever you're typing. Hit Tab twice for a list of
autocomplete options. Keep typing and hitting tab and eventually when there is
only one match left it will fill the rest of the word in.</p>
<blockquote>
<p>TODO Add asciinema video of Tab complete in action</p>
</blockquote>
<h3 id="ctrl-r">Ctrl-R</h3>
<p>Start typing to reverse search through your past commands. Hit enter to run.</p>
<blockquote>
<p>TODO Add asciinema video of Ctrl-R complete in action</p>
</blockquote>]]></content>
  </entry>
  <entry>
    <title>CORS</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/cors/</id>
    <updated>2020-07-24T06:00:00Z</updated>
    <published>2020-07-24T06:00:00Z</published>
    <content type="html"><![CDATA[<p>Hey you know JavaScript, that thing everyone loves and hates.</p>
<p>Well chances are you've written some of it. And you don't understand what these
bullshit CORS messages are in the console when you try to make a request to a
service hosted on a diferent domain or port than the one your webpage is served
from.</p>
<p>CORS (Cross Origin Resource Sharing) is a security feature which makes it so
that websites can't send request to other websites without the permission of the
site the request is being sent to. Makes sense, but it can be a pain when
developing.</p>
<p>You need control over the web server you are <em>requesting</em> in order to make CORS
requests work (or a proxy between your client and the server).</p>
<h2 id="fetch">Fetch</h2>
<p>You might have run across this if you've tried using the
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">&quot;Using Fetch&quot;</a>
example from the Mozilla JavaScript documentation. Since it's about CORS.</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
  <span class="nx">mode</span><span class="o">:</span> <span class="s1">&#39;cors&#39;</span><span class="p">,</span>
  <span class="nx">cache</span><span class="o">:</span> <span class="s1">&#39;no-cache&#39;</span><span class="p">,</span>
  <span class="nx">credentials</span><span class="o">:</span> <span class="s1">&#39;same-origin&#39;</span><span class="p">,</span>
  <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
    <span class="c1">// Triggers the sending of `Access-Control-Request-Headers: content-type`
</span><span class="c1"></span>    <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/json&#39;</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="nx">redirect</span><span class="o">:</span> <span class="s1">&#39;follow&#39;</span><span class="p">,</span>
  <span class="nx">referrer</span><span class="o">:</span> <span class="s1">&#39;no-referrer&#39;</span><span class="p">,</span>
  <span class="nx">body</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">),</span> <span class="c1">// body data type must match &#34;Content-Type&#34; header
</span><span class="c1"></span><span class="p">})</span>
</code></pre></div><h2 id="example-request">Example Request</h2>
<p>When your JavaScript makes a <code>POST</code> request to <code>/url/path/requested/by/client</code>,
the following is the interaction between the server and the client (for the
<em>preflight</em> request, in the successful case).</p>
<p>Since we've issued a <code>POST</code> request instead of a <code>GET</code> request, the browser is
going to make a request before the <code>POST</code> called the <em>preflight</em> request. This
request has a HTTP method of <code>OPTIONS</code>. The purpose is for the browser to check
if this JavaScript is allowed to make a <code>POST</code> request to the server.</p>
<pre><code>*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)
&gt; OPTIONS /url/path/requested/by/client HTTP/1.1
&gt; Host: 127.0.0.1:8080
&gt; Accept-Encoding: deflate, gzip
&gt; User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
&gt; Accept: */*
&gt; Accept-Language: en-US,en;q=0.5
&gt; Access-Control-Request-Method: POST
&gt; Access-Control-Request-Headers: content-type
&gt; Referer: http://127.0.0.1:5000/no-referrer
&gt; Origin: http://127.0.0.1:5000
&gt; DNT: 1
&gt; Connection: keep-alive
&gt; Pragma: no-cache
&gt; Cache-Control: no-cache
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Access-Control-Allow-Origin: http://127.0.0.1:5000
&lt; Access-Control-Allow-Methods: POST
&lt; Access-Control-Allow-Headers: CONTENT-TYPE
&lt; Content-Length: 0
&lt; Content-Type: application/octet-stream
&lt; Date: Wed, 31 Jul 2019 20:35:24 GMT
&lt; Server: Python/3.7 aiohttp/3.5.4
&lt; 
* Connection #0 to host 127.0.0.1 left intact
</code></pre><p>There's a couple important parts to this.</p>
<ul>
<li><code>OPTIONS</code>
<ul>
<li>Since the request is for the <code>OPTIONS</code> method. We need to make sure whatever
server we're using, or library we're using to make a webserver, will repond
to <code>OPTIONS</code> requests on the URL requested.</li>
</ul>
</li>
<li><code>Access-Control-Request-Headers</code>
<ul>
<li>When the server responds to the <code>OPTIONS</code> request, it should include the
<code>Access-Control-Allow-Headers</code> header in the response. This tells the
browser what headers the JavaScript is allowed to send.</li>
</ul>
</li>
</ul>
<h2 id="fixing-it">Fixing it</h2>
<p>You likely need to find some middleware for whatever framework your using, or
search for how to enable CORS with whatever your working with.</p>
<p>For example</p>
<ul>
<li>
<p><a href="https://enable-cors.org/server.html">https://enable-cors.org/server.html</a></p>
<ul>
<li>List of how to enable for various servers and clients</li>
</ul>
</li>
<li>
<p><a href="https://github.com/aio-libs/aiohttp-cors">https://github.com/aio-libs/aiohttp-cors</a></p>
<ul>
<li>If you're using aiohttp server</li>
</ul>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>ffmpeg</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/ffmpeg/</id>
    <updated>2020-07-24T06:00:00Z</updated>
    <published>2020-07-24T06:00:00Z</published>
    <content type="html"><![CDATA[<p>ffmpeg is a powerful tool for command line video, audio, and image processing
(centered around images and audio as they relate to video).</p>
<p>Here's some things you can do with it</p>
<h2 id="video-to-gif">Video to GIF</h2>
<pre><code class="language-console" data-lang="console">$ ffmpeg -ss 0.3 -t 40 -i input-video.flv -vf \
  &quot;fps=10,scale=1920:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse&quot; \
  -loop 0 output.gif
</code></pre><p>Arguments:</p>
<ul>
<li>
<p><code>-ss</code> start second</p>
</li>
<li>
<p><code>-t</code> end after X seconds</p>
</li>
<li>
<p><code>-y</code> means overwrite the output file without asking</p>
</li>
</ul>
<p>Notes:</p>
<ul>
<li>
<p><code>scale=1920</code> lower this number to lower Y (I think?) resolution, lower will
give you a smaller file size</p>
</li>
<li>
<p><code>fps=10</code> lower this number to speed up, number of frames per second, also will
decrease size of output file</p>
</li>
</ul>
<h2 id="crop-video">Crop video</h2>
<pre><code class="language-console" data-lang="console">$ ffmpeg -i putin-on-ritz.mp3 -ss 00:00:43 -t 00:00:57 -async 1 cut.mp3
</code></pre><h2 id="combine-with-image">Combine with image</h2>
<pre><code class="language-console" data-lang="console">$ ffmpeg -loop 1 -y -i putin-on-the-ritz.jpg -i cut.mp3 -shortest out.webm
</code></pre>]]></content>
  </entry>
  <entry>
    <title>Linux Kernel Development Tips And Tricks</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/linux-kernel/</id>
    <updated>2020-10-06T08:00:00Z</updated>
    <published>2020-07-24T06:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="quickstart">Quickstart</h1>
<p>We are going to download the Git repositories of QEMU and the Linux kernel. We
are not going to cover what dependencies are required. You should read the
reference links for each section to help you get the compilers and other build
tools you will need.</p>
<h2 id="building-the-kernel">Building the Kernel</h2>
<pre><code>git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
cd linux
git checkout v5.8
# Copy your system's config into the kernel source tree to use as your config
# You can modify it too if you want but you can be pretty sure this will give
# you a working kernel without having to edit it
cp $(ls /boot/config-* | head -n 1) .config
make olddefconfig
# Build just the bzImage needed to boot the VM. If you want to build all the
# modules too, just leave off the last argument (bzImage)
make -j $(($(nproc)*4)) bzImage
</code></pre><blockquote>
<p>References</p>
<ul>
<li><a href="https://docs.fedoraproject.org/en-US/quick-docs/kernel/build-custom-kernel/#_get_the_dependencies">Fedora Build Dependencies</a></li>
<li><a href="https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel#Build_Environment">Ubuntu Build Dependencies</a></li>
</ul>
</blockquote>
<h2 id="building-qemu">Building QEMU</h2>
<pre><code>git clone https://git.qemu.org/git/qemu.git
cd qemu
git checkout v5.1.0
git submodule init
git submodule update --recursive
mkdir build
cd build
../configure
make -j $(($(nproc)*4))
</code></pre><blockquote>
<p>References</p>
<ul>
<li><a href="https://wiki.qemu.org/Hosts/Linux">https://wiki.qemu.org/Hosts/Linux</a></li>
<li><a href="https://www.qemu.org/download/#source">https://www.qemu.org/download/#source</a></li>
</ul>
</blockquote>
<h2 id="running-your-vm">Running your VM</h2>
<p>Put the following script in a file called <code>run-vm.sh</code>. It will be the way you
run your development Kernel in a virtual machine. You can modify it as you wish.</p>
<script src="https://gist.github.com/pdxjohnny/a0dc3a58b4651dc3761bee65a198a80d.js"></script>
<p>Here's how you download it, make it executable, and run it.</p>
<pre><code>curl -o run-vm.sh -fSL https://gist.github.com/pdxjohnny/a0dc3a58b4651dc3761bee65a198a80d/raw/da2f456c9ecbb56bf84ee30c8c83a2762e86fb43/run-vm.sh &amp;&amp; \
echo &quot;eb5c49fb0aff6b3293ad6f4bd8c7a9c32df97f40d3c8c4fe404b72c1e9c283b44e714be493ce88b5f22e5bb717b8f71d  run-vm.sh&quot; | sha384sum -c - &amp;&amp; \
chmod 755 run-vm.sh
./run-vm.sh
</code></pre><h2 id="debugging">Debugging</h2>
<p>Core dumps and kgdb: <a href="https://elinux.org/images/f/f0/Bingham.pdf">https://elinux.org/images/f/f0/Bingham.pdf</a></p>
<h2 id="exploitation">Exploitation</h2>
<p>SMEP disable via ROP, KASLR bypasss via DMESG</p>
<ul>
<li><a href="https://web.archive.org/web/20171029060939/http://www.blackbunny.io/linux-kernel-x86-64-bypass-smep-kaslr-kptr_restric/">https://web.archive.org/web/20171029060939/http://www.blackbunny.io/linux-kernel-x86-64-bypass-smep-kaslr-kptr_restric/</a></li>
</ul>
<h2 id="hacking-with-vim">Hacking With VIM</h2>
<p><a href="https://stackoverflow.com/questions/33676829/vim-configuration-for-linux-kernel-development">https://stackoverflow.com/questions/33676829/vim-configuration-for-linux-kernel-development</a></p>
<h2 id="build-in-tree-modules">Build In Tree Modules</h2>
<pre><code class="language-console" data-lang="console">make -j $(($(nproc)*4)) M=arch/x86/kvm/ modules
</code></pre><h2 id="install-kernel-to-chroot">Install Kernel To chroot</h2>
<p>Here's how you install a kernel to a chroot. Or tar it up and
send it over to another system for use there.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Edit your config</span>
make olddefconfig
<span class="nb">export</span> <span class="nv">INSTALL_MOD_PATH</span><span class="o">=</span>/path/to/your/chroot
<span class="nb">export</span> <span class="nv">INSTALL_PATH</span><span class="o">=</span><span class="si">${</span><span class="nv">INSTALL_MOD_PATH</span><span class="si">}</span>/boot
mkdir -p <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_PATH</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="c1"># Use number of cores times 4, this usually is about how many</span>
<span class="c1"># threads your system can run</span>
make -j <span class="k">$(($(</span>nproc<span class="k">)</span><span class="o">*</span><span class="m">4</span><span class="k">))</span>
make install
make modules_install -j <span class="k">$(($(</span>nproc<span class="k">)</span><span class="o">*</span><span class="m">4</span><span class="k">))</span>
</code></pre></div><h2 id="chroot">Chroot</h2>
<p>Instead of doing a regular chroot use <code>systemd-nspawn</code> which gives you a more fully featured chroot.</p>
<p><a href="https://wiki.archlinux.org/index.php/Systemd-nspawn">https://wiki.archlinux.org/index.php/Systemd-nspawn</a></p>
<h2 id="debugging-with-gdb">Debugging With GDB</h2>
<p>If you are lucky enough to be working on something thats in a VM you can get
GDB working!</p>
<p>You need to run the kernel without KASLR (on the cmdline thats <code>nokaslr</code>).</p>
<blockquote>
<p>If you don't disable KASLR gdb can't set breakpoints or display the source to you</p>
</blockquote>
<p>Then you run QEMU with <code>-s -S</code>.</p>
<ul>
<li><code>-s</code> says enable GDB on port <code>1234</code></li>
<li><code>-S</code> says wait to start the VM until GDB connects.</li>
</ul>
<p>Run GDB with <code>gdb ./vmlinux</code></p>
<p>Now run</p>
<pre><code class="language-console" data-lang="console">(gdb) target remote 127.0.0.1:1234
</code></pre><p>To view the source code, type <code>layout src</code></p>
<p>To focus back on the typey type window, type <code>focus cmd</code></p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c">   <span class="err">┌──</span><span class="n">arch</span><span class="o">/</span><span class="n">x86</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">machine_kexec_64</span><span class="p">.</span><span class="n">c</span><span class="err">─────────────────────────────────────────────────────────────────┐</span>
   <span class="err">│</span><span class="mi">353</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span>                                                                      <span class="err">│</span>
   <span class="err">│</span><span class="mi">354</span>                         <span class="k">return</span> <span class="n">result</span><span class="p">;</span>                                                           <span class="err">│</span>
   <span class="err">│</span><span class="mi">355</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">356</span>                 <span class="cm">/* update purgatory as needed */</span>                                                 <span class="err">│</span>
   <span class="err">│</span><span class="mi">357</span>                 <span class="n">result</span> <span class="o">=</span> <span class="n">arch_update_purgatory</span><span class="p">(</span><span class="n">image</span><span class="p">);</span>                                           <span class="err">│</span>
   <span class="err">│</span><span class="mi">358</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span>                                                                      <span class="err">│</span>
   <span class="err">│</span><span class="mi">359</span>                         <span class="k">return</span> <span class="n">result</span><span class="p">;</span>                                                           <span class="err">│</span>
   <span class="err">│</span><span class="mi">360</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">361</span>                 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>                                                                        <span class="err">│</span>
   <span class="err">│</span><span class="mi">362</span>         <span class="p">}</span>                                                                                        <span class="err">│</span>
   <span class="err">│</span><span class="mi">363</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">364</span>         <span class="kt">void</span> <span class="n">machine_kexec_cleanup</span><span class="p">(</span><span class="k">struct</span> <span class="n">kimage</span> <span class="o">*</span><span class="n">image</span><span class="p">)</span>                                         <span class="err">│</span>
   <span class="err">│</span><span class="mi">365</span>         <span class="p">{</span>                                                                                        <span class="err">│</span>
   <span class="err">│</span><span class="mi">366</span>                 <span class="n">free_transition_pgtable</span><span class="p">(</span><span class="n">image</span><span class="p">);</span>                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">367</span>         <span class="p">}</span>                                                                                        <span class="err">│</span>
   <span class="err">│</span><span class="mi">368</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">369</span>         <span class="cm">/*                                                                                       │
</span><span class="cm">   │370          * Do not allocate memory (or fail in any way) in machine_kexec().                       │
</span><span class="cm">   │371          * We are past the point of no return, committed to rebooting now.                       │
</span><span class="cm">   │372          */</span>                                                                                      <span class="err">│</span>
   <span class="err">│</span><span class="mi">373</span>         <span class="kt">void</span> <span class="n">machine_kexec</span><span class="p">(</span><span class="k">struct</span> <span class="n">kimage</span> <span class="o">*</span><span class="n">image</span><span class="p">)</span>                                                 <span class="err">│</span>
<span class="n">B</span><span class="o">+&gt;</span><span class="err">│</span><span class="mi">374</span>         <span class="p">{</span>                                                                                        <span class="err">│</span>
   <span class="err">│</span><span class="mi">375</span>                 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">page_list</span><span class="p">[</span><span class="n">PAGES_NR</span><span class="p">];</span>                                               <span class="err">│</span>
   <span class="err">│</span><span class="mi">376</span>                 <span class="kt">void</span> <span class="o">*</span><span class="n">control_page</span><span class="p">;</span>                                                              <span class="err">│</span>
   <span class="err">│</span><span class="mi">377</span>                 <span class="kt">int</span> <span class="n">save_ftrace_enabled</span><span class="p">;</span>                                                         <span class="err">│</span>
   <span class="err">│</span><span class="mi">378</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">379</span>         <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_KEXEC_JUMP</span>                                                                 <span class="err">│</span>
   <span class="err">│</span><span class="mi">380</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">image</span><span class="o">-&gt;</span><span class="n">preserve_context</span><span class="p">)</span>                                                     <span class="err">│</span>
   <span class="err">│</span><span class="mi">381</span>                         <span class="n">save_processor_state</span><span class="p">();</span>                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">382</span>         <span class="err">#</span><span class="n">endif</span>                                                                                   <span class="err">│</span>
   <span class="err">│</span><span class="mi">383</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">384</span>                 <span class="n">save_ftrace_enabled</span> <span class="o">=</span> <span class="n">__ftrace_enabled_save</span><span class="p">();</span>                                   <span class="err">│</span>
   <span class="err">│</span><span class="mi">385</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">386</span>                 <span class="cm">/* Interrupts aren&#39;t acceptable while we reboot */</span>                               <span class="err">│</span>
   <span class="err">│</span><span class="mi">387</span>                 <span class="n">local_irq_disable</span><span class="p">();</span>                                                             <span class="err">│</span>
   <span class="err">│</span><span class="mi">388</span>                 <span class="n">hw_breakpoint_disable</span><span class="p">();</span>                                                         <span class="err">│</span>
   <span class="err">│</span><span class="mi">389</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">390</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">image</span><span class="o">-&gt;</span><span class="n">preserve_context</span><span class="p">)</span> <span class="p">{</span>                                                   <span class="err">│</span>
   <span class="err">│</span><span class="mi">391</span>         <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_X86_IO_APIC</span>                                                                <span class="err">│</span>
   <span class="err">│</span><span class="mi">392</span>                         <span class="cm">/*                                                                       │
</span><span class="cm">   │393                          * We need to put APICs in legacy mode so that we can                    │
</span><span class="cm">   │394                          * get timer interrupts in second kernel. kexec/kdump                    │
</span><span class="cm">   │395                          * paths already have calls to restore_boot_irq_mode()                   │
</span><span class="cm">   │396                          * in one form or other. kexec jump path also need one.                  │
</span><span class="cm">   └─────────────────────────────────────────────────────────────────────────────────────────────────────┘
</span><span class="cm">remote Thread 1.1 In: machine_kexec                                          L374  PC: 0xffffffff810635f0
</span><span class="cm">(gdb) b *machine_kexec
</span><span class="cm">Breakpoint 1 at 0xffffffff810635f0: file arch/x86/kernel/machine_kexec_64.c, line 374.
</span><span class="cm">(gdb) c
</span><span class="cm">Continuing.
</span><span class="cm">
</span><span class="cm">Breakpoint 1, machine_kexec (image=0xffff888006f96800) at arch/x86/kernel/machine_kexec_64.c:374
</span><span class="cm">(gdb)
</span><span class="cm">
</span></code></pre></div><h2 id="kvm">KVM</h2>
<p><a href="https://lwn.net/Articles/658511/">https://lwn.net/Articles/658511/</a></p>
<h3 id="nested-and-vmcs">Nested and VMCS</h3>
<p><a href="https://web.archive.org/web/20191105205408/http://events19.linuxfoundation.org/wp-content/uploads/2017/12/Improving-KVM-x86-Nested-Virtualization-Liran-Alon-Oracle.pdf">https://web.archive.org/web/20191105205408/http://events19.linuxfoundation.org/wp-content/uploads/2017/12/Improving-KVM-x86-Nested-Virtualization-Liran-Alon-Oracle.pdf</a></p>
<h2 id="contributions">Contributions</h2>
<p>In your patches, write all about what you're doing. The kernel doesn't
seem to like comments very much. Instead they rely on people writing
insanely detailed commit messages describing what they are changing.</p>
<p>Every time you change the kernel you're changing something that has been
working fine for someone for X amount of long time. As such, you need to
be convincing for why your change should be accepted! Make your coverletter
and commit messages very detailed. The kernel is a big place. It may have
been a long time since someone reading your patch series has looked at the
place you're working. Be courtious and remind them of all the moving peices
involved in what you're doing, and why and how you're changing them.</p>
<h3 id="etiquette">Etiquette</h3>
<ul>
<li>You can say <code>patch</code> or <code>patchset</code> in your coverletter. Just not in the
commit messages themselves.</li>
</ul>
<h2 id="kvm-1">KVM</h2>
<h3 id="vmx">VMX</h3>
<p>When a VM enters VMX root mode (aka &quot;I'm gonna run some VMs mode&quot;) using
the <code>VMXON</code> instruction, it sets up what's called a <code>VMCS</code> for each VM
/ virtualized processor it wants to run. All VMX related instructions
operate on whatever VMCS we pointed to via the <code>VMPTRLD</code> instruction.</p>
<h3 id="nested">Nested</h3>
<ul>
<li>
<p>L0 == The host</p>
</li>
<li>
<p>L1 == The guest</p>
</li>
<li>
<p>L2 == The guest of the guest</p>
</li>
</ul>
<p><code>vmx/nested.c</code> is responsible for emulating VMX for L1. When L1 does a
<code>VMLAUNCH</code> or <code>VMRESUME</code>, <code>enter_guest_mode</code> is called, which means that
<code>is_guest_mode</code> will now return <code>true</code>.</p>
<h3 id="terminology">Terminology</h3>
<p>Root mode = L0 when not running a virtual machine</p>
<p>Non-root mode = L0 when running a virtual machine L(n)</p>
<h2 id="assembly">Assembly</h2>
<p>What is <code>jmp 1f</code>?</p>
<p><a href="https://stackoverflow.com/a/27353169/12310488">https://stackoverflow.com/a/27353169/12310488</a></p>]]></content>
  </entry>
  <entry>
    <title>QEMU</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/qemu/</id>
    <updated>2020-07-24T06:00:00Z</updated>
    <published>2020-07-24T06:00:00Z</published>
    <content type="html"><![CDATA[<p>QEMU is an indispensable tool for the virtual machine inclined. It's a command
line utility for running virtual machines.</p>
<h2 id="example-flags">Example Flags</h2>
<p>Run a 64 bit Intel / AMD system</p>
<pre><code class="language-console" data-lang="console">qemu-system-x86_64 ...
</code></pre><h3 id="kvm">KVM</h3>
<p>Without KVM your VM will be VERY VERY VERY slow. You'll want to enable this.</p>
<pre><code>  -enable-kvm
</code></pre><p>Make sure your use account has access to <code>/dev/kvm</code>, use <code>chown</code> to make the
group <code>kvm</code>, and add your user to that group. You'll need log out and log back
in for changes to take effect. Or run <code>bash --login</code>.</p>
<pre><code class="language-console" data-lang="console">$ groupadd kvm
$ usermod -aG $USER kvm
$ ll /dev/kvm
crw-rw-rw- 1 root root 10, 232 Jul 22 12:10 /dev/kvm
$ chown root:kvm /dev/kvm
$ ll /dev/kvm
crw-rw-rw- 1 root kvm 10, 232 Jul 22 12:10 /dev/kvm
</code></pre><h3 id="multiple-cpus">Multiple CPUs</h3>
<pre><code>  -smp cpus=4
</code></pre><h3 id="memory">Memory</h3>
<pre><code>  -m 8192M
</code></pre><h3 id="port-forwarding">Port Forwarding</h3>
<pre><code>  -net \
    nic,model=virtio \
  -net \
    user,hostfwd=tcp::2222-:22,hostfwd=tcp::4444-:2222
</code></pre><h3 id="kernel">Kernel</h3>
<p>Boot directly to a Linux kernel binary (skips some BIOS stuff)</p>
<pre><code>  -kernel \
    &quot;linux-source-tree/arch/x86/boot/bzImage&quot;
</code></pre><h3 id="kernel-cmdline">Kernel cmdline</h3>
<p>The <code>root*</code> options here correspond to the
<a href="#host-filesystem-passthrough">Host Filesystem Passthrough</a> section.</p>
<pre><code>  -append \
    &quot;console=ttyS0 rootfstype=9p root=/dev/root ro rootflags=trans=virtio,version=9p2000.u init=/usr/lib/systemd/systemd&quot;
</code></pre><h3 id="disable-gui">Disable GUI</h3>
<pre><code>  -nographic
</code></pre><h3 id="cpu-emulation">CPU Emulation</h3>
<p>Specify <code>host</code> to have QEMU not emulate another CPU, just use the host CPU.</p>
<pre><code>  -cpu host
</code></pre><h3 id="specify-bios">Specify BIOS</h3>
<p>You'll need this if you want to use UEFI</p>
<pre><code>  -bios \
    &quot;path/to/OVMF.fd&quot;
</code></pre><h3 id="bios-debugging-connection">BIOS Debugging Connection</h3>
<pre><code>  -chardev \
    pipe,path=qemudebugpipe,id=seabios \
  -device \
    isa-debugcon,iobase=0x402,chardev=seabios
</code></pre><p>Reference: <a href="https://www.seabios.org/Debugging#Debugging_with_gdb_on_QEMU">https://www.seabios.org/Debugging#Debugging_with_gdb_on_QEMU</a></p>
<h3 id="host-filesystem-passthrough">Host Filesystem Passthrough</h3>
<p>Use a directory on the host as a filesystem for the guest.</p>
<p>This requires that the guest kernel has been configured with:</p>
<pre><code>CONFIG_9P_FS=y
CONFIG_9P_FS_POSIX_ACL=y
CONFIG_9P_FS_SECURITY=y
CONFIG_NET_9P=y
CONFIG_NET_9P_VIRTIO=y
</code></pre><p><em>9P fs is buggy as all hell</em> In particular, fsync seems to be broken.</p>
<pre><code>  -fsdev \
    local,id=fsdev-root,path=&quot;${CHROOT}&quot;,security_model=passthrough,readonly \
  -device \
    virtio-9p-pci,fsdev=fsdev-root,mount_tag=/dev/root
</code></pre><p>Make sure you're using the <a href="#kernel-cmdline">corresponding kernel cmdline</a>
options.</p>
<h3 id="creating-a-bootable-uefi-guest-image">Creating A Bootable UEFI Guest Image</h3>
<p>Create <code>qcow2</code> image</p>
<pre><code class="language-console" data-lang="console">$ qemu-img create -f qcow2 image.qcow2 20G
</code></pre><blockquote>
<p>Source of NBD commands: <a href="https://gist.github.com/shamil/62935d9b456a6f9877b5">https://gist.github.com/shamil/62935d9b456a6f9877b5</a></p>
</blockquote>
<p>Enable network block devices</p>
<pre><code class="language-console" data-lang="console">$ sudo modprobe nbd max_part=8
</code></pre><p>Map the image file to the <code>/dev/nbd0</code> network block device</p>
<pre><code class="language-console" data-lang="console">$ sudo qemu-nbd --connect=/dev/nbd0 image.qcow2
</code></pre><p>Create GPT partition table (UEFI)</p>
<pre><code class="language-console" data-lang="console">$ sudo parted /dev/nbd0 &lt;&lt; 'EOF'
mklabel gpt
mkpart primary fat32 1MiB 261MiB
set 1 esp on
mkpart primary linux-swap 261MiB 10491MiB
mkpart primary ext4 10491MiB 100%
EOF
</code></pre><p>Format partitions</p>
<pre><code class="language-console" data-lang="console">$ sudo mkfs.fat /dev/nbd0p1
$ sudo mkswap /dev/nbd0p2
$ sudo mkfs.ext4 /dev/nbd0p3
</code></pre><p>Unmount and disconnect</p>
<pre><code class="language-console" data-lang="console">$ sudo umount -R /mnt/somepoint/
$ sudo qemu-nbd --disconnect /dev/nbd0
</code></pre><blockquote>
<p>parted commands from: <a href="https://wiki.archlinux.org/index.php/Parted#UEFI/GPT_examples">https://wiki.archlinux.org/index.php/Parted#UEFI/GPT_examples</a></p>
</blockquote>
<h3 id="cpu-hotplug">CPU Hotplug</h3>
<pre><code class="language-conole" data-lang="conole">  -smp 1,maxcpus=2 -qmp unix:/tmp/q,server,nowait
</code></pre><p>In another shell</p>
<pre><code class="language-console" data-lang="console">$ sudo qemu/scripts/qmp/qmp-shell -p -v /tmp/q
Welcome to the QMP low-level shell!
Connected to QEMU 4.1.0

(QEMU) device_add id=cpu-2 driver=host-x86_64-cpu socket-id=1 core-id=0 thread-id=0 die-id=0
</code></pre><p>Back in your Linux guest you'll see
<code>[   51.190460] CPU1 has been hot-added</code> in the dmesg logs.</p>
<p>To initialize the CPU within the guest</p>
<pre><code class="language-console" data-lang="console"># echo 1 &gt; /sys/devices/system/cpu/cpu1/online
</code></pre><blockquote>
<p>Reference: <a href="https://wiki.qemu.org/Features/CPUHotplug">https://wiki.qemu.org/Features/CPUHotplug</a></p>
</blockquote>
<h3 id="precompiled-uefi-firmware">Precompiled UEFI Firmware</h3>
<p><a href="https://cdn.download.clearlinux.org/image/OVMF.fd">https://cdn.download.clearlinux.org/image/OVMF.fd</a></p>]]></content>
  </entry>
  <entry>
    <title>Wireguard HowTo</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/wireguard/</id>
    <updated>2020-07-24T06:00:00Z</updated>
    <published>2020-07-24T06:00:00Z</published>
    <content type="html"><![CDATA[<p>Wireguard is a VPN that comes built into Linux kernels &gt;= 5.6
It also has clients for OSs like Windows, OSX, and Android.</p>
<p>If you're looking for how to have a virtual LAN party, Wireguard
is a great way to do it. Since it's cross platform. You can even
play Windows games on Linux using Lutris and network them with
Wireguard to get Windows and Linux machines playing together.</p>
<h2 id="checking-if-you-have-it">Checking If You Have It</h2>
<p>To check if you're Linux distro alreay has wireguard support,
look in the modules directory.</p>
<blockquote>
<p>My version at the moment is <code>5.6.4-152.current</code>, yours will
likely be different</p>
</blockquote>
<pre><code class="language-console" data-lang="console">$ find /lib/modules/$(uname -r) -type f -name '*wireguard*.ko*'
/lib/modules/5.6.4-152.current/kernel/drivers/net/wireguard/wireguard.ko
</code></pre><p>If that doesn't show anything then check if it's built into the
kernel. This command will show some output if it is. On my system
it's a <code>.ko</code>, therefore it's not builtin, therefore this command
showed nothing.</p>
<pre><code class="language-console" data-lang="console">$ grep wireguard /lib/modules/$(uname -r)/modules.builtin
</code></pre><p>You'll also need the <code>wg</code> command line utility. Just type <code>wg</code> and
if you see command not found then you'll want to head over to
<a href="https://www.wireguard.com/install/">https://www.wireguard.com/install/</a> for details on how to install it.</p>
<h2 id="getting-it">Getting It</h2>
<p>If you don't have a version of the Linux kernel with wireguard
built in, you can compile and use the
<a href="https://git.zx2c4.com/wireguard-go/about/">wireguard-go</a> project.
It won't be as fast as compiling the kernel module but it might be
a hell of a lot less steps.</p>
<p>If you don't want to take the performance hit, you can compile the
kernel module as seen in the
<a href="https://www.wireguard.com/compilation/">compilation</a> instructions.</p>
<p>You'll build it, then add it to the kernel with <code>insmod</code>.</p>
<pre><code class="language-console" data-lang="console">$ sudo insmod wireguard-linux-compat/src/wireguard.ko
</code></pre><p>Check <code>dmesg</code>, if you see complaints about missing symbols,
you can recompile those modules that are missing, as seen
under kernel requirements. You'll want to find out how your
Linux distrobution recommends compiling the kernel. This is
because many of them have patches that your system won't
work without added to the kernel. You might be able to run
the kernel from kernel.org, but don't count on that.</p>
<h2 id="configuring-it">Configuring It</h2>
<p>The following is an example config file one might use.
There are comments within it to explain everything.</p>
<div class="highlight"><pre class="chroma"><code class="language-ini" data-lang="ini"><span class="c1"># The Interface section is for defining things about this</span>
<span class="c1"># machine</span>
<span class="k">[Interface]</span>
<span class="c1"># The port wireguard will listen on for others to use as</span>
<span class="c1"># and Endpoint (along with this machines IP)</span>
<span class="na">ListenPort</span> <span class="o">=</span> <span class="s">60200</span>
<span class="c1"># On Windows when you click Add Tunnel it will generate</span>
<span class="c1"># a private key for you. On Linux you&#39;ll want to put the</span>
<span class="c1"># output of `wg genkey` here.</span>
<span class="c1"># The config files of the other machines in the network</span>
<span class="c1"># will need the public key that correseponds to this private</span>
<span class="c1"># key. On Windows it will show you the public key in a little</span>
<span class="c1"># box under the config file name when it&#39;s being edited. On</span>
<span class="c1"># Linux, you can run the following command to parse this file</span>
<span class="c1"># to get the private key and convert it into the public key</span>
<span class="c1"># $ grep &#39;PrivateKey = &#39; wg.conf | tail -n 1 | sed -e &#39;s/.* = //g&#39; | wg pubkey</span>
<span class="na">PrivateKey</span> <span class="o">=</span> <span class="s">REPLACE_WITH_PRIVATE_KEY</span>
<span class="c1"># On Windows you&#39;ll want to specify the address for the</span>
<span class="c1"># machine like by removing the # in front. The setup.sh</span>
<span class="c1"># script that follows parses it out of this config file</span>
<span class="c1"># and uses it as your address. For Linux the wg tool will</span>
<span class="c1"># tell you there&#39;s an error if you uncomment it.</span>
<span class="c1"># You&#39;ll want to make sure you leave this as /24 and</span>
<span class="c1"># the other addresses as /32. See the References section</span>
<span class="c1"># for more details on this.</span>
<span class="c1"># Address = 192.168.4.4/24</span>

<span class="c1"># Each time you have a new compuer you want to connect to</span>
<span class="c1"># it&#39;ll need it&#39;s own [Peer] section.</span>
<span class="k">[Peer]</span>
<span class="c1"># You&#39;ll want to specify the public key of the machine</span>
<span class="c1"># you want to connect to. The person with the config file</span>
<span class="c1"># of the machine you&#39;re trying to connect to needs to run</span>
<span class="c1"># the command with `wg pubkey` in the comment above PrivateKey</span>
<span class="c1"># to get their public key. They then should share it with you</span>
<span class="c1"># over some secure medium of communication, ideally end to</span>
<span class="c1"># end encrypted. If it get&#39;s tampered with, your wireguard</span>
<span class="c1"># connection is no longer secure.</span>
<span class="na">PublicKey</span> <span class="o">=</span> <span class="s">4QEX7I58pR5PaZNmDI2wmnsT/HvvFBkNc5wZJ00scXw==</span>
<span class="c1"># You&#39;ll want to put the IP that the other machine will be</span>
<span class="c1"># accessable at here. This is the value they have as Address</span>
<span class="c1"># under the [Interface] section of their wg.conf</span>
<span class="na">AllowedIPs</span> <span class="o">=</span> <span class="s">192.168.4.115/32</span>
<span class="c1"># If the person has a server they&#39;re running wireguard on and</span>
<span class="c1"># has exposed their ListenPort then that goes here. If another</span>
<span class="c1"># person has used their home router and port forwarded then</span>
<span class="c1"># that also can be used. The IP address here is the IP address</span>
<span class="c1"># of the machine as it is on the publicly addressable Internet,</span>
<span class="c1"># not your friends IP on their home network. This can be found by</span>
<span class="c1"># typing into Google, what&#39;s my IP, or using canihazip.com</span>
<span class="na">Endpoint</span> <span class="o">=</span> <span class="s">76.115.24.198:43022</span>
<span class="c1"># This is used to make sure the connection stays alive.</span>
<span class="c1"># It says to send a heartbeat / ping to the Endpoint every</span>
<span class="c1"># 25 seconds</span>
<span class="na">PersistentKeepalive</span> <span class="o">=</span> <span class="s">25</span>

<span class="c1"># Keep adding peers as you wish. At a minium you&#39;ll need to</span>
<span class="c1"># add their public key and their address</span>
<span class="k">[Peer]</span>
<span class="na">PublicKey</span> <span class="o">=</span> <span class="s">3StsslOTQlqMnd42UaKi9FdNu9GSTLi1WCaqwg8lkhc=</span>
<span class="na">AllowedIPs</span> <span class="o">=</span> <span class="s">192.168.4.3/32</span>
</code></pre></div><p>If we wanted to setup a network where all machines would have
192.168.4.XXX addresses, we could do it as follows.</p>
<p>First, copy the example config file into a file named <code>wg.conf</code>.</p>
<p>You'll want to generate a new private key and add it to the file.</p>
<pre><code class="language-console" data-lang="console">$ sed -i &quot;s#REPLACE_WITH_PRIVATE_KEY#$(wg genkey)#&quot; wg.conf
</code></pre><p>You need to get your public key from your private key.
The following command parses the private key out of the
config file and generates the corresponding public key.</p>
<pre><code class="language-console" data-lang="console">$ grep 'PrivateKey = ' wg.conf | tail -n 1 | sed -e 's/.* = //g' | wg pubkey
rR7O5IvIq16RpntAqZCNmTd42nsI6Mq5139XMYwZ5hQ=
</code></pre><p>The output of this command is the public key which will
be used in one of the <code>[Peer]</code> sections in the config of
the other machines in your new wireguard network. It will
change whenever you regenerate the private key and replace
it in the config file.</p>
<p>You should communicate with the other people you're trying
to set up your new wireguard network with to make sure you
all choose a differnet IP address for the line that has
<code>Address = </code>. On Windows you'll need to uncomment that line.
In the <a href="#using-it">Using It</a> secion there will be a <code>setup.sh</code>
script, On Linux the script will parse the comment and use it
as your IP address within the wireguard network, do not
uncomment that line on Linux.</p>
<p>You can parse your config file to get your choosen address
using the following command.</p>
<pre><code class="language-console" data-lang="console">$ cat &quot;${conf}&quot;| grep 'Address = ' | sed -e 's/.* = //g' -e 's/\/24//g'
192.168.4.4
</code></pre><p>In this case, our machine will appear in the config file
of the other machines as follows</p>
<div class="highlight"><pre class="chroma"><code class="language-ini" data-lang="ini"><span class="k">[Peer]</span>
<span class="na">PublicKey</span> <span class="o">=</span> <span class="s">rR7O5IvIq16RpntAqZCNmTd42nsI6Mq5139XMYwZ5hQ=</span>
<span class="na">AllowedIPs</span> <span class="o">=</span> <span class="s">192.168.4.4/32</span>
</code></pre></div><p>If you have the <code>ListenPort</code> exposed to the public internet,
via port forwarding or via firewall rules (or both). Then the
peer section for your machine in the config files of the other
people in your netowrk will include the <code>Endpoint</code> and optionally
the <code>PersistentKeepalive</code> properties.</p>
<p>You can find your IP by running</p>
<pre><code class="language-console" data-lang="console">$ curl -s -w '\n' https://canihazip.com/s
24.21.101.158
</code></pre><p>The corresponding <code>[Peer]</code> section in other peoples configs
would then be the following.</p>
<div class="highlight"><pre class="chroma"><code class="language-ini" data-lang="ini"><span class="k">[Peer]</span>
<span class="na">PublicKey</span> <span class="o">=</span> <span class="s">rR7O5IvIq16RpntAqZCNmTd42nsI6Mq5139XMYwZ5hQ=</span>
<span class="na">AllowedIPs</span> <span class="o">=</span> <span class="s">192.168.4.4/32</span>
<span class="na">Endpoint</span> <span class="o">=</span> <span class="s">24.21.101.158:60200</span>
<span class="na">PersistentKeepalive</span> <span class="o">=</span> <span class="s">25</span>
</code></pre></div><h2 id="using-it">Using It</h2>
<p>If you're using wireguard-go you'll want to run it in a seperate
terminal before running the <code>setup.sh</code> script. This command tells
wireguard-go to create a new wireguard interface called wg0.</p>
<pre><code class="language-console" data-lang="console">$ wireguard-go -f wg0
</code></pre><p>If you're using wireguard-go you'll want to run this export
command in the same terminal you're going to run <code>setup.sh</code></p>
<pre><code class="language-console" data-lang="console">$ export WGGO=1
</code></pre><p>Here is the script you can name <code>setup.sh</code> to use to setup a
simple wireguard network.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/usr/bin/env bash
</span><span class="cp"></span><span class="c1"># Usage: sudo bash setup.sh wg.conf</span>
<span class="nb">set</span> -xe

<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;x</span><span class="nv">$UID</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;x0&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
  <span class="nb">echo</span> <span class="s2">&#34;You must be root to run this.&#34;</span>
  <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="c1"># Check that the first argument is a file</span>
<span class="k">if</span> <span class="o">[</span> -f <span class="s2">&#34;</span><span class="si">${</span><span class="nv">1</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
  <span class="c1"># Set the conf variable to the first argument</span>
  <span class="nv">conf</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">1</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="k">else</span>
  <span class="c1"># If it isn&#39;t a file then complain</span>
  <span class="nb">echo</span> <span class="s2">&#34;Usage: sudo bash </span><span class="nv">$0</span><span class="s2"> wg.conf&#34;</span>
  <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="c1"># If you are using wireguard-go</span>
<span class="c1"># export WGGO=1</span>
<span class="c1"># before running this. You&#39;ll have to create the</span>
<span class="c1"># interface a different way described later</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;x</span><span class="si">${</span><span class="nv">WGGO</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">==</span> <span class="s2">&#34;x&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
  <span class="c1"># Remove existing interface if it exists</span>
  ip link del dev wg0 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
  <span class="c1"># Create a new wireguard interface</span>
  ip link add dev wg0 <span class="nb">type</span> wireguard
<span class="k">fi</span>

<span class="c1"># Parse out our IP from the config file</span>
<span class="nv">our_ip</span><span class="o">=</span><span class="k">$(</span>cat <span class="s2">&#34;</span><span class="si">${</span><span class="nv">conf</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">|</span> grep <span class="s1">&#39;Address = &#39;</span> <span class="p">|</span> sed -e <span class="s1">&#39;s/.* = //g&#39;</span> -e <span class="s1">&#39;s/\/24//g&#39;</span><span class="k">)</span>

<span class="c1"># Tell Linux that our IP for the wireguard interface is the</span>
<span class="c1"># one we paresed out from the Address line in the config file</span>
ip address add <span class="s2">&#34;</span><span class="nv">$our_ip</span><span class="s2">&#34;</span>/24 dev wg0

<span class="c1"># Grab a list of our peers IPs by parsing every line</span>
<span class="c1"># with AllowedIPs in the config file</span>
<span class="nv">peers</span><span class="o">=</span><span class="k">$(</span>cat <span class="s2">&#34;</span><span class="si">${</span><span class="nv">conf</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">|</span> grep AllowedIPs <span class="p">|</span> sed -e <span class="s1">&#39;s/.* = //g&#39;</span> -e <span class="s1">&#39;s/\/32//g&#39;</span><span class="k">)</span>

<span class="k">for</span> addr in <span class="si">${</span><span class="nv">peers</span><span class="si">}</span><span class="p">;</span> <span class="k">do</span>
  <span class="c1"># Tell Linux that it can find our peers using the</span>
  <span class="c1"># interface we added</span>
  ip address add dev wg0 <span class="s2">&#34;</span><span class="si">${</span><span class="nv">our_ip</span><span class="si">}</span><span class="s2">&#34;</span> peer <span class="s2">&#34;</span><span class="si">${</span><span class="nv">addr</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="k">done</span>

<span class="c1"># Tell wireguard to use our config file</span>
wg setconf wg0 <span class="s2">&#34;</span><span class="si">${</span><span class="nv">conf</span><span class="si">}</span><span class="s2">&#34;</span>

<span class="c1"># Turn on the interface</span>
ip link <span class="nb">set</span> up dev wg0

<span class="c1"># Show the configured interface</span>
ip addr show wg0
</code></pre></div><p>Make sure your config files are all correct, and then run
the script as root. The following example of running the
script includes sample output.</p>
<pre><code class="language-console" data-lang="console">$ sudo bash setup.sh wg.conf
+ '[' x0 '!=' x0 ']'
+ '[' -f wg.conf ']'
+ conf=wg.conf
+ '[' x == x ']'
+ ip link del dev wg0
+ ip link add dev wg0 type wireguard
++ cat wg.conf
++ sed -e 's/.* = //g' -e 's/\/24//g'
++ grep 'Address = '
+ our_ip=192.168.4.4
+ ip address add 192.168.4.4/24 dev wg0
++ cat wg.conf
++ sed -e 's/.* = //g' -e 's/\/32//g'
++ grep AllowedIPs
+ peers='192.168.4.115
192.168.4.3'
+ for addr in ${peers}
+ ip address add dev wg0 192.168.4.4 peer 192.168.4.115
+ for addr in ${peers}
+ ip address add dev wg0 192.168.4.4 peer 192.168.4.3
+ wg setconf wg0 wg.conf
+ ip link set up dev wg0
+ ip addr show wg0
25: wg0: &lt;POINTOPOINT,NOARP,UP,LOWER_UP&gt; mtu 1420 qdisc noqueue state UNKNOWN group default qlen 1000
    link/none
    inet 192.168.4.4/24 scope global wg0
       valid_lft forever preferred_lft forever
    inet 192.168.4.4 peer 192.168.4.115/32 scope global wg0
       valid_lft forever preferred_lft forever
    inet 192.168.4.4 peer 192.168.4.3/32 scope global wg0
       valid_lft forever preferred_lft forever
</code></pre><p>On Windows, you'll just save the config file and click Activate.</p>
<p>Once everyone has run the script or activated the config (for
Windows). Then you can try pinging the other hosts.</p>
<blockquote>
<p>You may not be able to ping some Windows machines. But they
will be able to ping you. So try the reverse when it's not
working.</p>
</blockquote>
<pre><code class="language-console" data-lang="console">$ ping 192.168.4.3
PING 192.168.4.3 (192.168.4.3): 56 data bytes
64 bytes from 192.168.4.3: icmp_seq=0 ttl=128 time=3.197 ms
64 bytes from 192.168.4.3: icmp_seq=1 ttl=128 time=3.617 ms
64 bytes from 192.168.4.3: icmp_seq=2 ttl=128 time=37.290 ms
64 bytes from 192.168.4.3: icmp_seq=3 ttl=128 time=3.504 ms
64 bytes from 192.168.4.3: icmp_seq=4 ttl=128 time=3.626 ms
64 bytes from 192.168.4.3: icmp_seq=5 ttl=128 time=37.651 ms
64 bytes from 192.168.4.3: icmp_seq=6 ttl=128 time=3.461 ms
^C--- 192.168.4.3 ping statistics ---
7 packets transmitted, 7 packets received, 0% packet loss
round-trip min/avg/max/stddev = 3.197/13.192/37.651/15.356 ms
</code></pre><h2 id="gotchas">Gotchas</h2>
<ul>
<li>
<p>If you see <code>ping: sending packet: Destination address required</code>.
It's likely that everyone need to check their configs to make
sure that everyone elses public keys are correct.</p>
</li>
<li>
<p>The Windows client takes an <code>Address</code> parameter that's used as the
IP address for the machine running that config. You'll need to
uncomment it.</p>
</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li>
<p><a href="https://www.wireguard.com/quickstart/">https://www.wireguard.com/quickstart/</a></p>
</li>
<li>
<p><a href="https://blog.jessfraz.com/post/installing-and-using-wireguard/">https://blog.jessfraz.com/post/installing-and-using-wireguard/</a></p>
<ul>
<li>Example of using the demo server</li>
</ul>
</li>
<li>
<p>Scripts that run the wireguard demo server</p>
<ul>
<li><a href="https://git.zx2c4.com/wireguard-tools/tree/contrib/ncat-client-server">https://git.zx2c4.com/wireguard-tools/tree/contrib/ncat-client-server</a></li>
</ul>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#IPv4_CIDR_blocks">https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#IPv4_CIDR_blocks</a></p>
<ul>
<li>The reason we do <code>/32</code> behind all the IPs of our peers is because
it means there is only 1 address in that block, that one address
is the address of our peer (the one preceding the <code>/</code>)</li>
</ul>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Private_network#Private_IPv4_addresses">https://en.wikipedia.org/wiki/Private_network#Private_IPv4_addresses</a></p>
<ul>
<li>If you have more than 255 peers you want to connect then you'll
want to change the <code>/24</code> to something appropriate. You'll have to
read this and the previous link to figure out what you should use.</li>
</ul>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Binary Downloads</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/binary-downloads/</id>
    <updated>2020-07-24T05:00:00Z</updated>
    <published>2020-07-24T05:00:00Z</published>
    <content type="html"><![CDATA[<h2 id="choosing-the-right-download">Choosing the right download</h2>
<p>So you went to download a file and you were presented with a list of options
similar to the following</p>
<p><img src="/images/binary-downloads.png" alt="list-of-binary-downloads"></p>
<p>You know you're on Linux. But which one of these Linux downloads is right for
you?</p>
<p>Run the <code>uname</code> tool to help you find out</p>
<pre><code class="language-console" data-lang="console">$ uname -a
x86_64
</code></pre><ul>
<li><code>m</code> means tell us the hardware type</li>
</ul>
<p>If you see <code>x86_64</code> that means you want the download that says <code>amd64</code>.</p>
<h2 id="installing-it">Installing it</h2>
<p>When you're presented with a tarball (<code>.tar.*</code>) you'll want to download it and
untar it using either your browser, <code>wget</code>, <code>curl</code> or whatever you want.</p>
<p>Be careful when you extract the tarball! People usually leave all the files in
the top level directory and when you extract it all the sudden you'll have files
all over the place!</p>
<p>I recommend creating a <em>temporary</em> directory first and changing your directory
into it. We can do this all at once with the following command</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> <span class="k">$(</span>mktemp -d<span class="k">)</span>
</code></pre></div><ul>
<li>
<p><code>cd</code> is change directory</p>
</li>
<li>
<p><code>mktemp</code> is a utility for creating temporary files and directories.
It will output the name, which we capture and use as the place we want to
change our current working directory to using the <code>$(  )</code> operator.</p>
<ul>
<li><code>-d</code> tells it to make a directory</li>
</ul>
</li>
</ul>
<p>Here's an example of downloading Hugo which is shown in the screenshot above.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">curl -LO https://github.com/gohugoio/hugo/releases/download/v0.74.3/hugo_0.74.3_Linux-64bit.tar.gz
</code></pre></div><ul>
<li>
<p><code>L</code> means follow any redirects, you'll usually want this, especially with
GitHub since it likes to redirect</p>
</li>
<li>
<p><code>O</code> means save the file with the same name as it has in the URL</p>
</li>
</ul>
<p>We then extract the downloaded file</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tar -xvz hugo_0.74.3_Linux-64bit.tar.gz
</code></pre></div><ul>
<li>
<p><code>x</code> means extract</p>
</li>
<li>
<p><code>v</code> means be verbose, print all extracted files</p>
</li>
<li>
<p><code>z</code> means the file will be <code>.gz</code> compressed, and we'll need to decompress it
using the gzip decompression algorithm. If you run into other file types,
do a search to figure out what to replace this with.</p>
</li>
</ul>
<p>We should have extracted 3 files.</p>
<p>You now want to put the binary, the command line program you want to run, in one
of the directories in the <code>PATH</code> environment variable.</p>
<p>You can run</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="nv">$PATH</span>
</code></pre></div><p>To get a <code>:</code> separated list of directories you can move the <code>hugo</code> file to so
that you'll be able to use it from anywhere.</p>
<p>We'll move it into the <code>/usr/bin</code> directory, a common place for executable files
to live.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mv hugo /usr/bin/
</code></pre></div><p>Now you can return to where you we're before you created the temporary directory
by running</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> -
</code></pre></div><p>We can now run hugo!</p>
<pre><code class="language-console" data-lang="console">$ hugo version
Hugo Static Site Generator v0.74.3-DA0437B4 linux/amd64 BuildDate: 2020-07-23T16:22:34Z
</code></pre>]]></content>
  </entry>
  <entry>
    <title>SSH Tricks</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/ssh-tricks/</id>
    <updated>2020-07-24T05:00:00Z</updated>
    <published>2020-07-24T05:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="reverse-port-forwarding">Reverse Port Forwarding</h1>
<p>Want to see what a port that is only listening on 127.0.0.1 on example.com is
saying?</p>
<pre><code>ssh -nNT -L 9000:127.0.0.1:8080 user@example.com
</code></pre><p>Now you can go to http://localhost:9000/ and you will see it</p>
<p>And if you want the machine you're on to listen on 0.0.0.0 then</p>
<pre><code>ssh -nNT -L '*:9000:127.0.0.1:8080' user@example.com
</code></pre><blockquote>
<p>The <code>'</code> here are important! Or else your shell will replace <code>*</code> with every
file in your current directory</p>
</blockquote>]]></content>
  </entry>
  <entry>
    <title>Python Pagination</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/python-pagination/</id>
    <updated>2020-07-24T04:42:34Z</updated>
    <published>2020-07-24T04:42:34Z</published>
    <content type="html"><![CDATA[<p>This is an example of how you might uses the <code>requests</code> HTTP Python library to
create a client that knows how to read all the pages from an HTTP API and yield
each result within a page.</p>
<p>We also use the <code>httptest</code> library to create a test server.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">unittest</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">urllib.parse</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">NamedTuple</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">List</span>

<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">httptest</span>


<span class="k">class</span> <span class="nc">TestSearchPagesHTTPHandler</span><span class="p">(</span><span class="n">httptest</span><span class="o">.</span><span class="n">Handler</span><span class="p">):</span>

    <span class="n">TOTAL</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1237</span>
    <span class="n">PER_PAGE</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">25</span>
    <span class="n">RESULTS</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">TOTAL</span><span class="p">)]</span>

    <span class="k">def</span> <span class="nf">do_GET</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">params</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">urllib</span><span class="o">.</span><span class="n">parse</span><span class="o">.</span><span class="n">parse_qsl</span><span class="p">(</span><span class="n">urllib</span><span class="o">.</span><span class="n">parse</span><span class="o">.</span><span class="n">urlparse</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">query</span><span class="p">))</span>
        <span class="n">i</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;page&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">send_response</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">send_header</span><span class="p">(</span><span class="s2">&#34;Content-type&#34;</span><span class="p">,</span> <span class="s2">&#34;application/json&#34;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">end_headers</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">wfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span>
            <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span>
                <span class="p">{</span>
                    <span class="s2">&#34;queryInfo&#34;</span><span class="p">:</span> <span class="p">{</span>
                        <span class="s2">&#34;resultsFound&#34;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">TOTAL</span><span class="p">,</span>
                        <span class="s2">&#34;resultsPerPage&#34;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">PER_PAGE</span><span class="p">,</span>
                        <span class="s2">&#34;page&#34;</span><span class="p">:</span> <span class="n">i</span><span class="p">,</span>
                        <span class="s2">&#34;pageSize&#34;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">PER_PAGE</span><span class="p">,</span>
                        <span class="s2">&#34;nextPage&#34;</span><span class="p">:</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
                        <span class="s2">&#34;lastPage&#34;</span><span class="p">:</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">TOTAL</span> <span class="o">/</span> <span class="bp">self</span><span class="o">.</span><span class="n">PER_PAGE</span><span class="p">),</span>
                    <span class="p">},</span>
                    <span class="s2">&#34;results&#34;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">RESULTS</span><span class="p">[</span>
                        <span class="p">((</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">PER_PAGE</span><span class="p">)</span> <span class="p">:</span> <span class="p">((</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">PER_PAGE</span><span class="p">)</span>
                        <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">PER_PAGE</span>
                    <span class="p">],</span>
                <span class="p">}</span>
            <span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">()</span>
        <span class="p">)</span>


<span class="k">class</span> <span class="nc">ClientConfig</span><span class="p">(</span><span class="n">NamedTuple</span><span class="p">):</span>
    <span class="n">url</span><span class="p">:</span> <span class="nb">str</span>


<span class="k">class</span> <span class="nc">Client</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">tuple</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="n">config</span>
        <span class="c1"># Requests session</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">session</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="fm">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">session</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="fm">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">_exc_type</span><span class="p">,</span> <span class="n">_exc_value</span><span class="p">,</span> <span class="n">_traceback</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">session</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">page_size</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">25</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">lastPage</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">while</span> <span class="n">lastPage</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">lastPage</span><span class="p">:</span>
            <span class="n">params</span> <span class="o">=</span> <span class="p">(</span>
                <span class="p">(</span><span class="s2">&#34;sortOrder&#34;</span><span class="p">,</span> <span class="s2">&#34;name_asc&#34;</span><span class="p">),</span>
                <span class="p">(</span><span class="s2">&#34;page&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)),</span>
                <span class="p">(</span><span class="s2">&#34;pageSize&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">page_size</span><span class="p">)),</span>
                <span class="p">(</span><span class="s2">&#34;searchQuery&#34;</span><span class="p">,</span> <span class="n">query</span><span class="p">),</span>
            <span class="p">)</span>
            <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;{self.config.url}/search&#34;</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="n">params</span><span class="p">)</span>
            <span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>
            <span class="n">body</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
            <span class="n">lastPage</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s2">&#34;queryInfo&#34;</span><span class="p">][</span><span class="s2">&#34;lastPage&#34;</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">body</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">]:</span>
                <span class="k">yield</span> <span class="n">result</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>


<span class="k">class</span> <span class="nc">TestClient</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="nd">@httptest.Server</span><span class="p">(</span><span class="n">TestSearchPagesHTTPHandler</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">test_search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ts</span><span class="o">=</span><span class="n">httptest</span><span class="o">.</span><span class="n">NoServer</span><span class="p">()):</span>
        <span class="k">with</span> <span class="n">Client</span><span class="p">(</span><span class="n">ClientConfig</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">ts</span><span class="o">.</span><span class="n">url</span><span class="p">()))</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
            <span class="n">results</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&#34;test&#34;</span><span class="p">))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">results</span><span class="p">),</span> <span class="n">TestSearchPagesHTTPHandler</span><span class="o">.</span><span class="n">TOTAL</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</code></pre></div>]]></content>
  </entry>
  <entry>
    <title>Free Resources</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/free-resources/</id>
    <updated>2020-07-18T12:15:29Z</updated>
    <published>2020-07-18T12:15:29Z</published>
    <content type="html"><![CDATA[<h1 id="free-resources">Free Resources</h1>
<p>Places you can find things for free to use in projects or anything.</p>
<p>Whenever you find something you need to make sure you say where you got it from,
or attribute in whatever way the license for whatever you found said.</p>
<p>If you find something that's Public Domain, then you don't <em>have</em> to say where
you got it.</p>
<h2 id="images">Images</h2>
<ul>
<li><a href="https://free-images.com/">https://free-images.com/</a></li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Time Saving Tricks and Hacks</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/tricks/</id>
    <updated>2020-07-07T19:00:00Z</updated>
    <published>2020-07-07T19:00:00Z</published>
    <content type="html"><![CDATA[<h2 id="download-file-with-python-from-command-line-with-progress">Download file with Python from command line with progress</h2>
<pre><code class="language-console" data-lang="console">$ python3 -c 'import sys, functools, urllib.request; print(urllib.request.urlretrieve(sys.argv[-1], reporthook=lambda n, c, t: print(f&quot;{round(((n*c)/t) * 100, 2)}%&quot;, end=&quot;\r&quot;, file=sys.stderr))[0])' https://storage.googleapis.com/laurencemoroney-blog.appspot.com/rps.zip
</code></pre><p><a href="https://asciinema.org/a/357044"><img src="https://asciinema.org/a/357044.svg" alt="asciicast"></a></p>
<h2 id="display-only-blocks-of-text-with-certain-text-in-them">Display only blocks of text with certain text in them</h2>
<p>Use grep to displays blocks of text. Only display blocks with certain text
inside them.</p>
<pre><code class="language-console" data-lang="console">$ git grep -A 25 -E 'dffml train|dffml accuracy|dffml predict' | python -c 'import sys; print(&quot;--&quot;.join([i for i in sys.stdin.read().split(&quot;--&quot;) if not &quot;model-directory&quot; in i]).strip())'
</code></pre><h2 id="display-a-file-as-plain-text-in-a-browser">Display a file as plain text in a browser</h2>
<pre><code class="language-console" data-lang="console">$ (echo -e 'HTTP/1.0 200 OK\n' &amp;&amp; cat myfile.txt) | nc -lp 8080
</code></pre>]]></content>
  </entry>
  <entry>
    <title>Personal Development Environment</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/dev-environment/</id>
    <updated>2020-06-25T00:00:00Z</updated>
    <published>2020-06-25T00:00:00Z</published>
    <content type="html"><![CDATA[<p><img src="/images/tmux-example.png" alt="tmux-example"></p>
<h2 id="tools">Tools</h2>
<p>Here's a list of things I need to to and the tools I use to do it</p>
<ul>
<li>Development Environment
<ul>
<li>Editor
<ul>
<li><a href="https://www.vim.org/">vim</a>
<ul>
<li><a href="https://vim-adventures.com/">Learn VIM</a></li>
</ul>
</li>
</ul>
</li>
<li>Terminal Multiplexer
<ul>
<li>Let's you turn a single shell session into a bunch of shells, you can put
them side by side, have tabs, label them, etc.</li>
<li><a href="https://github.com/tmux/tmux/wiki">tmux</a>
<ul>
<li><a href="https://gist.github.com/MohamedAlaa/2961058">Cheatsheet</a></li>
</ul>
</li>
</ul>
</li>
<li>Testing
<ul>
<li><a href="https://nodemon.io/">nodemon</a>
<ul>
<li>This will change your life. Its a command line utility that will re-run
a command when files with certain extentions change. You can use it to
re-compile (if applicable) and re-test whatever your working on every
time you save a file! This will also introduce you to a massive reward
feedback loop like none other. Have fun.</li>
<li><code>nodemon -e py --exec 'clear; python script.py; test 1'</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Chat
<ul>
<li>IRC
<ul>
<li><a href="https://weechat.org/">weechat</a>
<ul>
<li><a href="https://weechat.org/files/doc/stable/weechat_quickstart.en.html">Quickstart</a></li>
</ul>
</li>
</ul>
</li>
<li>Web based
<ul>
<li><a href="">Gitter</a>
<ul>
<li>Good for GitHub communities</li>
</ul>
</li>
<li><a href="https://discord.com/">discord</a>
<ul>
<li>Has peer to peer (webrtc based) video and voice chat</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Documentation
<ul>
<li>Videos and Gifs
<ul>
<li><a href="https://obsproject.com">Open Broadcaster Software</a>
<ul>
<li>I use this to record my screen, it's cross platform and open source</li>
</ul>
</li>
<li><a href="https://ffmpeg.org/">ffmpeg</a>
<ul>
<li>I use this to convert videos I've recorded into gifs to use in README's
and documenation.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Meetings
<ul>
<li><a href="https://meet.google.com">Google Meet</a></li>
</ul>
</li>
<li>Email
<ul>
<li><a href="https://weechat.org/">mutt</a>
<ul>
<li><a href="https://weechat.org/files/doc/stable/weechat_quickstart.en.html">Quickstart</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="dotfiles">dotfiles</h2>
<p>Dotfiles is a term for configuration files. The name comes from their usually
being prefixed with a <code>.</code>. This is because on UNIX operating systems, files
prefixed with a <code>.</code> are <em>hidden</em>.</p>
<p>Here are mine: <a href="http://github.com/pdxjohnny/dotfiles">http://github.com/pdxjohnny/dotfiles</a></p>
<h2 id="reasoning">Reasoning</h2>
<p>I forced myself to get used to a primarily terminal based development
environment because I constantly find myself on systems where I have either only
ssh or serial access.</p>
<p>Let me give you some scenarios where this might happen to you (and therefore its
nice to already be used to a terminal based workflow).</p>
<ul>
<li>You run Linux, your desktop crashed or froze
<ul>
<li>Press Ctrl-Alt-[F1 through F12] and you'll be presented with a terminal!</li>
<li>You're on a deadline (because when else would your desktop crash or freeze)
or your not sure what will happen / you will loose if you reboot the
machine.</li>
<li>No worries! Just <code>tmux attach</code> and you're right back where you were! Commit
your work, push it and reboot without worry.</li>
</ul>
</li>
<li>The production server broke
<ul>
<li>You're probably only going to have <code>ssh</code> access to this thing. You going to
want to read the logs and be able to poke around the file system with your
editor of choice (mine is <code>vim</code>) and restart stuff to see what's wrong.
(Chances are the server won't have <code>tmux</code>, but it might have
<a href="https://linuxize.com/post/how-to-use-linux-screen/"><code>screen</code></a> which is
similar so you'll be familiar with the concept).</li>
</ul>
</li>
<li>You started a VM from the command line using QEMU (likely with
<code>-nographic -append &quot;console=ttyS0&quot;</code>) so you have a terminal into the guest
Linux machine but it's not a full ssh session, you're likely limited to 80
columns here. You'll be glad you stuck to 80 columns now that's all you can
see without whacky &quot;scrolling&quot;.</li>
</ul>
<h3 id="alt-tab">Alt-Tab</h3>
<p>The top reason why I do everything in the terminal though is Alt-Tab.</p>
<p>If you keep all your chat, email, open code repos in tabs within <code>tmux</code> then
open one browser window for all the docs, web based chats, etc. The beauty of
this is you only ever have two windows open. Which means whenever you hit
Alt-Tab you never have to guess where your going to end up! This is going to
save you insane amounts of time in the long run. Ditch the clutter. Hakuna
Matata.</p>]]></content>
  </entry>
  <entry>
    <title>Clear Containers on Arch Linux</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/clear-containers-on-arch-linux/</id>
    <updated>2017-01-18T05:06:04Z</updated>
    <published>2017-01-18T05:06:04Z</published>
    <content type="html"><![CDATA[<p>So you want the security of a virtual machine but the ease of use of docker and
containers? Well Clear Containers is the solution for you my friend. Here I am
going to show you how to install and configure the Clear Containers runtime on
your Arch Linux host.</p>
<p>I have created to packages in AUR to assit you in building the packages you
need.</p>
<h3 id="qemu-lite-package">qemu-lite package</h3>
<p><a href="https://github.com/01org/qemu-lite">qemu-lite</a> provides virtualisation for Clear Containers. It's a fork of qemu
that has a new machine type, pc-lite. Which is a traditional x86_64 machine
with a lot of things striped out. This lets them turn off a lot of things in
the Linux kernel config and thus increases the speed at which the VM (Container
in this case) is run. This also decreases time it takes the virtualised
container to start up.</p>
<p>Lets build qemu-lite, which will replace the hosts qemu package. We just need
to clone the package from the AUR, build it with makepkg, and install it with
pacman.</p>
<p>pacman will complain about qemu-arch-extra and qemu-launcher needing the
regular qemu so if you have those installed you need to remove them. They will
not work with qemu-lite.</p>
<pre><code># Download the one I built for you
wget https://github.com/pdxjohnny/pdxjohnny.github.io/releases/download/CCARCH/qemu-lite-2.7.1-1-x86_64.pkg.tar.xz
# Or build it yourself!
git clone https://aur.archlinux.org/qemu-lite.git
cd qemu-lite
makepkg -cs
# Then install
sudo pacman -U qemu-lite-2.7.1-1-x86_64.pkg.tar.xz
</code></pre><h3 id="cc-oci-runtime-package">cc-oci-runtime package</h3>
<p>The <a href="https://github.com/01org/cc-oci-runtime">Clear Containers runtime</a> is an alternative to runc. You can have some
containers running runc and some running cor (Clear Containers runtime), or all
one or the other. It provides the management of qemu-lite so you can use these
VMs as if they were containers. Basically its where the magic happens.</p>
<pre><code># Download the one I built for you
wget https://github.com/pdxjohnny/pdxjohnny.github.io/releases/download/CCARCH/cc-oci-runtime-2.1.0-1-x86_64.pkg.tar.xz
# Or build it yourself!
git clone https://aur.archlinux.org/cc-oci-runtime.git
cd qemu-lite
makepkg -cs
# Then install
sudo pacman -U cc-oci-runtime-2.1.0-1-x86_64.pkg.tar.xz
</code></pre><h3 id="configuration">Configuration</h3>
<p>Now we need to change how the docker deamon is run so that it knows about the
runtime he have just installed.</p>]]></content>
  </entry>
  <entry>
    <title>3 Resistor Bias Circuit with NMOS Transistor</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/3-resistor-bias-nmos/</id>
    <updated>2016-11-11T20:22:04Z</updated>
    <published>2016-11-11T20:22:04Z</published>
    <content type="html"><![CDATA[<h2 id="circuit">Circuit</h2>
<p><img src="/images/3-resistor-bias-circuit.png" alt="3-resistor-bias-circuit"></p>
<h2 id="steps">Steps</h2>
<ul>
<li>Pick a Vdd</li>
</ul>
<pre><code>9 Volts
</code></pre><ul>
<li>Pick a transistor and Vtn for it</li>
</ul>
<pre><code>2N7002
Vtn = 1.6
</code></pre><ul>
<li>Pick and Id</li>
</ul>
<pre><code>2 mA
</code></pre><ul>
<li>Find RL for Vdd and Id</li>
</ul>
<pre><code>RL = Vdd / Id
RL = 9 Volts / 2 mA
RL = 4.5 k Ohms
</code></pre><ul>
<li>Pick a much smaller current for R1 and R2, Ir (bias resistor current)</li>
</ul>
<pre><code>Ir = 200 uA
</code></pre><ul>
<li>Find R1 and R2 such that the voltage drop across R2 is the same as Vtn. This
is so that any input signal at all will act to turn on the transistor. Then
make R1 drop the rest of Vdd.</li>
</ul>
<pre><code>R2 = Vtn / Ir
R2 = 1.6 / 200 uA
R2 = 8 k Ohms

R2 = (Vdd - Vtn) / Ir
R2 = (9 - 1.6) / 200 uA
R2 = 7.4 / 200 uA
R2 = 37 k Ohms
</code></pre><ul>
<li>Plug in reasonable values for the rest</li>
</ul>
<p>Cin and Cout should both be much much (two orders of magnitude) less than their
respective resistors.</p>
<pre><code>Rin = 1 k Ohms
Cin = 470 nF
Cout = 470 nF
Rout = 100k
</code></pre>]]></content>
  </entry>
  <entry>
    <title>ARM workflow with qemu and arm-none-eabi</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/arm-qemu/</id>
    <updated>2016-11-09T22:57:07Z</updated>
    <published>2016-11-09T22:57:07Z</published>
    <content type="html"><![CDATA[<p>This should get you up and running writing ARM assembly without hardware.</p>
<p>Clone this the repo for this turtorial.</p>
<pre><code>git clone https://gist.github.com/pdxjohnny/3de9a9bdd38cacf3ea394207762f1002 arm-qemu
</code></pre><h2 id="dependencies">Dependencies</h2>
<p>The first step is to install the necessary packages. These are the
arm-none-eabi tool chain and qemu with arm support.</p>
<h4 id="arch-linux">Arch Linux</h4>
<pre><code>sudo pacman -S arm-none-eabi-gcc arm-none-eabi-binutils arm-none-eabi-gdb \
  arm-none-eabi-newlib qemu qemu-arch-extra
</code></pre><h4 id="ubuntu">Ubuntu</h4>
<pre><code>sudo apt -y install make qemu-system-arm \
    gcc-arm-none-eabi binutils-arm-none-eabi gdb-arm-none-eabi \
    libstdc++-arm-none-eabi-newlib libnewlib-arm-none-eabi
</code></pre><h2 id="gdb">GDB</h2>
<p>In <code>.gdbinit</code> we have placed commands which gdb will run on startup. But to
make this work the <code>.gdbinit</code> file in our home directory needs to say its ok
for gdb to load this <code>.gdbinit</code> file. To do that we just add the directory to
the auto-load safe-path.</p>
<pre><code>echo &quot;set auto-load safe-path $PWD&quot; &gt;&gt; ~/.gdbinit
</code></pre><h2 id="building">Building</h2>
<p>The Makefile should have plenty of comments to help you understand what is
being done in it. It takes all the <code>.s</code> assembly files in the current directory
and compiles them into object files. Then it runs the linker to create the ELF
binary. All of this is done with arm-none-eabi-gcc rather than your regular
gcc for host programs.</p>
<pre><code>make
</code></pre><p>Will rebuild all the modified <code>.s</code> files into their object file forms and
relink to the binary. Run <code>make clean all</code> if you are having really weird
errors. That usually fixes things.</p>
<h2 id="running">Running</h2>
<p>To run you can do <code>qemu-arm ./main</code>. But hey why not put it in the Makefile
right.</p>
<pre><code>make all qemu
</code></pre><p>Will rebuild any changed files and run the created binary in qemu.</p>
<h2 id="debugging">Debugging</h2>
<p>Oh you ran the program and everything exploded? Time to debug.</p>
<pre><code>make all gdb
</code></pre><p>Will rebuild all your source files and start the program in qemu with it as a
gdb target on port 1234, so make sure nothing else is using that port or change
it in the <code>.gdbinit</code> file and <code>Makefile</code>.</p>
<h2 id="help-nothing-works">Help nothing works</h2>
<p>Comment on the gist with the problem so we can figure it out and everyone else
can see the solution.</p>]]></content>
  </entry>
  <entry>
    <title>Trinity fuzzer on Android (on Intel)</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/trinity-fuzzer-android/</id>
    <updated>2016-10-17T19:51:22Z</updated>
    <published>2016-10-17T19:51:22Z</published>
    <content type="html"><![CDATA[<h2 id="step-1---clone-trinity">Step 1 - Clone trinity</h2>
<p>Grab the source for trinity. We need to make some minor modifications.</p>
<blockquote>
<p>At the time of writing this the latest commit on master was
3a0e33d1db3214503316840ecfb90075d60ab3be adapt instructions as necessary. The
basic idea of static linking and disabling of feature's you don't need is
still the same.</p>
</blockquote>
<pre><code>git clone https://github.com/kernelslacker/trinity
cd trinity
./configure
</code></pre><h2 id="step-2---32-bit-and-static-compilation">Step 2 - 32 bit and static compilation</h2>
<p>Edit the make file and add <code>-m32</code> to any line containing <code>CFLAGS</code> and add
<code>-static</code> to any line containing <code>LDFLAGS</code>. Just one line not all of them that
say LD/CFLAGS. For example.</p>
<pre><code>CFLAGS += -Wall -Wextra -g -O2 -I. -Iinclude/ -Wimplicit -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -D__linux__
</code></pre><p>Becomes</p>
<pre><code>CFLAGS += -Wall -Wextra -g -O2 -I. -Iinclude/ -Wimplicit -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -D__linux__ -m32
</code></pre><p>And</p>
<pre><code>LDFLAGS += -rdynamic
</code></pre><p>Becomes</p>
<pre><code>LDFLAGS += -rdynamic -static
</code></pre><p>Just change two lines and you're done.</p>
<h2 id="step-3---fix-syscallssendc">Step 3 - Fix syscalls/send.c</h2>
<p>I found that gcc 6.2.1 said that this is an error so it wouldn't let me
compile without this typecast. I haven't noticed anything strange by doing this
so I assume everything still works.</p>
<p>Change the line that reads</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">proto</span><span class="o">-&gt;</span><span class="n">gen_packet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">si</span><span class="o">-&gt;</span><span class="n">triplet</span><span class="p">,</span> <span class="n">ptr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rec</span><span class="o">-&gt;</span><span class="n">a3</span><span class="p">);</span>
</code></pre></div><p>To</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">proto</span><span class="o">-&gt;</span><span class="n">gen_packet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">si</span><span class="o">-&gt;</span><span class="n">triplet</span><span class="p">,</span> <span class="n">ptr</span><span class="p">,</span> <span class="p">(</span><span class="n">size_t</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">rec</span><span class="o">-&gt;</span><span class="n">a3</span><span class="p">);</span>
</code></pre></div><p>And you should now make it past that compilation error.</p>
<blockquote>
<p>syscalls/send.c:33:41: error: passing argument 3 of ‘proto-&gt;gen_packet’ from
incompatible pointer type [-Werror=incompatible-pointer-types]</p>
</blockquote>
<h2 id="step-4---edit-configh">Step 4 - Edit config.h</h2>
<p>Take out anything you don't need or can't compile from <code>config.h</code>. For instance
Android recommends building on Ubuntu 16.04 so we were on a Ubuntu 16.04.1 LTS
machine which at the time of writing is Linux 4.4ish. So we couldn't compile
<code>fds/bpf.c</code> because the kernel headers didn't contain the right version of
<code>linux/bpf.h</code> (bpf_addr was missing some members).</p>
<p>The solution is to comment out <code>USE_BPF</code> from <code>config.h</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#define USE_BPF 1
</span></code></pre></div><p>After</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// #define USE_BPF 1
</span></code></pre></div><h2 id="step-5---verify">Step 5 - Verify</h2>
<p>Before we push to the device make sure it has a chance of working. This means
that it will be 32-bit staticly linked. For the edits we just made to the
commit refernced at the top of this doc file reports the following.</p>
<pre><code>file trinity
trinity: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=e533cc2db1db19c044bdbfa566c72299df7eefc2, not stripped
</code></pre><h2 id="step-6---push-and-run">Step 6 - Push and Run</h2>
<p>Put in on the device and run from <code>/sdcard</code> folder.</p>
<pre><code>adb root
adb remount rw
adb disable-verity
adb reboot
adb push trinity /data/trinity
adb shell 'cd /sdcard &amp;&amp; /data/trinity --dangerous -V /dev/ 2&gt;&amp;1' | tee trinity-dev-1.log
</code></pre><p>Take the blue pill and profit</p>]]></content>
  </entry>
  <entry>
    <title>Fuzzing network applications with peach</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/peach-network/</id>
    <updated>2016-08-10T20:35:13Z</updated>
    <published>2016-08-10T20:35:13Z</published>
    <content type="html"><![CDATA[<p>So you want to fuzz network applications with peach eh? Well you've come to the
right place. This is a tutorial on how to get you fuzzing TCP applications,
without TLS/SSL enabled. If you want to fuzz UDP or an application which only
communicates via TLS/SSL then this is a great place for you to start, however it
will not answer all your questions. I will point you in the right direction at
the end of this post.</p>
<p>The first step in fuzzing is to understand the structure of the protocol. It
often helps to have an example of this structure. Therefore we will be
capturing the data of our target and simply playing it back. If you were to
spend more time, which you should, then you would make data models in peach
which contain specific fields rather than the blob we will be using.</p>
<p>The two most well known ways of getting network traffic are tcpdump and
wireshark. Peach can use input from a file for the data model and mutate it. We
are going to use a tiny tool I wrote to capture the conversations back and
forth rather than telling you to open tcpdump / wireshark and copy paste to a
file. If you would rather do that be my guest.</p>
<h2 id="enter-convo-capture">Enter convo-capture</h2>
<p>This saves the TCP conversation to files. Give it the port and host it needs to
be monitoring. This is especially useful for fuzzing with peach on TCP based
programs so that you don't have to go into wireshark to capture then copy paste
the data from each sequence of packets. This will take all packets and put them
in a file until the other endpoint sends data. Then it will increment the
number on the exchange and write the data to that exchanges file.</p>
<p>The binary has been built and included in the gist for your convenience.</p>
<blockquote>
<p>By no means do I condone putting binaries in git repos but I know not
everyone has the go toolchain. You need libpcap and libpthread to run it.</p>
</blockquote>
<p>Building will use sudo because it will <code>set_cap_raw</code> on convo-capture. If you
don't want to set this then you have to run convo-capture as root.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git clone https://gist.github.com/pdxjohnny/e2d1df77e81f07254da192fe1bc568a0 convo-capture
<span class="nb">cd</span> !$
./build.sh
</code></pre></div><p>Now you can move it to bin if you want or run it prepended with ./ from the
directory you built it.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo mv convo-capture /usr/bin/convo-capture
</code></pre></div><blockquote>
<p>Personally I like to put things in ~/.local/bin/ but do as you will</p>
</blockquote>
<p>We are now ready to capture packets. Keep in mind that convo-capture will not
write over files that you have previously captured if they are in the directory
you are working in. Be sure to delete files from previous captures or change to
a new directory.</p>
<p>Let's try to capture HTTP traffic using curl and python3's http.server
(SimpleHTTPServer in python2). First we need to ssh to another computer and
start an HTTP server or we can start one on our local machine. If you start one
on your machine then everywhere you see example.com replace it with localhost
and add <code>-i lo</code> to convo-capture for capturing on the loopback interface.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>pdxjohnny@pdxjohnny convo-capture<span class="o">]</span>$ ssh example.com
<span class="o">[</span>pdxjohnny@example.com ~<span class="o">]</span>$ python3 -m http.server <span class="m">4444</span>
</code></pre></div><p>Now that we have a HTTP server running lets start convo-capture.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># For localhost add -i lo</span>
<span class="c1"># convo-capture -p 4444 -ip localhost -i lo -v</span>
<span class="o">[</span>pdxjohnny@pdxjohnny convo-capture<span class="o">]</span>$ convo-capture -p <span class="m">4444</span> -ip example.com -v
Capturing TCP port <span class="m">4444</span> <span class="k">for</span> host example.com
</code></pre></div><p>Ok great we are now capturing all traffic going to example.com on port 4444 from
our computer and from example.com port 4444 back to our computer.
Now we just need to use curl to generate a request we can capture.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">curl -v http://example.com:4444/file
</code></pre></div><p>Request sent! Look back at the session running convo-capture, you should see
that the output you observed in curl has been captured (expect for the &lt; and &gt;
left of the headers, curl adds those).</p>
<pre><code class="language-log" data-lang="log">[pdxjohnny@pdxjohnny convo-capture]$ convo-capture -p 4444 -ip example.com -v
Capturing TCP port 4444 for host example.com
GET /file HTTP/1.1
Host: example.com:4444
User-Agent: curl/7.47.0
Accept: */*

HTTP/1.0 200 OK
Server: SimpleHTTP/0.6 Python/3.4.2
Date: Wed, 10 Aug 2016 16:38:42 GMT
Content-type: text/plain
Content-Length: 514
Last-Modified: Tue, 26 Jul 2016 14:43:05 GMT

Yo this is the file
</code></pre><p>Now you can ctrl-c to stop the capture. As you can see we captured the
conversation from our local machine to the remote host and the response the
remote host sent us. If you do an ls you will also see the files that were
created by this capture.</p>
<pre><code class="language-log" data-lang="log">[pdxjohnny@pdxjohnny convo-capture]$ ls -lAF
total 5752
... Aug 10 09:34 10.7.202.149-&gt;10.7.202.78-0
... Aug 10 09:34 10.7.202.78-&gt;10.7.202.149-0
... Aug 10 08:35 build.sh*
... Aug 10 09:17 convo-capture*
... Aug 10 09:33 .git/
... Aug 10 09:16 .gitignore
... Aug 10 09:15 main.go
... Aug 10 09:58 README.md
</code></pre><p>cating the files will make convo-capture's usefulness apparent.</p>
<pre><code class="language-log" data-lang="log">[pdxjohnny@pdxjohnny convo-capture]$ cat 10.7.202.149-&gt;10.7.202.78-0
GET /file HTTP/1.1
Host: example.com:4444
User-Agent: curl/7.47.0
Accept: */*

[pdxjohnny@pdxjohnny convo-capture]$ cat 10.7.202.78-&gt;10.7.202.149-0
HTTP/1.0 200 OK
Server: SimpleHTTP/0.6 Python/3.4.2
Date: Wed, 10 Aug 2016 16:38:42 GMT
Content-type: text/plain
Content-Length: 514
Last-Modified: Tue, 26 Jul 2016 14:43:05 GMT

Yo this is the file
</code></pre><p>As you can see it has assembled the packets into files based on the order they
were sent in. For me the second file, the servers reply, was two packets.
convo-capture saw the two packets in a row from the server to client and said
ok this is all part of one message I'm going to save it to a file as such. A
message is a continuous sequence of packets ended when the other side starts
sending a message. The more messages that are collected the more files you will
see after you kill convo-capture.</p>
<p>There was only one back and forth so they are both 0 in the sequence. If you
were to have ran curl twice with convo-capture running then you would see the
contents of 0 repeated in 1.</p>
<p>This is very useful for fuzzing with peach. Peach allows us to order our call
and response to the target program. For example say you want to fuzz something
like git. git is not a simple call and response. It has an exchange of call,
response, call, response for a clone. Let's walk through how you would use
convo-capture to fuzz the git protocol with peach.</p>
<h2 id="capturing-the-git-protocol">Capturing the git protocol</h2>
<p><a href="https://asciinema.org/a/7xd0u4u0vfv7n7s7gq4f0zdg2"><img src="https://asciinema.org/a/7xd0u4u0vfv7n7s7gq4f0zdg2.png" alt="asciicast"></a></p>
<blockquote>
<p>This video goes shows the how to capture the data involved in a git clone
over the git protocol. Use it as a reference if you are having trouble with
the steps below.</p>
</blockquote>
<p>Let's take a stroll on over to tmp so we don't create a bunch of useless files.
We'll make a directory there to play in.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkdir /tmp/demo
<span class="nb">cd</span> /tmp/demo
</code></pre></div><p>Make a few directories so nothing writes over each other. Then well make a git
repo and populate it with some files.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkdir clonedir capture
mkdir testrepo
<span class="nb">cd</span> testrepo
cat <span class="s">&lt;&lt; EOF &gt; README.md
</span><span class="s">This is a super cool test repo
</span><span class="s">EOF</span>
git init
git add -A
git commit -sam <span class="s1">&#39;Added README.md&#39;</span>
<span class="nb">cd</span> ..
<span class="c1"># You should now be back in /tmp/demo</span>
</code></pre></div><p>We have our testrepo, now lets create a bare copy of it to be served by <a href="https://git-scm.com/book/en/v1/Git-on-the-Server-Git-Daemon">git
daemon</a>. This requires that we make the <code>git-daemon-export-ok</code> file
as well. Then we will start the git server.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git clone --bare testrepo testrepo.git
touch testrepo.git/git-daemon-export-ok
git daemon --reuseaddr --base-path<span class="o">=</span><span class="nv">$PWD</span> <span class="nv">$PWD</span>
<span class="c1"># PWD is faster than typing /tmp/demo</span>
</code></pre></div><p>Great! The git server is up! We can look up what port it is running on, but
if perhaps we were fuzzing something we didn't know we would have to find out.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Apparently netstat is depricated, so let&#39;s use ss</span>
ss -ltnp <span class="p">|</span> grep git
</code></pre></div><p>Alright its port 9418. In another shell go to the capture directory and start
convo-capture.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /tmp/demo/capture
convo-capture -p <span class="m">9418</span> -i lo
</code></pre></div><p>Capture is running, git server is up, all that's left is to go to clonedir and
watch the magic happen.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /tmp/demo/clonedir
git clone git://localhost/testrepo.git
</code></pre></div><p>Now switch back to the shell running convo-capture and hit it will ctrl-c. You
should see four files in the capture directory. We are going to fuzz the git
client so right now we are interested in the files which go from port 9418 to
some other port.</p>
<h2 id="using-our-captured-data-to-fuzz-with-peach">Using our captured data to fuzz with peach</h2>
<p>You should usually test against the master branch or the latest version of
whatever you are fuzzing. You don't want to waste time finding something which
has already been fixed. This is why we are going to build git from source. Of
course you don't have to do this. But if you have never built something from
source it would be good practice.</p>
<p><a href="https://asciinema.org/a/82390"><img src="https://asciinema.org/a/82390.png" alt="asciicast"></a></p>
<blockquote>
<p>This video shows the peach process. You probably want to skip past the
part were we run make on git.</p>
</blockquote>
<p>Now that we know what the git server is sending to the client we could either
fuzz the server or the client. The client is easy because it exits after
cloning were as the server stays up to serve requests.</p>
<p>We are going to compile git from source so we need to download its
dependencies.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get -y install libcurl4-gnutls-dev libexpat1-dev gettext <span class="se">\
</span><span class="se"></span>  libz-dev libssl-dev <span class="se">\
</span><span class="se"></span>  <span class="o">||</span> sudo yum install curl-devel expat-devel gettext-devel <span class="se">\
</span><span class="se"></span>  openssl-devel perl-devel zlib-devel
</code></pre></div><p>Now we are going to clone git build it and install it.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkdir -p /tmp/demo/
<span class="nb">cd</span> /tmp/demo/
git clone --depth<span class="o">=</span><span class="m">1</span> https://github.com/git/git
<span class="nb">cd</span> /tmp/demo/git/
<span class="c1"># I found that the latest git doesn&#39;t cooperate unless I install it</span>
sudo make install
git --version
</code></pre></div><p>Git is installed, now lets copy our relevant captures to a testing directory.
Here we clone the repo for this post and copy the git.xml file out of it. But
you could of course make your own or modify the one here.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /tmp/demo/
mkdir gitfuzzy
<span class="nb">cd</span> gitfuzzy
cp /tmp/demo/capture/<span class="se">\:\:</span>1<span class="se">\:</span>9418-<span class="se">\&gt;</span>* ./
git clone https://gist.github.com/pdxjohnny/e2d1df77e81f07254da192fe1bc568a0 t
cp t/git.xml ./
</code></pre></div><p><code>git.xml</code></p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span class="nt">&lt;Peach&gt;</span>
    <span class="nt">&lt;DataModel</span> <span class="na">name=</span><span class="s">&#34;TheDataModel&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;Blob/&gt;</span>
    <span class="nt">&lt;/DataModel&gt;</span>
    <span class="nt">&lt;StateModel</span> <span class="na">name=</span><span class="s">&#34;TheState&#34;</span> <span class="na">initialState=</span><span class="s">&#34;Initial&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;State</span> <span class="na">name=</span><span class="s">&#34;Initial&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Action</span> <span class="na">type=</span><span class="s">&#34;accept&#34;</span><span class="nt">/&gt;</span>
            <span class="c">&lt;!-- receive bytes --&gt;</span>
            <span class="nt">&lt;Action</span> <span class="na">type=</span><span class="s">&#34;input&#34;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;DataModel</span> <span class="na">ref=</span><span class="s">&#34;TheDataModel&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/Action&gt;</span>
            <span class="c">&lt;!-- send bytes --&gt;</span>
            <span class="nt">&lt;Action</span> <span class="na">type=</span><span class="s">&#34;output&#34;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;DataModel</span> <span class="na">ref=</span><span class="s">&#34;TheDataModel&#34;</span><span class="nt">/&gt;</span>
                <span class="c">&lt;!-- Change this to be whatever port your git client was on --&gt;</span>
                <span class="nt">&lt;Data</span> <span class="na">fileName=</span><span class="s">&#34;::1:9418-&gt;::1:58226-0&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/Action&gt;</span>
            <span class="c">&lt;!-- receive bytes --&gt;</span>
            <span class="nt">&lt;Action</span> <span class="na">type=</span><span class="s">&#34;input&#34;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;DataModel</span> <span class="na">ref=</span><span class="s">&#34;TheDataModel&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/Action&gt;</span>
            <span class="c">&lt;!-- send bytes --&gt;</span>
            <span class="nt">&lt;Action</span> <span class="na">type=</span><span class="s">&#34;output&#34;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;DataModel</span> <span class="na">ref=</span><span class="s">&#34;TheDataModel&#34;</span><span class="nt">/&gt;</span>
                <span class="c">&lt;!-- Change this to be whatever port your git client was on --&gt;</span>
                <span class="nt">&lt;Data</span> <span class="na">fileName=</span><span class="s">&#34;::1:9418-&gt;::1:58226-1&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/Action&gt;</span>
        <span class="nt">&lt;/State&gt;</span>
    <span class="nt">&lt;/StateModel&gt;</span>
    <span class="nt">&lt;Agent</span> <span class="na">name=</span><span class="s">&#34;LinAgent&#34;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- Register for core file notifications. --&gt;</span>
        <span class="nt">&lt;Monitor</span> <span class="na">class=</span><span class="s">&#34;LinuxDebugger&#34;</span><span class="nt">&gt;</span>
            <span class="c">&lt;!-- This is the program we&#39;re going to run inside of the debugger --&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;Executable&#34;</span> <span class="na">value=</span><span class="s">&#34;git&#34;</span><span class="nt">/&gt;</span>
            <span class="c">&lt;!-- These are arguments to the executable we want to run --&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;Arguments&#34;</span> <span class="na">value=</span><span class="s">&#34;clone git://127.0.0.1/testrepo.git&#34;</span><span class="nt">/&gt;</span>
            <span class="c">&lt;!-- This parameter will cause the monitor to terminate the process
</span><span class="c">								 once the CPU usage reaches zero. --&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;CpuKill&#34;</span> <span class="na">value=</span><span class="s">&#34;true&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/Monitor&gt;</span>
        <span class="nt">&lt;Monitor</span> <span class="na">class=</span><span class="s">&#34;CleanupFolder&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;Folder&#34;</span> <span class="na">value=</span><span class="s">&#34;testrepo&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/Monitor&gt;</span>
    <span class="nt">&lt;/Agent&gt;</span>
    <span class="nt">&lt;Test</span> <span class="na">name=</span><span class="s">&#34;Default&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;Agent</span> <span class="na">ref=</span><span class="s">&#34;LinAgent&#34;</span> <span class="na">platform=</span><span class="s">&#34;linux&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;StateModel</span> <span class="na">ref=</span><span class="s">&#34;TheState&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;Publisher</span> <span class="na">class=</span><span class="s">&#34;TcpListener&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;Interface&#34;</span> <span class="na">value=</span><span class="s">&#34;127.0.0.1&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;Port&#34;</span> <span class="na">value=</span><span class="s">&#34;9418&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/Publisher&gt;</span>
        <span class="nt">&lt;Strategy</span> <span class="na">class=</span><span class="s">&#34;Random&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;Logger</span> <span class="na">class=</span><span class="s">&#34;Filesystem&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;Path&#34;</span> <span class="na">value=</span><span class="s">&#34;logs&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/Logger&gt;</span>
    <span class="nt">&lt;/Test&gt;</span>
<span class="nt">&lt;/Peach&gt;</span>
</code></pre></div><p>Your git client used a different port to connect to the git server when we did
the capture than mine did. When you copy the xml file you will have to change
the values as indicated with comments so that peach knows what files to use.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Change to the correct files</span>
vim git.xml
peach git.xml
</code></pre></div><p>Peach is fuzzing the git protocol now! Good job you rock!</p>]]></content>
  </entry>
</feed>
