<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
  <title>pdxjohnny&#39;s blog</title>
  <subtitle></subtitle>
  <id>https://pdxjohnny.github.io/</id>
  <author>
    <name>pdxjohnny&#39;s blog</name>
    <uri>https://pdxjohnny.github.io/</uri>
  </author>
  <icon>https://pdxjohnny.github.io/image/brand/icon-1-1.png</icon>
  <logo>https://pdxjohnny.github.io/image/brand/icon-2-1.png</logo>
  <updated>2023-11-17T02:02:50Z</updated>
  <link rel="self" type="application/atom+xml" href="https://pdxjohnny.github.io/feed.atom" hreflang="en-us"/>
  <link rel="alternate" type="text/html" href="https://pdxjohnny.github.io/" hreflang="en-us"/>
  <entry>
    <title>IETF 118</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/ietf-118/</id>
    <updated>2023-11-13T05:00:00Z</updated>
    <published>2023-11-13T05:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="2023-11-03-engineering-logs">2023-11-03 Engineering Logs</h1>
<ul>
<li><a href="https://docs.rs/activitypub_federation/latest/activitypub_federation/">https://docs.rs/activitypub_federation/latest/activitypub_federation/</a></li>
<li><a href="https://github.com/LemmyNet/lemmy/tree/main/crates/apub">https://github.com/LemmyNet/lemmy/tree/main/crates/apub</a></li>
</ul>
<h1 id="2023-11-04-engineering-logs">2023-11-04 Engineering Logs</h1>
<h2 id="2023-11-04-pdxjohnny-engineering-logs">2023-11-04 @pdxjohnny Engineering Logs</h2>
<p><a href="https://asciinema.org/a/619198"><img src="https://asciinema.org/a/619198.svg" alt="asciicast"></a></p>
<h2 id="2023-11-04-ietf-118-hackathon-day-1">2023-11-04 IETF 118 Hackathon Day 1</h2>
<ul>
<li><a href="https://datatracker.ietf.org/meeting/118/agenda">https://datatracker.ietf.org/meeting/118/agenda</a></li>
<li>SCITT table
<ul>
<li>Steve</li>
<li>Orie</li>
<li>Yogesh</li>
<li>Jon</li>
<li>Tristan</li>
<li>Cedrick</li>
<li>A.J. Stein
<ul>
<li><a href="https://github.com/aj-stein-nist/oscal-content">https://github.com/aj-stein-nist/oscal-content</a></li>
</ul>
</li>
<li>John</li>
<li>Henk Birkholz</li>
<li>Kaliya Young</li>
</ul>
</li>
<li>Snacks</li>
<li>OIDC issuer as issuer of notary</li>
<li>DID resolution discussion
<ul>
<li><code>serviceAddress</code> WASM API floated
<ul>
<li>Prep for dataflow style</li>
</ul>
</li>
</ul>
</li>
<li>Kick off
<ul>
<li><a href="https://github.com/IETF-Hackathon/ietf118-project-presentations">https://github.com/IETF-Hackathon/ietf118-project-presentations</a>
<ul>
<li><a href="https://github.com/IETF-Hackathon/ietf118-project-presentations/blob/main/.github/workflows/main.yml">https://github.com/IETF-Hackathon/ietf118-project-presentations/blob/main/.github/workflows/main.yml</a></li>
</ul>
</li>
<li>Hackdemo Happy Hour on Monday 18:30 - 19:30 Registry by 13:00 Monday. Share hackathon projects</li>
</ul>
</li>
<li>Working on PR
<ul>
<li><a href="https://github.com/scitt-community/scitt-api-emulator/pull/37">https://github.com/scitt-community/scitt-api-emulator/pull/37</a></li>
<li><a href="https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/79">https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/79</a></li>
</ul>
</li>
<li>Discussion with Steve around OIDC issuer
<ul>
<li><a href="https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/87#issuecomment-1716042275">https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/87#issuecomment-1716042275</a></li>
<li>Do we need more info than <code>did:web:token.....</code></li>
<li>Moved arch to CWT, which makes it more obvious client side
<ul>
<li>Emulator needs to be updated</li>
</ul>
</li>
<li>There's been discussion around re-writing the emulator in another language because the original Python maintainer left. However, no one has done it yet and both JA's like Python and have been contributing.</li>
</ul>
</li>
<li><a href="https://datatracker.ietf.org/doc/draft-lemmons-composite-claims/">https://datatracker.ietf.org/doc/draft-lemmons-composite-claims/</a>
<ul>
<li>Pealing the layers of the onion of bearer token with policy, never comping back to transparency service</li>
<li>Exposes claim keys, know it contains subject</li>
<li>length analysis on enveloped?
<ul>
<li>Add padding?</li>
<li>Zero knowledge fixed length, selective disclosure BBS CNRG, proof of knowledge</li>
</ul>
</li>
<li><a href="https://datatracker.ietf.org/doc/bofreq-richer-wimse/">https://datatracker.ietf.org/doc/bofreq-richer-wimse/</a>
<ul>
<li>Workload Identity in Multi System Environments (WIMSE)</li>
</ul>
</li>
</ul>
</li>
<li>No one respects DNS TTL at ISP level</li>
<li>Entry ID within claim discussion
<ul>
<li>Options
<ul>
<li>Hash of A, order or A
<ul>
<li>Chair says says he will not implement</li>
</ul>
</li>
<li>Unique ID such as UUID</li>
</ul>
</li>
<li>One option was said to be adding the entry_id to the receipt
<ul>
<li>Orie advises a consensus call to resolve on what we should do here and put in the architecture</li>
<li><a href="https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/79#issuecomment-1767445443">https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/79#issuecomment-1767445443</a></li>
</ul>
</li>
<li>Process steps, write proposal, send to list, send PR, chair may be required to run consensus call if someone requests</li>
<li>One option would be to include in receipt the entry ID and if it's ordered or not</li>
</ul>
</li>
<li>Detached Payloads
<ul>
<li>From a logical sense, they are detached. From a COSE point of view everything is attached (the COSE header we use is attached), the attached payload contains the information to discover and verify (URI, hash)</li>
</ul>
</li>
<li>A.J. mentions backdooring compiled deps as nation state attacker path of choice
<ul>
<li>John mentioned SLSA L5 in progress with TEEs or L4 hermetic with federation would help detect backdoors</li>
<li>A.J. likes <a href="https://github.com/ietf-scitt/use-cases/pull/18">https://github.com/ietf-scitt/use-cases/pull/18</a>
<ul>
<li>Trusted bot tells me how much I need to care, based on threat model</li>
</ul>
</li>
</ul>
</li>
<li>Orie explains RDF
<ul>
<li><img src="https://github.com/intel/dffml/assets/5950433/a73fb858-3074-4a6b-8588-e6fca33c55a7" alt="the-trouble-with-triples"></li>
<li>Expresses knowledge</li>
<li>Can use OWL for traversing first order logic, forward chaining</li>
<li>Prolog reasoning engine operates on information which is an expression of first order logic</li>
<li>RDF is an expression of first order logic that doesn't have one serialization</li>
<li>Triples is a concept which has many different ways of serialization which all have some disadvantage which results in us inventing new formats and replacing the old one</li>
<li>Turtle, NQuads, JSON-LD</li>
<li>Example
<ul>
<li>Subject, Predicate, Object</li>
<li>Brent, understands, CBOR (it may not be true but it's writable in RDF)</li>
<li>CBOR is-understood, by-cool-people</li>
<li>Brent, is-cool, true</li>
</ul>
</li>
<li>The issue is, if you interpret the graph, you think that Brent
<ul>
<li>Your knowledge about the world expands about you add triples</li>
<li>You learn more every time you add a new triple, at the risk of inconsistency</li>
</ul>
</li>
<li>Triples create a named graph (W3C name)</li>
<li>How do you ensure you know which Brent if there were multiple
<ul>
<li>Add scopes to get unique identifiers
<ul>
<li><a href="http://website.example/Brent">http://website.example/Brent</a>
<ul>
<li>With fragment or without fragment issue</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>What if we say definition of term under authority of URL?, use <code>url(...)</code>
<ul>
<li>url(Brent), url(understands), url(CBOR)</li>
<li>Now this issue is that you can resolve the url to a different thing every time, this is a bug says Orie, feature says rest of W3C WG, TODO find this at context issue/pr thread from a while back</li>
</ul>
</li>
<li>John: What if we combined with receipts?
<ul>
<li><a href="https://github.com/intel/dffml/blob/alice/docs/discussions/alice_engineering_comms/0243/reply_0000.md">2023-04-19 @pdxjohnny Engineering Logs</a></li>
</ul>
</li>
<li>Henk Birkholz gives example of VEX and different parties saying something is a vuln or not within different contexts, USGov says no, GreenPeace says yes.
<ul>
<li>RDFStart is equivilant to labeled property graph, let's you put nodes on the edges</li>
</ul>
</li>
<li>RATs versifiers use this.</li>
<li>Imagine we have an OSCAL component displayed by the React class, they both have the concept of a component
<ul>
<li><code>https://oscal.org/Component(Component)</code></li>
<li><code>https://react.org/Component(Component)</code></li>
</ul>
</li>
<li>We could describe registration policies using labeled property graphs (Henk Birkholz says this is v2)
<ul>
<li>We want to find the intersections of what we agree</li>
<li>Machine can find that when we put it in URI/URL format</li>
</ul>
</li>
<li>We can express any information in this format
<ul>
<li>Our question is, it it valuable to express it this way and share it</li>
</ul>
</li>
<li>Are our policy graphs equivalent?
<ul>
<li>Isomorphic</li>
<li>You you build aggregates and do graph computations on aggregates</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code class="language-mermaid" data-lang="mermaid">graph LR
    A[A Statement]
    B[B Registration Policy]
    C[C Receipt]
    D[D Artifact]

    A --&gt;|prop2,prop3| B
    B --&gt; C
    B --&gt; D
    D --&gt;|prop1,prop3| A
</code></pre><pre><code class="language-mermaid" data-lang="mermaid">graph LR
    A[Statement]
    B[Registration Policy]
    C[Receipt]

    A --&gt; B
    B --&gt; C
    C --&gt; A
</code></pre><p><img src="https://user-images.githubusercontent.com/5950433/222981558-0b50593a-c83f-4c6c-9aff-1b553403eac7.png" alt="knowledge-graphs-for-the-knowledge-god"></p>
<ul>
<li>What registration policy was evaluated when the claim became a receipt
<ul>
<li>We agree this is a requirement</li>
<li>Jon and John agree we should put this an ID of the relevant policy in the receipt</li>
<li>In v1 we don't have to agree what the policy ID points to</li>
<li>In v2 we might want to agree on a recommended format for the policy pointed to</li>
</ul>
</li>
<li><a href="https://internetidentityworkshop.com/past-workshops/">https://internetidentityworkshop.com/past-workshops/</a>
<ul>
<li>Kaliya started IIW</li>
<li>Topics include Supply Chain Security!</li>
<li><a href="https://github.com/trustoverip/tswg-trust-registry-tf/tree/main/v2#high-level">https://github.com/trustoverip/tswg-trust-registry-tf/tree/main/v2#high-level</a>
<ul>
<li>
<blockquote>
<p><img src="https://github.com/intel/dffml/assets/5950433/6b421096-5201-42e9-98f8-c2208fe2077c" alt="image"></p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/usnistgov/vulntology">https://github.com/usnistgov/vulntology</a>
<ul>
<li>Talked to Dave who works on this with A.J. at NIST about how this would be good for ad-hoc CVE creation, Dave said this was the original idea
<ul>
<li><a href="https://github.com/ossf/wg-vulnerability-disclosures/issues/94#issuecomment-1483184591">https://github.com/ossf/wg-vulnerability-disclosures/issues/94#issuecomment-1483184591</a></li>
</ul>
</li>
<li><a href="https://bit.ly/aliceoa">https://bit.ly/aliceoa</a>
<ul>
<li>Talked about Alice, threat modeling, iteration (Entity Analysis Trinity)</li>
</ul>
</li>
</ul>
</li>
<li>TODO
<ul>
<li>[ ] Update emulator to CWT (CBOR Web Token)
<ul>
<li><a href="https://www.iana.org/assignments/cwt/cwt.xhtml">https://www.iana.org/assignments/cwt/cwt.xhtml</a></li>
<li><a href="https://datatracker.ietf.org/doc/draft-ietf-cose-cwt-claims-in-headers/">https://datatracker.ietf.org/doc/draft-ietf-cose-cwt-claims-in-headers/</a></li>
<li>
<blockquote>
<p>CWT_Claims (label: 13 pending [CWT_CLAIM_COSE]): A CWT representing the Issuer (iss) making the statement, and the Subject (sub) to correlate a collection of statements about an Artifact. Additional [CWT_CLAIMS] MAY be used, while iss and sub MUST be provided</p>
<ul>
<li>iss (CWT_Claim Key 1): The Identifier of the signer, as a string
<ul>
<li>Example: did:web:example.com</li>
</ul>
</li>
<li>sub (CWT_Claim Key 2): The Subject to which the Statement refers, chosen by the Issuer
<ul>
<li>Example: github.com/opensbom-generator/spdx-sbom-generator/releases/tag/v0.0.13</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li>Could you implement this off of GitHub Pages?
<ul>
<li>Potentially rotate jwks / cwks or store in secrets</li>
</ul>
</li>
</ul>
</li>
<li>[ ] Bring A.J. and Dave some Alice cards</li>
<li>[x] Post notes to IETF channel
<ul>
<li><a href="https://zulip.ietf.org/#narrow/stream/300-scitt/topic/ietf-interim/near/93128">https://zulip.ietf.org/#narrow/stream/300-scitt/topic/ietf-interim/near/93128</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="2023-11-05-engineering-logs">2023-11-05 Engineering Logs</h1>
<h2 id="2023-11-05-ietf-118-hackathon-day-2">2023-11-05 IETF 118 Hackathon Day 2</h2>
<ul>
<li>A.J. is having issues with OpenAPI spec
<ul>
<li><a href="https://github.com/intel/dffml/blob/alice/docs/discussions/alice_engineering_comms/0217/reply_0000.md">2023-03-23 @pdxjohnny Engineering Logs</a></li>
</ul>
</li>
</ul>
<pre><code class="language-console" data-lang="console">$ npx swagger-cli bundle docs/openapi/openapi.yml -o docs/openapi/openapi.json --dereference
</code></pre><ul>
<li>A.J. was wondering about the NVD v2 API code
<ul>
<li><a href="https://github.com/intel/cve-bin-tool/blob/44b5e990657a43535365585e7a392921107a2fad/cve_bin_tool/data_sources/nvd_source.py#L356-L394">https://github.com/intel/cve-bin-tool/blob/44b5e990657a43535365585e7a392921107a2fad/cve_bin_tool/data_sources/nvd_source.py#L356-L394</a></li>
</ul>
</li>
<li>Harold was doing SBOM for ML models in SCITT
<ul>
<li>Talk of the CycloneDX PRs</li>
</ul>
</li>
<li>A.J. says there is a NIST AI working group
<ul>
<li>Harold seems to be the only technical contact there</li>
</ul>
</li>
<li>Abusing SHA in content type for detached COSE payloads via SHA in media type parameters after multiple suffixes for ML models</li>
<li>Henk
<ul>
<li>&quot;The other day I spotted an albino Dalmatian&quot;</li>
<li><a href="https://github.com/slsa-framework/slsa/issues/975">https://github.com/slsa-framework/slsa/issues/975</a></li>
<li><a href="https://github.com/slsa-framework/slsa/issues/985">https://github.com/slsa-framework/slsa/issues/985</a></li>
<li><a href="https://openssf.org/blog/2023/10/20/slsa-tech-talk-highlights/">https://openssf.org/blog/2023/10/20/slsa-tech-talk-highlights/</a></li>
<li><a href="https://docs.guac.sh/guac-ontology/">https://docs.guac.sh/guac-ontology/</a>
<ul>
<li>has_id is not really an ontology</li>
<li>John guesses it's because it's neo4j-ish</li>
<li><a href="https://docs.guac.sh/graphql/#topological-definitions">https://docs.guac.sh/graphql/#topological-definitions</a>
<ul>
<li>CVE_CERTIFY_VULN
<ul>
<li>Edge</li>
<li>Needs two nodes</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Henk approves of Use Case of GUAC as firewall event loops</li>
<li><a href="https://docs.google.com/presentation/d/11cycDxYaoZpuG144pR6atI1_zk2CfZOWlNO_f_HhhyE/edit#">https://docs.google.com/presentation/d/11cycDxYaoZpuG144pR6atI1_zk2CfZOWlNO_f_HhhyE/edit#</a></li>
</ul>
</li>
<li>40 minutes until slides for what we accomplished need to be done</li>
<li>Ned has landed! He's going to sleep</li>
</ul>
<p><a href="https://ascinema.org/a/619381"><img src="https://asciinema.org/a/619381.svg" alt="asciicast"></a></p>
<ul>
<li><a href="https://github.com/scitt-community/scitt-examples/pull/2">https://github.com/scitt-community/scitt-examples/pull/2</a></li>
<li>Orie: KeyTrans is DIDs but useful</li>
<li>CaddyProxy resumable uploads as spec</li>
</ul>
<h1 id="2023-11-06-engineering-logs">2023-11-06 Engineering Logs</h1>
<h2 id="2023-11-06-ietf-118-scitt-meeting">2023-11-06 IETF 118 SCITT Meeting</h2>
<blockquote>
<p>Lobby Level, Room: Berlin 1/2, packed room</p>
</blockquote>
<p><a href="https://asciinema.org/a/619517"><img src="https://asciinema.org/a/619517.svg" alt="asciicast"></a></p>
<ul>
<li>
<p>Thank God, got clean demo of federation in the nick of time to be included in the slides</p>
<ul>
<li><a href="https://onedrive.live.com/edit.aspx?resid=13061045B2304AF8!251476&amp;ithint=file%2cpptx&amp;wdo=2&amp;authkey=!ANqrQcEZ1fhMyGg">https://onedrive.live.com/edit.aspx?resid=13061045B2304AF8!251476&amp;ithint=file%2cpptx&amp;wdo=2&amp;authkey=!ANqrQcEZ1fhMyGg</a></li>
<li><a href="https://github.com/scitt-community/scitt-api-emulator/pull/37">https://github.com/scitt-community/scitt-api-emulator/pull/37</a></li>
</ul>
</li>
<li>
<p>Henk Birkholz - Why SCITT is Cool</p>
<ul>
<li>Statements such as SLSA</li>
<li>Products will move along the supply chain, we need to maintain authenticity even if the original signing certs have been rotated, etc.</li>
<li>Minimalistic authenticity layer wrapped around supply chain statements</li>
<li>Registration of supply chain statemetns for later audits after the fact</li>
<li>off-line &lt;3 verification (hermetic builds heres looking at you) receipts</li>
<li>Issuers and TS both create signed statements</li>
</ul>
</li>
<li>
<p>Henk - Recap Since IETF 117</p>
<ul>
<li>We did weekly meetings
<ul>
<li>Needed to have a lot of recaps for those new to COSE and IETF structure/process
<ul>
<li>Inform and knowledge transfer</li>
</ul>
</li>
</ul>
</li>
<li>PRs 94,95,105,107,108,113,114,119
<ul>
<li>Cleaning up references to claims (now called statements)</li>
<li>Clarifications of Feeds to subject (reuse of CWT and COSE header parameters)</li>
<li>Some SCITT specific metadata in envelop</li>
<li>reg_info is still in there, but it's not the same as CWT claims, they are maybe redundant, maybe not, they are currently alternatives, but we have work to do there to understand what to do next here</li>
</ul>
</li>
<li>We have arch doc and use case docs
<ul>
<li>PR4 adds versioning use case</li>
<li>Helping you and your supply chain needs with authentic statements about supply chain products</li>
<li>Within the hackathon we build the POC code around this</li>
<li>Working group last call on the ongoing use case document</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Jon and Cedric - Registration Policies</p>
<ul>
<li>Registration Policy is a simple set of rules evaluated by the transparency service to determine admissibility of a statement</li>
<li><a href="https://github.com/scitt-community/scitt-api-emulator/pull/27">https://github.com/scitt-community/scitt-api-emulator/pull/27</a></li>
<li>Must be payload agnostic and interoperable
<ul>
<li>Exquisite interoperability for transparent payloads, everything knows what to send and how to send it regardless of what the payload is, any payload you want to send to any TS should work</li>
<li>We can't predict all use cases or inputs</li>
<li>This group doesn't define what acceptable insert policy is, there need to be spaces within the structures to transport what those signals policy might filter on would be</li>
<li>General access control</li>
<li>Anti-spamming (it's append only, need to avoid filling with random stuff)</li>
<li>In this system you can't issue a statement to the TS without being some sort of authenticated or identifiable issuer
<ul>
<li><strong>TODO(@pdxjohnny)</strong> update OIDC thread with flushed out example and registration policy doc with jsonschema + CWT / JWT verification of issuer</li>
</ul>
</li>
</ul>
</li>
<li>SCITT enables entities/issuers to make claims about things
<ul>
<li>Built my software, tests passed, got approval for release, what's important is your software is the thing you're making claims about. We need it to be clear who's opinion is being recorded about what thing. Imagine subject: <code>issuer:myissuer:thing:mything</code> (example in GitHub Actions subject customization format)</li>
</ul>
</li>
<li>Registration policy determines if statement is admissible
<ul>
<li>In a decentralized software supply chain systems may not even know they are creating statements out of order</li>
<li>If you look back 20 years from now do you now know that the issuer had a compromised key at the time?
<ul>
<li>Who was the issuer and were they valid at the time?</li>
<li>What policy was enforced at the time?</li>
</ul>
</li>
<li>Expect to observe work on registration policy stuff
<ul>
<li>
<blockquote>
<p>We discussed this at dinner last night as well (Steve, Cedric, John)</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Cedric - Registration Policy</p>
<ul>
<li>Did implement the AI demo from the paper</li>
<li>Need to know which certificates were considered acceptable at time of insert</li>
<li>Need to know what rules were enforced at time of insert</li>
<li>Need a way to uniquely refer to a statement at registration time
<ul>
<li><a href="https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/79#issuecomment-1767570492">https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/79#issuecomment-1767570492</a></li>
</ul>
</li>
<li>We can create a receipt for the registration policy each time it is updated
<ul>
<li>Anytime we insert, we can embed into the receipt the entry ID of the receipt of the registration policy evaluated against</li>
<li>Verifier can then keep the receipt for the claim in question as well as the receipt for the registration policy, if it want's to verify later, it can use both receipts.</li>
</ul>
</li>
<li>We think we can make the entry ID automatic and extracted from the transparent statement
<ul>
<li>Our idea from Saturday was to combine statement (aka claim) hashing with the abuse of a content type identifier, using <code>+</code> to add the hash</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Orie - CBOR API</p>
<ul>
<li>We use the word &quot;statement&quot; as a generic term which is an artifact relevant to the supply chain</li>
<li><code>transparent statement</code> = <code>signed statement</code> with a <code>receipt</code>
<ul>
<li>Composition of notaries signed statement with TS's signed statement</li>
</ul>
</li>
<li>Trust improves over time when we allow multiple entities to make statements about things
<ul>
<li>Ref Alice docs: This is our review system</li>
</ul>
</li>
<li>CBOR extended disanositc notation crash course
<ul>
<li>In designing the message structure learning CDDL was very helpful</li>
<li>Working with CDDL examples, COSE sign1 , protected header, etc. those basic understandings help use understand what SCITT is trying to achive and how it uses COSE and CBOR to help it achive that.</li>
<li>ECDSA with SHA384 is -35, if we move post quantum we'd select another alg (non-ECDSA)</li>
<li>Content type is a useful property included in the protected header which tells us the content type of the thing we are signing</li>
<li>(4) is a key discovery helper, like a key identifier (kid)
<ul>
<li>You may also see (33) which would be a full X509 chain</li>
<li>Usually you will not see both the shorthand and full keychain in the protected headers</li>
</ul>
</li>
<li>TBD 0 and 393 might get combined, see future mailing list discussion</li>
<li>Issuer COSESign1
<ul>
<li>Protected header, entire object in first CDDL slide</li>
<li>Unprotected header, placeholder for contents of collection of receipts
<ul>
<li>Same statement might be exposed by multiple receipts</li>
<li>Since IETF 117 we can now include multiple receipts for the same statement
<ul>
<li><strong>TODO(@pdxjohnny)</strong> Update federation stuff to talk about and handle this</li>
</ul>
</li>
<li>nil, detached signature, useful for things like large ML models</li>
<li>signature</li>
</ul>
</li>
</ul>
</li>
<li>TS COSESign1
<ul>
<li>Protected header (will review next)</li>
<li>-222, proofs, binary merkele tree consistency proof and inclusion proof, consistency proof proves append only is being maintained by service provider, inclusion proof says yes this exists within the merkle tree
<ul>
<li>nil, detached signature</li>
<li>signature</li>
</ul>
</li>
</ul>
</li>
<li>Recipt protected header
<ul>
<li>-35, sig alg</li>
<li>TBD 0: RFC 9162, binary merkel tree, minimal consistency and inclusion proofs, set this to 1 if you are using those proof types as described by RFC 9162</li>
<li>TBD 1:, 1, TS issuer, 2, registration event id (subject)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Orie - REST API</p>
<ul>
<li><a href="https://github.com/ietf-scitt/draft-birkholz-scitt-scrapi">https://github.com/ietf-scitt/draft-birkholz-scitt-scrapi</a>
<ul>
<li>API was split out into it's own repo</li>
</ul>
</li>
<li>Moving those CBOR blobs around</li>
<li>This is one way to move stuff around, there might be other ways in the future
<ul>
<li>
<blockquote>
<p>John, Steve, Cedric talked about KERI based</p>
</blockquote>
</li>
</ul>
</li>
<li><code>POST /statements</code> (old endpoint was <code>POST /entries</code>)</li>
<li>Once we have a receipt we can trust that statement more (it has been validated to some transparency services policy)
<ul>
<li>
<blockquote>
<p>Update federation docs to explain this, <code>use_lro=True</code></p>
</blockquote>
</li>
</ul>
</li>
<li><code>GET /receipts/urn:uuid:&lt;statement-uuid&gt;</code>
<ul>
<li>If use lro is not true you'll get it back right away</li>
<li>If it is you can request it later</li>
<li><a href="https://scitt-community.github.io/scitt-api-emulator/registration_policies.html">https://scitt-community.github.io/scitt-api-emulator/registration_policies.html</a></li>
</ul>
</li>
<li>Example made up command: <code>scitt up-transparency</code> (leveling up your transparency security)
<ul>
<li><code>statement.xml</code></li>
<li><code>signed-statement.cbor</code></li>
<li><code>receipt.cbor</code>
<ul>
<li>Might get different receipts from different transparency services</li>
<li>
<blockquote>
<p>With federation we might want to return from <code>use_lro=True</code> once we have receipts from a certain set of transparency services. For example: We &quot;commit&quot; code, push sha265 content to registry, webhook -&gt; Alice, Alice federate to Bob and Travis, Bob and Travis have different registration policies (as if they are CI jobs), CI is effectively complete for &quot;commit&quot; which we have receipts from a &quot;status checks required&quot; set of TS/Actors we federate with.</p>
</blockquote>
</li>
</ul>
</li>
<li><code>transparent.cbor</code> (this usually happens in the TS)</li>
</ul>
</li>
<li>Supply chains
<ul>
<li>Upstream -&gt; raw ingredients, picked tomato, lumber harvested from forest
<ul>
<li>Problems can occur at source</li>
</ul>
</li>
<li>Downstream -&gt; processing
<ul>
<li>The more hops down stream the more problems might occur</li>
</ul>
</li>
<li>Reminder from Roman that we are doing software (yes we hope to go other places)
<ul>
<li>Orie, don't worry our soup will turn into software by end of example</li>
</ul>
</li>
<li>Entity that picks only the finest ingredients to make soup (sound familiar? TODO link to Alice docs)
<ul>
<li>Imagine being asked were your ingredients came from</li>
<li>Would be easy if you could just say here's the receipts for all the things within my soup BOM, receipt for soup includes structure for upstream supply chain and is useful to my downstream consumers</li>
</ul>
</li>
<li>Magic AI generated firmware hardware device
<ul>
<li>What is this things? We're terrified about everything this AI generaated in 3 seconds?</li>
<li>What questions should we ask before we expose family, customes, anyone we care about to this new device?</li>
<li>Is there a QR code on it we can scan to get some feed information about this device?</li>
<li>Are there vulns that have been reported since the device was made?
<ul>
<li>5 years after release there might be new info available</li>
<li>What if the regulatory landscape has changed?</li>
<li>Has the product been recalled?</li>
<li>Is there an upgrade path for the firmware?</li>
<li>Are there any unpatched CVEs?</li>
</ul>
</li>
<li>There is something called LDevID which gets used sometimes. Might also be called IDevID, Henk made Orie write LDevID because its related to factory floor stuff. Global stuff is IDevID.</li>
</ul>
</li>
</ul>
</li>
<li>Dave from AT&amp;T: How can I create a profile or template for things that should be asked so that in the upstream there are proper receipts that will answer those questions?
<ul>
<li>Could say that registration policy TS is applying might say that payload needs to be analysed to ensure that it contains all the info needed, maybe the subject is formatted correctly to find in the feed.</li>
<li>In IETF 117 we brainstormed a relevant use case related to govt compliance</li>
</ul>
</li>
<li>Henk: There are many Transparency Services
<ul>
<li>There may be different manufacturers of a device over the lifetime of a product</li>
</ul>
</li>
<li>A.J. Stein: Are we talking about setting the context of what's happened or are we talking about the current arch and SCRAPY draft?
<ul>
<li>Orie: Currently recovering from last time, point is we want to get receipts related to particular topics (this would be a feed/subject). Part of the document has already been updated to reflect what we are seeing here today.</li>
</ul>
</li>
<li>We might get several things back when we ask for the feed for a device (referenced by it's LDevID, LDevID is just the example feed/subject in this case)
<ul>
<li>Feeds allow downstream suppliers to subscribers to subscribe to things which are relevant to their supply chain!</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Jon Geater - Hackathon Report</p>
<ul>
<li>Full table! Stealing chairs because we didn't have enough</li>
<li>Spec focused, some code work</li>
<li>Solidified the entry ID within the receipt stuff</li>
<li>Talked about registration polices
<ul>
<li>Talked about labeled properties graphs and how we might evaluate eventually using those</li>
</ul>
</li>
<li>Realized we need to expose certain service parameters
<ul>
<li><a href="https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/96#issuecomment-1794364931">https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/96#issuecomment-1794364931</a></li>
</ul>
</li>
<li>Code Progress
<ul>
<li>Showed rough consensus this hackathon</li>
<li>Furthered work on federation</li>
<li>Furthered work on API access control (OIDC)</li>
<li>Breaking news from this morning: Federation POC!</li>
<li>Proved out DID resolution and verification (Jon at RKVST)</li>
<li>Begun collecting examples to hlep know when the building blocks satisfy the use cases</li>
</ul>
</li>
<li>John: Federation Hackathon POC Overview and Demo
<ul>
<li><a href="https://asciinema.org/a/619517">https://asciinema.org/a/619517</a></li>
<li><a href="https://github.com/scitt-community/scitt-api-emulator/pull/37/commits/ed2f0882b3043e0772c9c11ff376bc894b5183b0">https://github.com/scitt-community/scitt-api-emulator/pull/37/commits/ed2f0882b3043e0772c9c11ff376bc894b5183b0</a></li>
<li>ActivityPub related demo covered at <a href="https://www.youtube.com/watch?v=zEGob4oqca4&amp;t=5354s">1:29:14</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p>Jon: WG Operations</p>
<ul>
<li>We're getting close we feel, will probably do more async, move to less frequent meeting schedule</li>
</ul>
</li>
<li>
<p>Hannes: Has to step down as co-chair</p>
<ul>
<li>Group has made a lot of progress</li>
</ul>
</li>
<li>
<p>Roman: Is our Security lesion from IETF</p>
<ul>
<li>Great job launching enthusiasm and excitement</li>
<li>Everyone coming to IETF to work on this is exactly what we need to do</li>
<li>Thanks to Hannes!</li>
<li>There will be a new co-chair so Jon is not all alone</li>
</ul>
</li>
<li>
<p>Jon: SCITT Drafts</p>
<ul>
<li>We have some draft use cases</li>
<li>We have a lot of stuff to look at, we have a quality mindset in this working group</li>
<li>Lots of changes lately, consolidating on a few consistent coherent structures</li>
<li>Lots of interesting implications of how we are encoding things which determine what kind of technology you can or can't use for an append only log</li>
<li>Split SCITT Reference API SCRAPI (scrapy) into it's own repo
<ul>
<li>Content copy pasted from old arch doc into it's own repo</li>
</ul>
</li>
<li>Emulator is our way of proving out ideas so that if we change the spec in some way we know it will work</li>
<li>SCITT is frosting on top of building blocks which are applicable to many domains (COSE, etc.)
<ul>
<li>SCITT Receipts will be the frosting on top of the merkle tree stuff which will be in the COSE WG</li>
<li>COSE has some timestamp stuff</li>
<li>We might draw a little map of what we are using and were</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Simon Friedberger: Use case doc is missing mapping of metadata to the use cases</p>
<ul>
<li>Example: We want for this product to find all the audit reports, needs mapping of what data is not opaque.</li>
<li>Jon: Our group tries to not duplicate and re-formalized bits of CycloneDX or SPDX to be indexable, we try to make sure they are possible
<ul>
<li>There is a content type for the issuer and subject, if we know the content type which is VRF+JSON, is that enough? We are debating this</li>
</ul>
</li>
<li>TODO: Add to use cases what metadata solves what use case</li>
</ul>
</li>
<li>
<p>Dr. Max Pala: Are we already considering a use case to track transition to post quantum crypto?</p>
<ul>
<li>Orie: We're working on quantum safe algs, SCITT itself is designed to enable usage of those algs as they become available.
<ul>
<li>From a use case perspective it would be good to follow up on this with a use case to track the software we are describing and see if they are post quantum capable</li>
<li>Hannes: Build config might tell us what algs are compiled into a piece of software, could track with vulns</li>
<li>Cedric: One thing to note adjacent to this is that we do not plan to support agility within the merkle tree hashing algs, since that invalidates the tree
<ul>
<li>Hannes: We should look at merkle tree migration</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Manu Fontaine: Want to suggest syemetic signature and crypto approach with SCITT to be used with TEEs</p>
<ul>
<li>Symmetric keys with HMAC sigs for performance, post quantum, attested agents, encryption possibilities
<ul>
<li>
<blockquote>
<p>Note from John: We have TEEs mentioned within <a href="https://github.com/ietf-scitt/use-cases/pull/18">https://github.com/ietf-scitt/use-cases/pull/18</a></p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Henk: Confidential Computing Consortium and IETF RATS attestation results and concise evidence will play a big part here, but we haven't talked about it much yet</p>
<ul>
<li>TS could provide remote attestation results to attest to trustworthiness</li>
<li>DID resolvers with ATLS could help</li>
<li>TCG attestation group co-chair hat on: Some ways include symmetric crypto but it's not the only way</li>
</ul>
</li>
<li>
<p>W3C there is a brief proposal to use a TS maybe SCITT for JS stuff</p>
<ul>
<li><a href="https://www.w3.org/2023/03/secure-the-web-forward/talks/source-code-transparency.html">https://www.w3.org/2023/03/secure-the-web-forward/talks/source-code-transparency.html</a></li>
</ul>
</li>
<li>
<p>Ned Smith</p>
<ul>
<li>What did the receipt issuers do to ensure the tomato is fresh?
<ul>
<li>Why should we trust the notary? Are we sure they checked?</li>
</ul>
</li>
<li>Orie: The minimal activity the notary would do is check the issuer, ensure that the issuer has key material that we can verify
<ul>
<li>An advanced notary with domain expertise could look inside the payload, as descrition of TS and reg policy</li>
</ul>
</li>
<li>Cedric: You know who to blame, you can make choices based off who you know</li>
<li>Ned: Compromise might be the type of check the receipt issuer did could be something that goes into the issuer claims</li>
</ul>
</li>
<li>
<p>Peter: ETH using polyunomiocal commitment stuff, could be interesting</p>
<ul>
<li>Great reason to maintain agility of tree formats</li>
</ul>
</li>
<li>
<p>Steve Lasker: If you decide to trust tomatot verifier corp, you might decidde to trust them from certain things, reg policy helps here</p>
</li>
<li>
<p>Jon: Please engage in mailing list!</p>
</li>
<li>
<p>Future</p>
<ul>
<li>How to verify statements when a payload is huge</li>
</ul>
</li>
<li>
<p>References</p>
<ul>
<li><a href="https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/96#issuecomment-1794364931">https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/96#issuecomment-1794364931</a></li>
</ul>
</li>
<li>
<p><a href="https://docs.wire.com/main.pdf#page9">https://docs.wire.com/main.pdf#page9</a></p>
</li>
</ul>
<h1 id="2023-11-07-engineering-logs">2023-11-07 Engineering Logs</h1>
<h2 id="2023-11-07-ietf-118-secure-patterns-for-internet-credentials-spice-meeting">2023-11-07 IETF 118 Secure Patterns for Internet CrEdentials (SPICE) Meeting</h2>
<blockquote>
<p><em>Whoever controls...</em></p>
</blockquote>
<ul>
<li>Pamela Dingle co-chair</li>
<li>Hannes who was co-chair for SCITT is now co-chair here</li>
<li>Roman joining</li>
<li><a href="https://notes.ietf.org/notes-ietf-118-spice">https://notes.ietf.org/notes-ietf-118-spice</a></li>
<li>Leif - Market Driver
<ul>
<li>EU legislation process</li>
<li>EU attempts to build digital identity wallet</li>
<li>EU is a deal making 30 way negotiation process between member states and commission</li>
<li>Implementation Acts are law masquerading as technical specs
<ul>
<li>Must be written by ISO or ETSI, can reference standards produced elsewhere, such as IETF</li>
</ul>
</li>
<li>Web based use cases
<ul>
<li>Web flows, OID for Verifiable Credentials, OID for Verifiable Presentations</li>
<li>Hey new world, solidify those standards so we can use them and have interoperability</li>
<li>Tens of millions of users need to do real web flows with this in the next few years</li>
</ul>
</li>
</ul>
</li>
<li>Brent
<ul>
<li>Use cases
<ul>
<li>Have unspoken â€œso thatâ€ clause, worker provides assertions about their certification to a company</li>
<li>Some holder provides assertion from and <code>issuer</code> about <code>subject</code> to a <code>verifier</code>
<ul>
<li>Assertion is issued in a credential</li>
<li>Assertion is provided as a presentation</li>
</ul>
</li>
</ul>
</li>
<li>Need WG at IETF so that we can have increased security and focus on automation use cases (automated use)</li>
<li>Tech timeline
<ul>
<li>COSE (2022)</li>
<li>Three party model</li>
</ul>
</li>
<li>OWASP WG is not chartered to this scope
<ul>
<li>Machine identity in supply chains large legal entities like EU itself as â€œuserâ€</li>
<li>Cant assume users have hosted endpoints</li>
<li>No <code>.well-known</code> paths exist yet for three party, SD-JWT VC oauth IETF WG has one in draft.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://github.com/intel/dffml/assets/5950433/5473b3c4-3a8d-43c4-9bb6-9fa7bd4fd064" alt="IMG_1463">
<img src="https://github.com/intel/dffml/assets/5950433/3f676c00-4eed-4acc-8451-7e1101cfa161" alt="IMG_1464"></p>
<h2 id="2023-11-07-pdxjohnny-engineering-logs">2023-11-07 @pdxjohnny Engineering Logs</h2>
<ul>
<li><a href="https://github.com/intel/cve-bin-tool/blob/main/.github/dependabot.yml">https://github.com/intel/cve-bin-tool/blob/main/.github/dependabot.yml</a></li>
<li><a href="https://github.com/scitt-community/scitt-examples/blob/cc337ba382ff126a1412d2658d1023162ed4ae81/python/script.sh">https://github.com/scitt-community/scitt-examples/blob/cc337ba382ff126a1412d2658d1023162ed4ae81/python/script.sh</a></li>
<li><a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-pypi">https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-pypi</a></li>
<li>Example SBOM upload to ORAS and hash to SCITT
<ul>
<li><a href="https://scitt-community.github.io/scitt-api-emulator/registration_policies.html">https://scitt-community.github.io/scitt-api-emulator/registration_policies.html</a></li>
<li><a href="https://oras.land">https://oras.land</a></li>
<li><a href="https://scitt.io">https://scitt.io</a></li>
</ul>
</li>
<li>Start the a container registry were we will store artifacts, we store references to artifacts within SCITT</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker run -d -p 5000:5000 --name oras-quickstart-registry ghcr.io/project-zot/zot-linux-amd64:latest
</code></pre></div><ul>
<li>Generate or download an SBOM
<ul>
<li><a href="https://github.com/advanced-security/gh-sbom">https://github.com/advanced-security/gh-sbom</a>
<ul>
<li><code>gh ext install advanced-security/gh-sbom</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">REPO_URL</span><span class="o">=</span><span class="s2">&#34;https://github.com/intel/cve-bin-tool&#34;</span>
<span class="nb">export</span> <span class="nv">REPO_ORG</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span><span class="nb">echo</span> <span class="si">${</span><span class="nv">REPO_URL</span><span class="si">}</span> <span class="p">|</span> sed -e <span class="s1">&#39;s/https:\/\/github.com\///g&#39;</span> <span class="p">|</span> sed -e <span class="s1">&#39;s/\/.*//g&#39;</span><span class="k">)</span><span class="s2">&#34;</span>
<span class="nb">export</span> <span class="nv">REPO_NAME</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span><span class="nb">echo</span> <span class="si">${</span><span class="nv">REPO_URL</span><span class="si">}</span> <span class="p">|</span> sed -e <span class="s1">&#39;s/.*\///g&#39;</span><span class="k">)</span><span class="s2">&#34;</span>
<span class="nb">export</span> <span class="nv">TARGET_FILE</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">REPO_NAME</span><span class="si">}</span><span class="s2">.sbom.json&#34;</span>
gh sbom -r <span class="s2">&#34;</span><span class="si">${</span><span class="nv">REPO_URL</span><span class="si">}</span><span class="s2">&#34;</span> <span class="p">|</span> python -m json.tool --sort-keys &gt; <span class="s2">&#34;</span><span class="si">${</span><span class="nv">TARGET_FILE</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="c1"># echo &#34;intel/cve-bin-tool/sbom/cve-bin-tool-py3.10.json&#34; | xargs -I &#39;{}&#39; bash -ec &#39;export REPO_URL=&#34;{}&#34; &amp;&amp; mkdir -p files/$(dirname ${REPO_URL}) &amp;&amp; export REPO_ORG=$(echo ${REPO_URL} | sed -e &#34;s/\/.*//g&#34;) &amp;&amp; export REPO_NAME=$(echo ${REPO_URL} | sed -e &#34;s/${REPO_ORG}\///&#34; | sed -e &#34;s/\/.*//g&#34;) &amp;&amp; export FILEPATH=$(echo ${REPO_URL} | sed -e &#34;s/${REPO_ORG}\/${REPO_NAME}\///g&#34;) &amp;&amp; gh api -H &#34;Accept: application/vnd.github.raw&#34; /repos/${REPO_ORG}/${REPO_NAME}/contents/${FILEPATH} &gt; files/${REPO_ORG}/${REPO_NAME}/${FILEPATH}&#39;</span>
</code></pre></div><ul>
<li>Upload the contents of the SBOM to the registry</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">REGISTRY_DOMAIN</span><span class="o">=</span><span class="s2">&#34;localhost:5000&#34;</span>
<span class="nb">export</span> <span class="nv">REGISTRY_USERNAME</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>python -m keyring get <span class="nv">$USER</span> registry.username<span class="k">)</span><span class="s2">&#34;</span>
<span class="nb">export</span> <span class="nv">REGISTRY_PASSWORD</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>python -m keyring get <span class="nv">$USER</span> registry.password<span class="k">)</span><span class="s2">&#34;</span>
<span class="nb">export</span> <span class="nv">REGISTRY_PROJECT</span><span class="o">=</span><span class="s2">&#34;sbom&#34;</span>
<span class="nb">export</span> <span class="nv">IMAGE_NAME</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">REPO_ORG</span><span class="si">}</span><span class="s2">-</span><span class="si">${</span><span class="nv">REPO_NAME</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="nb">export</span> <span class="nv">TARGET_RELEASE_TAG</span><span class="o">=</span><span class="k">$(</span>gh -R <span class="s2">&#34;</span><span class="si">${</span><span class="nv">REPO_URL</span><span class="si">}</span><span class="s2">&#34;</span> release list -L <span class="m">1</span> <span class="p">|</span> awk <span class="s1">&#39;{print $(NF-1)}&#39;</span><span class="k">)</span>
<span class="nb">export</span> <span class="nv">TARGET_RELEASE_COMMIT</span><span class="o">=</span><span class="k">$(</span>git ls-remote <span class="s2">&#34;</span><span class="si">${</span><span class="nv">REPO_URL</span><span class="si">}</span><span class="s2">&#34;</span> --tags <span class="s2">&#34;</span><span class="si">${</span><span class="nv">TARGET_RELEASE</span><span class="si">}</span><span class="s2">&#34;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span><span class="k">)</span>
<span class="nb">export</span> <span class="nv">IMAGE</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">REGISTRY_DOMAIN</span><span class="si">}</span><span class="s2">/</span><span class="si">${</span><span class="nv">REGISTRY_PROJECT</span><span class="si">}</span><span class="s2">/</span><span class="si">${</span><span class="nv">IMAGE_NAME</span><span class="si">}</span><span class="s2">:</span><span class="si">${</span><span class="nv">TARGET_RELEASE_COMMIT</span><span class="si">}</span><span class="s2">&#34;</span>
oras push -u <span class="s2">&#34;</span><span class="si">${</span><span class="nv">REGISTRY_USERNAME</span><span class="si">}</span><span class="s2">&#34;</span> -p <span class="s2">&#34;</span><span class="si">${</span><span class="nv">REGISTRY_PASSWORD</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span><span class="se"></span>  <span class="s2">&#34;</span><span class="si">${</span><span class="nv">IMAGE</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span><span class="se"></span>  <span class="s2">&#34;</span><span class="si">${</span><span class="nv">TARGET_FILE</span><span class="si">}</span><span class="s2">:application/json&#34;</span>
<span class="c1"># Uploading 291a64cd275f cve-bin-tool.sbom.json</span>
<span class="c1"># Uploaded  291a64cd275f cve-bin-tool.sbom.json</span>
<span class="c1"># Pushed [registry] localhost:5000/sbom/intel-cve-bin-tool:92d27dceac8a7719b906892f253c035c86b4bfd6</span>
<span class="c1"># Digest: sha256:ad729afe0436d86e7f4672c06e9765f9a35c1415abac6fecddd4b0fbca9837e8</span>
<span class="nb">export</span> <span class="nv">IMAGE</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">REGISTRY_DOMAIN</span><span class="si">}</span><span class="s2">/</span><span class="si">${</span><span class="nv">REGISTRY_PROJECT</span><span class="si">}</span><span class="s2">/</span><span class="si">${</span><span class="nv">IMAGE_NAME</span><span class="si">}</span><span class="s2">:</span><span class="si">${</span><span class="nv">TARGET_RELEASE_TAG</span><span class="si">}</span><span class="s2">&#34;</span>
oras push -u <span class="s2">&#34;</span><span class="si">${</span><span class="nv">REGISTRY_USERNAME</span><span class="si">}</span><span class="s2">&#34;</span> -p <span class="s2">&#34;</span><span class="si">${</span><span class="nv">REGISTRY_PASSWORD</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span><span class="se"></span>  <span class="s2">&#34;</span><span class="si">${</span><span class="nv">IMAGE</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span><span class="se"></span>  <span class="s2">&#34;</span><span class="si">${</span><span class="nv">TARGET_FILE</span><span class="si">}</span><span class="s2">:application/json&#34;</span>
<span class="c1"># Pushed [registry] localhost:5000/sbom/intel-cve-bin-tool:v3.2.1</span>
<span class="c1"># Digest: sha256:ad729afe0436d86e7f4672c06e9765f9a35c1415abac6fecddd4b0fbca9837e8</span>
</code></pre></div><ul>
<li>Upload content address of SBOM to SCITT</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">scitt-emulator client create-claim --issuer TODO_CWT_ISSUER --content-type application/json --payload <span class="s2">&#34;{\&#34;sbom\&#34;: {\&#34;oci_image\&#34;: \&#34;</span><span class="si">${</span><span class="nv">IMAGE</span><span class="si">}</span><span class="s2">\&#34;}}&#34;</span> --out claim.cose
python -m cbor2.tool claim.cose
<span class="c1"># {&#34;CBORTag:18&#34;: [&#34;\\xa3\u0001&amp;\u0003papplication/json\u0019\u0001\\x87oTODO_CWT_ISSUER&#34;, {}, &#34;{\&#34;sbom\&#34;: {\&#34;oci_image\&#34;: \&#34;localhost:5000/sbom/intel-cve-bin-tool:v3.2.1\&#34;}}&#34;, &#34;~\\xe9\\xf7y\\x8e\\xa0\\xd8\\xea5ç„\\x92VJ8_\\x86\\xf2\\xd8Y\\x91qDQ\r\\xd4\\xcc[\\xd9\u001dF&amp;\\xd5\\xcc(\\x92hrj$\\x9c\u0019\\xf3\\xb7\u0001S\\x95@;\\xf1\\x88(bF32\u000f\\xfb\\x84\\xf1\\x809&#34;]}</span>
<span class="c1"># A COSE signed Claim was written to:  claim.cose</span>
scitt-emulator client submit-claim --claim claim.cose --out claim.receipt.cbor
<span class="c1"># Example with OIDC Auth</span>
<span class="c1"># References</span>
<span class="c1"># - https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#updating-your-actions-for-oidc</span>
<span class="c1"># OIDC_TOKEN=$(curl -H &#34;Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN&#34; &#34;$ACTIONS_ID_TOKEN_REQUEST_URL&amp;audience=https://scitt.example.org&#34;)</span>
<span class="c1"># scitt-emulator client submit-claim --claim claim.cose --out claim.receipt.cbor --url https://scitt.example.org --cacert &#34;${REQUESTS_CA_BUNDLE}&#34; --token &#34;${OIDC_TOKEN}&#34;</span>
<span class="c1"># Claim registered with entry ID 1</span>
<span class="c1"># Receipt written to claim.receipt.cbor</span>
python -m cbor2.tool claim.receipt.cbor
<span class="c1"># [&#34;\\xa3jservice_idhemulatorhtree_algcCCFiissued_at\u001aeJ^t&#34;, [&#34;\\xc6\u0013uj\\x90\\x9a&amp;\\xa1tÅ«o\\xbcb\\xf1\u000fX\\x89\\xb7q[\\x84Ú´#Sr\u0018ß Mv\u001d\\xa4\\xd7\\xcaS=P\\xba\\xe8\\x90ä—±\\xb5\tYsÄh\\xb9\\xbc\\x9d\\x83t\\x9bj\\x8a)\\xc8vk&#34;, &#34;0\\x82\u0001 0\\x81Ç \u0003\u0002\u0001\u0002\u0002\u0014\u001f\\x9e^&amp;u\\xfc\\xa4\u0011\\xf1\\xa10q@\\xdc\u0002J\u0016\\xe5\\x9d0\n\u0006\b*\\x86H\\xce=\u0004\u0003\u00020\u00121\u00100\u000e\u0006\u0003U\u0004\u0003\f\u0007service0\u001e\u0017\r231107155714Z\u0017\r241106155714Z0\u000f1\r0\u000b\u0006\u0003U\u0004\u0003\f\u0004node0Y0\u0013\u0006\u0007*\\x86H\\xce=\u0002\u0001\u0006\b*\\x86H\\xce=\u0003\u0001\u0007\u0003B\u0000\u0004P\u001d&#39; pa\\xda\\xc1Qdj\\x9b_\\xe17\u00138\\xf4\\x8e\\x81\\xcc=\\xbc\\xe1\u0012\\xb6\\xd3\\xe6\\xb5\n\u001e\\xfeP\\xda\\xf1\\x9c\u001a?]\\xa6&lt;\\xb1\\x93\\xa5\\xb5)k$\u0004\\xe3_\\x80j\\xb9\f\\xe5\\xe8\\xbbÕ\u00030\\xbb\b0\n\u0006\b*\\x86H\\xce=\u0004\u0003\u0002\u0003H\u00000E\u0002!\u0000\\xea\\xbc\b\\xfdM\\xa9\\x93\\xdbRn/d\u0002\u0017\\xe7\\x9b\\xf3\u0006\u0000\\xa8\\xd7Ì¤\u000b\\xc2\\xc7:v%)h\\xb0\u0002 &lt;\u0005\\xad\\xed\\xc4Æ®y\u0012\\xff\\xee\\x96I\\xf8Qz\\xb2\u001a\u000e\\xc51\\xe7\\xb6Ú˜o\\xe7y\\xa6X\u0007\\xdd&#34;, [[true, &#34;\\xd3F\\xc1/n\bf!n\\x87\\xa3\\xf8D\\x84\\xebsÕ´\t\u000f\\xccD\\xf7O\u0000b\\xa1\\xe2\u0015Rp\\xe4&#34;], [true, &#34;(|\\x90\\xae\\xabÏ˜\u0004\u001c\\x8c\u0015\r\\xa4d\\x81\u0002\\xa8\u0000\\x80W\u0010b\\x9cW:D\u0004S\\xe2K\\xf6\\x86&#34;], [true, &#34;Ú”Þ\\xc1\\xa6i\u0013x\\xc9d\u0006\\x91\\xef\\xfbw\\x92\\x8e\u0016t\\xd1\n\\xc37cQ\u0016\\xd7jS\u001af&#34;], [true, &#34;p\\xa2\\xd6\u0013\\xa4\\x9b\\xb4\\xed2É”\\x9e\\xa36`\u000b7\u001b=\r\\xea\\xc9g\\xa7\u001e\\xb1\\xa6-\\xe8.\\xb0&#34;], [true, &#34;\\xb4\u0011\\xde\\xd0\u0012\\xae\\xb3\u001d\\xbf\u0000\\xf8&#39;\\xc6\u0011á´¾\u00198X\\xa4\u0012\\x8c,ï¿½L&gt;\\x99\\xadÄŒ&#34;], [true, &#34;9Ü–\\x86\u001dV\\xb3\\xd1\\\u000f\u0017u\u0001_8\\xec%Õ–\\xff?\u0011ÄŽ\\xd5y\u0013\u0001#\\xef\\xa6\\xc2&#34;]], [&#34;\\xb5\\xa2\\xc9bPa#f\\xea&#39;/\\xfa\\xc6\\xd9tJ\\xafKE\\xaaÍ–\\xaa|\\xfc\\xb91\\xee;U\\x82Y&#34;, &#34;1&#34;]]]</span>
</code></pre></div><ul>
<li>Example container build from <code>manifest.json</code>
<ul>
<li><a href="https://github.com/intel/dffml/blob/156e8a91a46cbe7e9467d5d93204065107f1469e/schema/github/actions/build/images/containers/0.0.0.schema.json">https://github.com/intel/dffml/blob/156e8a91a46cbe7e9467d5d93204065107f1469e/schema/github/actions/build/images/containers/0.0.0.schema.json</a></li>
</ul>
</li>
</ul>
<p><strong>scitt-api-emulator.manifest.json</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;branch&#34;</span><span class="p">:</span> <span class="s2">&#34;main&#34;</span><span class="p">,</span>
  <span class="nt">&#34;build_args&#34;</span><span class="p">:</span> <span class="s2">&#34;[[\&#34;key0\&#34;, \&#34;value0\&#34;], [\&#34;key1\&#34;, \&#34;value1\&#34;]]&#34;</span><span class="p">,</span>
  <span class="nt">&#34;commit&#34;</span><span class="p">:</span> <span class="s2">&#34;72a75511d7840d4062741185ec6879b585ee8c07&#34;</span><span class="p">,</span>
  <span class="nt">&#34;dockerfile&#34;</span><span class="p">:</span> <span class="s2">&#34;FROM python:3.11\nWORKDIR /usr/src/scitt-api-emulator\nRUN set -x &amp;&amp; export KEYRING=/usr/share/keyrings/nodesource.gpg &amp;&amp; curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | gpg --dearmor | tee \&#34;$KEYRING\&#34; &gt;/dev/null &amp;&amp; gpg --no-default-keyring --keyring \&#34;$KEYRING\&#34; --list-keys &amp;&amp; chmod a+r /usr/share/keyrings/nodesource.gpg &amp;&amp; . /usr/lib/os-release &amp;&amp; export VERSION=node_20.x &amp;&amp; export DISTRO=\&#34;${VERSION_CODENAME}\&#34; &amp;&amp; echo \&#34;deb [signed-by=$KEYRING] https://deb.nodesource.com/$VERSION $DISTRO main\&#34; | tee /etc/apt/sources.list.d/nodesource.list &amp;&amp; echo \&#34;deb-src [signed-by=$KEYRING] https://deb.nodesource.com/$VERSION $DISTRO main\&#34; | tee -a /etc/apt/sources.list.d/nodesource.list &amp;&amp; apt-get update -y &amp;&amp; apt-get install -y nodejs jq &amp;&amp; rm -rf /var/apt/lists/* &amp;&amp; mkdir -vp /opt/nodemon &amp;&amp; cd /opt/nodemon &amp;&amp; npm install nodemon &amp;&amp; echo &#39;export PATH=$PATH:/opt/nodemon/node_modules/.bin&#39; &gt;&gt; ~/.bashrc\nENV PATH=\&#34;/opt/nodemon/node_modules/.bin:$PATH\&#34;\nCOPY setup.py ./\nRUN pip install --no-cache-dir -e .[oidc,federation-activitypub-bovine]\nCOPY . .\nRUN pip install --no-cache-dir -e .[oidc,federation-activitypub-bovine]\nCMD scitt-emulator server --workspace workspace/ --tree-alg CCF --middleware scitt_emulator.federation_activitypub_bovine:SCITTFederationActivityPubBovine --middleware-config-path federation_workspace/config.json&#34;</span><span class="p">,</span>
  <span class="nt">&#34;image_name&#34;</span><span class="p">:</span> <span class="s2">&#34;scitt-api-emulator&#34;</span><span class="p">,</span>
  <span class="nt">&#34;owner&#34;</span><span class="p">:</span> <span class="s2">&#34;scitt-community&#34;</span><span class="p">,</span>
  <span class="nt">&#34;repository&#34;</span><span class="p">:</span> <span class="s2">&#34;scitt-api-emulator&#34;</span>
<span class="p">}</span>
</code></pre></div><ul>
<li>Extract the dockerfile from the manifest to edit it</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">cat scitt-api-emulator.manifest.json <span class="p">|</span> jq -r <span class="s1">&#39;.dockerfile&#39;</span> <span class="p">|</span> tee scitt-api-emulator.Dockerfile
</code></pre></div><ul>
<li>Update the manifest with the content of the dockerfile</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">manifest</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>cat scitt-api-emulator.manifest.json<span class="k">)</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span> <span class="nv">dockerfile</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>cat scitt-api-emulator.Dockerfile<span class="k">)</span><span class="s2">&#34;</span> jq -r <span class="s1">&#39;.dockerfile = env.dockerfile&#39;</span> &lt;<span class="o">(</span><span class="nb">echo</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">manifest</span><span class="si">}</span><span class="s2">&#34;</span><span class="o">)</span> <span class="p">|</span> tee scitt-api-emulator.manifest.json
</code></pre></div><ul>
<li>Export environment variables corresponding to JSON file keys</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">manifest</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>cat scitt-api-emulator.manifest.json<span class="k">)</span><span class="s2">&#34;</span>
<span class="nb">export</span> <span class="nv">owner</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>jq -r -n <span class="s1">&#39;env.manifest | fromjson | .owner&#39;</span><span class="k">)</span><span class="s2">&#34;</span>
<span class="nb">export</span> <span class="nv">repository</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>jq -r -n <span class="s1">&#39;env.manifest | fromjson | .repository&#39;</span><span class="k">)</span><span class="s2">&#34;</span>
<span class="nb">export</span> <span class="nv">branch</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>jq -r -n <span class="s1">&#39;env.manifest | fromjson | .branch&#39;</span><span class="k">)</span><span class="s2">&#34;</span>
<span class="nb">export</span> <span class="nv">commit</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>jq -r -n <span class="s1">&#39;env.manifest | fromjson | .commit&#39;</span><span class="k">)</span><span class="s2">&#34;</span>
<span class="nb">export</span> <span class="nv">dockerfile</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>jq -r -n <span class="s1">&#39;env.manifest | fromjson | .dockerfile&#39;</span><span class="k">)</span><span class="s2">&#34;</span>
<span class="nb">export</span> <span class="nv">image_name</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>jq -r -n <span class="s1">&#39;env.manifest | fromjson | .image_name&#39;</span><span class="k">)</span><span class="s2">&#34;</span>
<span class="nb">unset</span> build_args
<span class="nb">declare</span> -a build_args
<span class="k">while</span> <span class="nv">IFS</span><span class="o">=</span><span class="s1">$&#39;\n&#39;</span> <span class="nb">read</span> -r line<span class="p">;</span> <span class="k">do</span>
  build_args<span class="o">[</span><span class="si">${#</span><span class="nv">build_args</span><span class="p">[@]</span><span class="si">}</span><span class="o">]=</span><span class="s2">&#34;--build-arg&#34;</span>
  build_args<span class="o">[</span><span class="si">${#</span><span class="nv">build_args</span><span class="p">[@]</span><span class="si">}</span><span class="o">]=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">line</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="k">done</span> &lt; &lt;<span class="o">(</span>jq -n -r <span class="s1">&#39;[env.manifest | fromjson | .build_args | fromjson | .[] | (.[0] + &#34;=&#34; + .[1])] | join(&#34;\n&#34;)&#39;</span><span class="o">)</span>
</code></pre></div><ul>
<li>Build the container image from the manifest</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">(</span><span class="nb">set</span> -x <span class="se">\
</span><span class="se"></span>  <span class="o">&amp;&amp;</span> <span class="nb">export</span> <span class="nv">tempdir</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>mktemp -d<span class="k">)</span><span class="s2">&#34;</span> <span class="se">\
</span><span class="se"></span>  <span class="o">&amp;&amp;</span> <span class="nb">trap</span> <span class="s2">&#34;rm -rf </span><span class="si">${</span><span class="nv">tempdir</span><span class="si">}</span><span class="s2">&#34;</span> EXIT <span class="se">\
</span><span class="se"></span>  <span class="o">&amp;&amp;</span> <span class="nb">export</span> <span class="nv">TARGET_DIR</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">tempdir</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span><span class="se"></span>  <span class="o">&amp;&amp;</span> <span class="nb">export</span> <span class="nv">TARGET_REPO_URL</span><span class="o">=</span><span class="s2">&#34;https://github.com/</span><span class="si">${</span><span class="nv">owner</span><span class="si">}</span><span class="s2">/</span><span class="si">${</span><span class="nv">repository</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span><span class="se"></span>  <span class="o">&amp;&amp;</span> <span class="nb">export</span> <span class="nv">TARGET_COMMIT</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">commit</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span><span class="se"></span>  <span class="o">&amp;&amp;</span> mkdir -p <span class="s2">&#34;</span><span class="si">${</span><span class="nv">TARGET_DIR</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span><span class="se"></span>  <span class="o">&amp;&amp;</span> <span class="nb">cd</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">TARGET_DIR</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span><span class="se"></span>  <span class="o">&amp;&amp;</span> git init <span class="se">\
</span><span class="se"></span>  <span class="o">&amp;&amp;</span> git remote add origin <span class="s2">&#34;</span><span class="si">${</span><span class="nv">TARGET_REPO_URL</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span><span class="se"></span>  <span class="o">&amp;&amp;</span> git fetch origin <span class="s2">&#34;</span><span class="si">${</span><span class="nv">TARGET_COMMIT</span><span class="si">}</span><span class="s2">&#34;</span> --depth <span class="m">1</span> <span class="se">\
</span><span class="se"></span>  <span class="o">&amp;&amp;</span> git reset --hard <span class="s2">&#34;</span><span class="si">${</span><span class="nv">TARGET_COMMIT</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span><span class="se"></span>  <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">dockerfile</span><span class="si">}</span><span class="s2">&#34;</span> <span class="p">|</span> podman build --format docker --progress plain <span class="s2">&#34;</span><span class="si">${</span><span class="nv">build_args</span><span class="p">[@]</span><span class="si">}</span><span class="s2">&#34;</span> -t <span class="s2">&#34;</span><span class="si">${</span><span class="nv">image_name</span><span class="si">}</span><span class="s2">&#34;</span> -f - <span class="s2">&#34;</span><span class="si">${</span><span class="nv">tempdir</span><span class="si">}</span><span class="s2">&#34;</span><span class="o">)</span>
</code></pre></div><ul>
<li><a href="https://github.com/kcp-dev/kcp">https://github.com/kcp-dev/kcp</a>
<ul>
<li>CRD</li>
<li>GitHub org: dffml</li>
<li>Goal: Spin me #1401 repos based off YAML definition, hook them up to SCITT via webhook, give them some self hosted runners</li>
</ul>
</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">skopeo copy docker://localhost:5000/ssh_public_keys/pdxjohnny dir:/tmp/ssh_public_keys
<span class="o">(</span>
  <span class="k">for</span> digest in <span class="k">$(</span>cat /tmp/ssh_public_keys/manifest.json <span class="p">|</span> jq -r <span class="s1">&#39;.layers[].digest&#39;</span><span class="k">)</span><span class="p">;</span> <span class="k">do</span>
    <span class="nv">layer_tarball</span><span class="o">=</span><span class="si">${</span><span class="nv">digest</span><span class="p">/sha256:/</span><span class="si">}</span>
    tar -C /tmp/certs -xzvf /tmp/ssh_public_keys/<span class="si">${</span><span class="nv">layer_tarball</span><span class="si">}</span> --to-stdout --wildcards --no-anchored <span class="s1">&#39;*.pub&#39;</span>
  <span class="k">done</span>
<span class="o">)</span> &gt; authorized_keys
</code></pre></div><ul>
<li>TODO
<ul>
<li>[ ] Ensure <code>build_arg</code> quoting works as intended</li>
<li>[ ] For CWT issuer derive key from SSH private key and resolve via github ssh keys endpoint
<ul>
<li><a href="https://docs.github.com/en/rest/users/ssh-signing-keys?apiVersion=2022-11-28">https://docs.github.com/en/rest/users/ssh-signing-keys?apiVersion=2022-11-28</a></li>
<li><a href="https://github.com/pdxjohnny.keys">https://github.com/pdxjohnny.keys</a></li>
<li><a href="https://github.com/settings/keys">https://github.com/settings/keys</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2023-11-07-ietf-118-software-updates-for-internet-of-thingshttpsdatatrackerietforgmeeting118materialsagenda-118-suit-01-wg-meeting">2023-11-07 IETF 118 <a href="https://datatracker.ietf.org/meeting/118/materials/agenda-118-suit-01">Software Updates for Internet of Things</a> WG Meeting</h2>
<ul>
<li><a href="https://notes.ietf.org/notes-ietf-118-suit">https://notes.ietf.org/notes-ietf-118-suit</a></li>
<li>Dave our friend from NIST is co-chair it looks like</li>
<li>SUIT manifest format
<ul>
<li>Submitted to IESG, in process to address 80 comments</li>
<li>Trust domains completed last fall, waiting for draft version update</li>
<li>SUIT Manifest Extensions for Multiple Trust Domains</li>
</ul>
</li>
<li>Update Manifest Extension for SUIT Manifest, more feedback needed on this doc</li>
<li>Firmware Encryption with SUIT manifest</li>
<li>Strong Assertion of IoT Network Access Requirements</li>
</ul>
<h1 id="2023-11-08-engineering-logs">2023-11-08 Engineering Logs</h1>
<h2 id="2023-11-08-ietf-118-remote-attestation-procedures-rats-meeting">2023-11-08 IETF 118 Remote ATtestation ProcedureS (RATS) Meeting</h2>
<ul>
<li><a href="https://datatracker.ietf.org/doc/agenda-118-rats/">https://datatracker.ietf.org/doc/agenda-118-rats/</a></li>
<li><a href="https://datatracker.ietf.org/meeting/118/session/rats/">https://datatracker.ietf.org/meeting/118/session/rats/</a></li>
<li><a href="https://www.rfc-editor.org/info/rfc9334">https://www.rfc-editor.org/info/rfc9334</a></li>
<li>10:35 - 10:50 Formal specification of attestation in Confidential Computing
<ul>
<li>Muhammad Usama Sardar</li>
<li><a href="https://datatracker.ietf.org/doc/draft-dthaler-rats-endorsements/">https://datatracker.ietf.org/doc/draft-dthaler-rats-endorsements/</a></li>
<li><a href="https://github.com/intel/dffml/files/13295407/slides-118-rats-formal-specification-of-attestation-in-confidential-computing-00.1.pdf">slides-118-rats-formal-specification-of-attestation-in-confidential-computing-00.pdf</a></li>
<li>TEE to TEE attestation
<ul>
<li>This is what we care about for our decentralized stream of consciousnesses using SCITT</li>
</ul>
</li>
<li>Take home point: &quot;Without local attestation you cannot have remote attestation&quot;</li>
<li><a href="https://github.com/CCC-Attestation/formal-spec-TEE">https://github.com/CCC-Attestation/formal-spec-TEE</a></li>
</ul>
</li>
</ul>
<p><img src="https://github.com/intel/dffml/assets/5950433/6ed2b987-ef6e-40b6-a36d-c48b75cdb0fe" alt="image"></p>
<p><img src="https://github.com/intel/dffml/assets/5950433/95a51521-dc77-4ddb-bac2-65f309d24d25" alt="image"></p>
<p><img src="https://github.com/intel/dffml/assets/5950433/3298a3a8-94a7-4397-aee7-ff8e3deb0646" alt="image"></p>
<p><img src="https://github.com/intel/dffml/assets/5950433/96c12c35-25ed-44e6-90fd-a42366c325fc" alt="image"></p>
<p><img src="https://github.com/intel/dffml/assets/5950433/c6423d67-319c-4240-bbe1-de9481008e5e" alt="image"></p>
<p><img src="https://github.com/intel/dffml/assets/5950433/0c3f2bb2-3bbc-45b3-b26d-fda7cf385cf9" alt="image"></p>
<h2 id="2023-11-08-pdxjohnny-engineering-logs">2023-11-08 @pdxjohnny Engineering Logs</h2>
<ul>
<li>Application of software supply chain security practices to AI/ML models and data, recently demo'd some work at IETF 118 <a href="https://scitt.io/">SCITT</a> WG meeting on federation of new (signed) statements (in AI/ML case these may be trust attestations for trust in model or data) added to Transparency Service's (TS) append only log: <a href="https://github.com/scitt-community/scitt-api-emulator/blob/72a75511d7840d4062741185ec6879b585ee8c07/docs/federation_activitypub.md#federation-via-activitypub">https://github.com/scitt-community/scitt-api-emulator/blob/72a75511d7840d4062741185ec6879b585ee8c07/docs/federation_activitypub.md#federation-via-activitypub</a>
<ul>
<li>Future downstream work of this includes ingestion of federated TS statements who's subjects may result in re-training, re-deployment, allow/denylisting of models, data, embeddings.</li>
</ul>
</li>
<li>TODO
<ul>
<li>[ ] Hosted SCITT API Emulator
<ul>
<li>[ ] Heroku or something free</li>
<li>[ ] <code>emulator.scitt.io</code> DNS record</li>
<li>[ ] Add to datatracker</li>
<li>[ ] <code>index.html</code> with some examples and links</li>
<li>[ ] Middleware for GitHub webhook data -&gt; statement
<ul>
<li>[ ] GitHub Actions workflow for SBOM statement on release
<ul>
<li>[ ] Source SBOM statement using dependabot graph
<ul>
<li>[x] Looks like we can get SBOMs of repos we don't own
<ul>
<li><code>gh sbom -r actions/checkout</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>[ ] ramfs for workspace
<ul>
<li><code>export ramfs=$(mktemp -d) &amp;&amp; sudo mount -t ramfs -o size=20g ramfs &quot;${ramfs}&quot; &amp;&amp; sudo chown -R &quot;${USER}:${USER}&quot; &quot;${ramfs}&quot;</code></li>
</ul>
</li>
<li>[ ] Periodic restart to wipe</li>
</ul>
</li>
<li>[ ] Work with A.J. to create list of to-dos for emulator updates
<ul>
<li>[ ] SD-CWT
<ul>
<li>[ ] Cedrics entry_id encoding stuff</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2023-11-08-transfer-digital-credentials-securely-tigress-meeting">2023-11-08 Transfer dIGital cREdentialS Securely (TIGRESS) Meeting</h2>
<ul>
<li><a href="https://datatracker.ietf.org/meeting/118/session/tigress">https://datatracker.ietf.org/meeting/118/session/tigress</a></li>
</ul>
<h2 id="2023-11-10-pdxjohnny-engineering-logs">2023-11-10 @pdxjohnny Engineering Logs</h2>
<ul>
<li>Cristy: Don't make me thumbprint a machine for door access
<ul>
<li>Moral: Make sure we don't introduce any security or privacy issues at large along our quest for transparency</li>
<li><a href="https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/79#issuecomment-1797016940">https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/79#issuecomment-1797016940</a>
<ul>
<li>It could be interesting for SCITT services to declare federation protocols they support via exported service parameters. Different instances my have different threat models and require different levels of assurance around CIA properties of federation protocols.</li>
</ul>
</li>
</ul>
</li>
<li>Let's get the decentralized event loop running across the poly repo space
<ul>
<li><a href="https://docs.dagster.io/_apidocs/">https://docs.dagster.io/_apidocs/</a>
<ul>
<li><a href="https://docs.dagster.io/_apidocs/libraries/dagster-pipes">https://docs.dagster.io/_apidocs/libraries/dagster-pipes</a></li>
<li><a href="https://docs.dagster.io/deployment/run-coordinator">https://docs.dagster.io/deployment/run-coordinator</a>
<ul>
<li><a href="https://docs.dagster.io/_apidocs/internals#dagster._core.run_coordinator.QueuedRunCoordinator">https://docs.dagster.io/_apidocs/internals#dagster._core.run_coordinator.QueuedRunCoordinator</a></li>
</ul>
</li>
<li><a href="https://docs.dagster.io/_apidocs/internals#executors-experimental">https://docs.dagster.io/_apidocs/internals#executors-experimental</a></li>
<li><a href="https://docs.dagster.io/_apidocs/assets">https://docs.dagster.io/_apidocs/assets</a></li>
</ul>
</li>
</ul>
</li>
<li>Initial update of SCITT API Emulator <code>scitt.create_claim</code> to match arch PR merge <a href="https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/commit/a4645e4bc3e78ad5cfd9f8347c7e0ac8267c1079">https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/commit/a4645e4bc3e78ad5cfd9f8347c7e0ac8267c1079</a>
<ul>
<li><a href="https://github.com/scitt-community/scitt-api-emulator/commit/61bcf5dd74dc802d1c0df2719c48756a464c715a">https://github.com/scitt-community/scitt-api-emulator/commit/61bcf5dd74dc802d1c0df2719c48756a464c715a</a></li>
</ul>
</li>
</ul>
<p><a href="https://asciinema.org/a/620307"><img src="https://asciinema.org/a/620307.svg" alt="asciicast-scitt-api-emulator-cwt-update"></a></p>
<ul>
<li><a href="https://pages.nist.gov/metaschema/specification/overview/">https://pages.nist.gov/metaschema/specification/overview/</a>
<ul>
<li>A.J. and Daveâ€™s method for world domination, plus SWID BOM</li>
</ul>
</li>
<li>TODO
<ul>
<li>[ ] Need SCITT alignment items before end of IETF 118
<ul>
<li>[ ] <a href="https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/79#issuecomment-1797016940">https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/79#issuecomment-1797016940</a>
<ul>
<li>[ ] We need to have an open line of discussion around how to ensure we have side-channelless channels where possible for federation. We don't want the same type of issue Chris Lemmons was talking about with WIMSE composite claims</li>
</ul>
</li>
<li>[ ] <a href="https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/96">https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/96</a>
<ul>
<li>[ ] We need to figure out what service parameters are exported and how</li>
</ul>
</li>
<li>[ ] SCITT API Emulator updates
<ul>
<li>[ ] SD-CWT
<ul>
<li><a href="https://or13.github.io/draft-steele-cose-hash-envelope/draft-steele-cose-hash-envelope.html">https://or13.github.io/draft-steele-cose-hash-envelope/draft-steele-cose-hash-envelope.html</a></li>
<li><a href="https://github.com/OR13/draft-steele-cose-hash-envelope">https://github.com/OR13/draft-steele-cose-hash-envelope</a></li>
<li><a href="https://datatracker.ietf.org/doc/html/draft-birkholz-cose-cometre-ccf-profile-00">https://datatracker.ietf.org/doc/html/draft-birkholz-cose-cometre-ccf-profile-00</a></li>
<li><a href="https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/pull/123/files?short_path=585fb42#diff-585fb424519b79cf000445f3425fa56d328cbaca5d2a622740ddc4e5ca91dbe1">https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/pull/123/files?short_path=585fb42#diff-585fb424519b79cf000445f3425fa56d328cbaca5d2a622740ddc4e5ca91dbe1</a></li>
<li><a href="https://ietf-wg-scitt.github.io/draft-ietf-scitt-architecture/draft-ietf-scitt-architecture.html">https://ietf-wg-scitt.github.io/draft-ietf-scitt-architecture/draft-ietf-scitt-architecture.html</a></li>
<li><a href="https://github.com/ietf-scitt/draft-birkholz-scitt-scrapi">https://github.com/ietf-scitt/draft-birkholz-scitt-scrapi</a></li>
<li><a href="https://github.com/dajiaji/python-cwt">https://github.com/dajiaji/python-cwt</a></li>
<li><a href="https://python-cwt.readthedocs.io/en/stable/claims.html">https://python-cwt.readthedocs.io/en/stable/claims.html</a></li>
<li><a href="https://github.com/TimothyClaeys/pycose/blob/master/pycose/headers.py">https://github.com/TimothyClaeys/pycose/blob/master/pycose/headers.py</a></li>
<li><a href="https://github.com/scitt-community/scitt-api-emulator/pull/39">https://github.com/scitt-community/scitt-api-emulator/pull/39</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>[ ] Scripted spin up of emulator
<ul>
<li><a href="https://github.com/digitalocean/do-agent/issues/305">https://github.com/digitalocean/do-agent/issues/305</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2023-11-10-ietf-118-key-transparency-keytrans-meeting">2023-11-10 IETF 118 Key Transparency (KEYTRANS) Meeting</h2>
<ul>
<li><a href="https://datatracker.ietf.org/meeting/118/materials/agenda-118-keytrans-00">https://datatracker.ietf.org/meeting/118/materials/agenda-118-keytrans-00</a></li>
<li><a href="https://datatracker.ietf.org/doc/draft-mcmillion-keytrans-architecture/">https://datatracker.ietf.org/doc/draft-mcmillion-keytrans-architecture/</a></li>
<li><a href="https://notes.ietf.org/notes-ietf-118-keytrans">https://notes.ietf.org/notes-ietf-118-keytrans</a></li>
<li>Concerns about privacy</li>
<li>Desire federation</li>
<li>SCITT sounds like a solid option for a backing Transparency Service</li>
<li>Difficult to reason about security properties without defined list of requirements</li>
<li>Is there a core set of security and privacy gauntness for which all implementations are isomorphic
<ul>
<li>If I don't say the same thing as everyone else, everyone notices
<ul>
<li>KERI ADCD (Authenticated Chained Data Containers) as an implementation of SCITT sounds ideal for this, as it provides cryptographically assured duplicity detection.</li>
</ul>
</li>
</ul>
</li>
<li>Phillip
<ul>
<li>Work factor</li>
<li>What are the properties of notary logs and who do they apply to keys</li>
<li>Notary chain is really a lattice</li>
<li>In Phillip's system every user and service maintains their own notary chain, therefore making it a lattice. Everything is going to link to everything because it's inherently a graph. When you want to go analyze, which notaries do you trust?</li>
<li>Phillip Hallam-Baker (in chat): That is my point. Once there is a notary log, you can use it to fix the time of any assertion you like proving it was made after the date of a particular apex and before the date of a set of apexes with dependency chains.
<ul>
<li>Ref: Vol 6: Time Travel with Us</li>
</ul>
</li>
</ul>
</li>
<li>Missing sections
<ul>
<li>Need support for &quot;sealed-sender&quot;
<ul>
<li>Helps protect against social graph-ness of</li>
</ul>
</li>
<li>Need discussion on how federation would work</li>
<li>Need discussion on privacy law compliance and detailed deletion of user data</li>
</ul>
</li>
<li>Current draft says requested changes are applied immediately: No need for interim inclusion proofs
<ul>
<li>Benefits</li>
<li>Simplifies protocol description and operation</li>
<li>Supports deployment that want a strict KT regimen</li>
<li>Example: If you wanted you could begin using the key immediately, and check back on the log in an hours</li>
</ul>
</li>
<li>Daniel Huigens from Proton says they are working on deploying a KT implementation
<ul>
<li><a href="https://github.com/ProtonMail">https://github.com/ProtonMail</a>
<ul>
<li>Golang SMTP server: <a href="https://github.com/ProtonMail/go-smtp">https://github.com/ProtonMail/go-smtp</a>
<ul>
<li>Golang IMAP server: <a href="https://github.com/ProtonMail/gluon">https://github.com/ProtonMail/gluon</a></li>
</ul>
</li>
<li>Golang RFC 5322 Internet Message Format library: <a href="https://github.com/emersion/go-message">https://github.com/emersion/go-message</a></li>
</ul>
</li>
</ul>
</li>
<li>Everyone thanks Brendan for the work and agrees we should adopt</li>
<li>Rohan says we should create a straw-person set of requirements and wrote it and put it somewhere. Simultaneously with adoption.
<ul>
<li>Adoption means that we agree to start work on it</li>
<li>Needs to be taken to the list regardless, everything in IETF must go through the list</li>
</ul>
</li>
<li>Simon Friedberger: We really need privacy guarantees within the doc, don't want people cross signing keys and leaking the social graph</li>
<li>Esha Ghosh: <a href="https://github.com/intel/dffml/files/13317969/slides-118-keytrans-security-properties-of-key-transparency-00.pdf">slides-118-keytrans-security-properties-of-key-transparency-00.pdf</a>
<ul>
<li>Verify the proofs against the latest TreeHead, alert users if proofs do not check out</li>
<li>Security Properties
<ul>
<li>When log operator is honest: Correctness Properties</li>
<li>We will have consistency properties when log operator behaves maliciously</li>
</ul>
</li>
<li>Correctness
<ul>
<li>When a user looks up a key, result is the same that any other user seraching for the same key would have seen</li>
<li>When a user modifies a key, other users will be notified when it's modified</li>
</ul>
</li>
<li>Consistency
<ul>
<li>When user looks up a key and the result is not the same results when another searching for a key would have see it will be detected</li>
<li>When a user modifies a key</li>
</ul>
</li>
<li>Consistency properties
<ul>
<li>Only the owner of a key will be able to say a distrubted key is fake
<ul>
<li>The owner will need to lookup own key in the log often</li>
<li>Each time owners key changes must check that key change has been correctly included in the log</li>
<li>Owner needs to remember ephocs they changed their key (hmmm)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>TODO
<ul>
<li>[ ] Specify the privacy guarantees</li>
<li>[ ] Review compliance requirements about removing information from logs on mailing list</li>
</ul>
</li>
</ul>
<h2 id="2023-11-10-ietf-118-oauth-wg-friday-meeting">2023-11-10 IETF 118 OAuth WG Friday Meeting</h2>
<ul>
<li><a href="https://datatracker.ietf.org/meeting/118/session/oauth/">https://datatracker.ietf.org/meeting/118/session/oauth/</a></li>
<li><a href="https://datatracker.ietf.org/meeting/118/materials/agenda-118-oauth-03">https://datatracker.ietf.org/meeting/118/materials/agenda-118-oauth-03</a></li>
<li>Transaction Tokens â€“ George Fletcher (20 min)
<ul>
<li><a href="https://datatracker.ietf.org/doc/draft-tulshibagwale-oauth-transaction-tokens/">https://datatracker.ietf.org/doc/draft-tulshibagwale-oauth-transaction-tokens/</a></li>
<li><a href="https://github.com/intel/dffml/files/13319236/IETF.118.-.Transaction.Tokens.pdf">IETF 118 - Transaction Tokens.pdf</a></li>
<li>Ned Smith: Overlap with WIMSE BoF on steps 4-6</li>
<li>Brain Campbell has concerns over erroneous OAuth usage in document. Conceptually it's good work, but the document has issues</li>
<li>
<blockquote>
<p><img src="https://github.com/intel/dffml/assets/5950433/63e499d0-5aa6-46e2-bdd3-74b48323a11f" alt="transaction-tokens-overview-ietf-118-oauth-wg-friday"></p>
</blockquote>
</li>
</ul>
</li>
<li>Identity Chaining Across Trust Domains
<ul>
<li>Preserving context as transactions move across trust domains</li>
<li>Similar to some of the stuff covered in past UCAN meetings</li>
<li><a href="https://www.ietf.org/archive/id/draft-richer-wimse-token-container-00.html">https://www.ietf.org/archive/id/draft-richer-wimse-token-container-00.html</a></li>
<li><a href="https://github.com/intel/dffml/files/13319280/slides-118-oauth-sessc-ietf-118-identity-chaining-final-00.pdf">slides-118-oauth-sessc-ietf-118-identity-chaining-final-00.pdf</a></li>
<li>
<blockquote>
<p><img src="https://github.com/intel/dffml/assets/5950433/c66b8223-b0f6-41ee-b7f0-6a8ba0cf6468" alt="image"></p>
</blockquote>
</li>
</ul>
</li>
<li>Ned Smith: Attestation in Dynamic Client Registration
<ul>
<li>Draft supports attestation within the registration endpoint, attestation for base client auth draft aligned</li>
<li>Based on RATS arch in terms of terminology and concepts</li>
<li>Describes communication patterns for background check and passport models</li>
<li>Passport is something that says this client is within a confidential compute environment. AS policy says if the client is within a valid CCE, provision the Dynamic Client Registration information into it. Downstream servers say let's use this AS for this check (similar to TS registration policies being exported)</li>
<li>Prototype underway</li>
<li>
<blockquote>
<p><img src="https://github.com/intel/dffml/assets/5950433/20ffb82e-3cf8-4e9f-9c2d-d04fee4d3fba" alt="rats-based-workload-token-grant"></p>
</blockquote>
</li>
<li>John (in chat): In this model, couldn't the AS be within the client? Since we already trust it due to it's attestation result? Not always, just as an option. Or does that break some guarantees I'm not seeing</li>
</ul>
</li>
<li>Aaron: Global Token Revocation RFC
<ul>
<li>Sec Event Subject ID Draft dependent</li>
<li>MUST allow for revoking refresh tokens, SHOULD revoke access tokens, MUST prevent issuing new access tokens and refresh tokens without re-authenticating the user</li>
<li>What's the point? Terminate all existing tokens and re-authenticate the user!</li>
</ul>
</li>
</ul>
<h1 id="2023-11-11-engineering-logs">2023-11-11 Engineering Logs</h1>
<h2 id="2023-11-11-pdxjohnny-engineering-logs">2023-11-11 @pdxjohnny Engineering Logs</h2>
<ul>
<li>Updated ADR 7: <a href="https://github.com/intel/dffml/blob/alice/docs/arch/0007-A-GitHub-Public-Bey-and-TPM-Based-Supply-Chain-Security-Mitigation-Option.rst#a-github-public-key-and-tpm-based-supply-chain-security-mitigation-option">A GitHub Public Key and TPM Based Supply Chain Security Mitigation Option</a>
<ul>
<li>With Federated forges (long term target in WASM environment) we can leverage this ssh method ideally with an attested Transparency Service then we can get a receipt, issused with an ssh ECDSA-384 key.</li>
<li>CWT issuer is the keys endpoint.</li>
<li>We can use <a href="https://github.com/tpm2-software/tpm2-pkcs11">https://github.com/tpm2-software/tpm2-pkcs11</a> to bind the keys to a TPM owned by the developer.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">ssh-keygen -q -f ~/.ssh/ecdsa_384 -t ecdsa -b <span class="m">384</span> -N <span class="s1">&#39;&#39;</span> <span class="o">&lt;&lt;&lt;</span>y
cat ~/.ssh/ecdsa_384 <span class="p">|</span> python -c <span class="s1">&#39;import sys; from cryptography.hazmat.primitives import serialization; print(serialization.load_ssh_private_key(sys.stdin.buffer.read(), password=None).private_bytes(encoding=serialization.Encoding.PEM, format=serialization.PrivateFormat.PKCS8, encryption_algorithm=serialization.NoEncryption()).decode().rstrip())&#39;</span> <span class="p">|</span> scitt-emulator client create-claim --issuer did:web:example.com --content-type application/json --payload <span class="s1">&#39;{&#34;sun&#34;: &#34;yellow&#34;}&#39;</span> --out claim.cose --subject <span class="s2">&#34;ssh-test&#34;</span> --private-key-pem /dev/stdin
ssh-keygen -q -f /dev/stdout -t ecdsa -b <span class="m">384</span> -N <span class="s1">&#39;&#39;</span> <span class="o">&lt;&lt;&lt;</span>y <span class="p">|</span> python -c <span class="s1">&#39;import sys; from cryptography.hazmat.primitives import serialization; print(serialization.load_ssh_private_key(sys.stdin.buffer.read(), password=None).private_bytes(encoding=serialization.Encoding.PEM, format=serialization.PrivateFormat.PKCS8, encryption_algorithm=serialization.NoEncryption()).decode().rstrip())&#39;</span> <span class="p">|</span> scitt-emulator client create-claim --issuer did:web:example.com --content-type application/json --payload <span class="s1">&#39;{&#34;sun&#34;: &#34;yellow&#34;}&#39;</span> --out claim.cose --subject <span class="s2">&#34;ssh-test&#34;</span> --private-key-pem /dev/stdin
</code></pre></div><ul>
<li>GitHub only exports SSH keys with Key type as &quot;Authentication Key&quot; at <a href="https://github.com/pdxjohnny.keys">https://github.com/pdxjohnny.keys</a></li>
</ul>
<p><img src="https://github.com/intel/dffml/assets/5950433/5c185259-d269-4346-b111-e19982e4c1d4" alt="image"></p>
<ul>
<li>TODO
<ul>
<li>[ ] Investigate binding keys to a FIDO style key (things like YubiKeys)</li>
<li>[ ] Do we have the opportunity to reduce dependence at large on OAuth fulcio style flows? Pretty sure you don't even need fulcio if you have your ssh key</li>
</ul>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Note Taking</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/notes/</id>
    <updated>2022-03-30T06:00:00Z</updated>
    <published>2022-03-30T06:00:00Z</published>
    <content type="html"><![CDATA[<p>Notes on taking notes</p>
<h2 id="format">Format</h2>
<pre><code># YYYY-MM-DD Title or Meeting Name

- NTT
  - Ensure each of these are brought up
- Topic 1
  - Notes go here organized by topic
- TODO
  - Generic future actions
- Next Steps
  - ARs
    - Name will ...
  - Generic near term future actions
</code></pre><h2 id="shorthand">Shorthand</h2>
<p>NTT - Need To Talk about these things in the meeting, checklist of things that must be addressed or brought up</p>]]></content>
  </entry>
  <entry>
    <title>DID Discussion</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/2022-03-02-did-twitter-space/</id>
    <updated>2022-03-02T11:45:00Z</updated>
    <published>2022-03-02T11:45:00Z</published>
    <content type="html"><![CDATA[<h1 id="2022-03-02-did-discussion">2022-03-02 DID Discussion</h1>
<ul>
<li><a href="https://twitter.com/techgirl1908/status/1498402992260890628">https://twitter.com/techgirl1908/status/1498402992260890628</a></li>
<li><a href="https://www.w3.org/TR/did-core/">https://www.w3.org/TR/did-core/</a></li>
<li>Personal datastore standard
<ul>
<li>Will enhance ability to store application data using user keypairs to record metadata on chain and decrypt using private key</li>
</ul>
</li>
<li>Microsoft is integrating DID support to Active Directory</li>
<li>Privacy preserving angle is only useful once you have conveyance
<ul>
<li>People will hand over stuff t</li>
<li>Need things to work in browser with no plugins, directly to get mass adoption</li>
</ul>
</li>
<li>Google has moved to a system called Macaroons
<ul>
<li><a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/41892.pdf">https://storage.googleapis.com/pub-tools-public-publication-data/pdf/41892.pdf</a></li>
<li>Each service has it's own signing authority</li>
<li>This scales better</li>
</ul>
</li>
<li>System that is like OAuth but with fewer steps
<ul>
<li>Having it all work locally and then automatically work across services without prenegotiated tokens is ideal</li>
<li><a href="https://ucan.xyz/">https://ucan.xyz/</a></li>
</ul>
</li>
<li>Change management and inclusivity
<ul>
<li>What if people don't have smart phones or electricity?
<ul>
<li>What if you have certain data encrypted on terminals
<ul>
<li>Very difficult problem, Microsoft was not able to solve it</li>
</ul>
</li>
<li>In Kim's mind this is the biggest risk
<ul>
<li>Can't assume mobile phone, bandwidth</li>
<li>Systems are not designed with reliance in mind, we need to provide the layer of resiliency</li>
<li>Want to think about distributed systems as a layer that can be used to bootstrap trust</li>
<li>Need to ensure people can use the systems we are designing</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Where are the self issued routing tables?</li>
<li>How come we don't have hundreds of demos?
<ul>
<li>Why are we waiting for all the specs to be approved?
<ul>
<li>We are not, we are building in parallel</li>
<li>We want feedback</li>
<li>Standards help us with interoperability tests</li>
<li>How do you know that everyone is interpreting the standards in the same way</li>
</ul>
</li>
<li>What are the biggest blockers preventing demos?
<ul>
<li>Microsoft was going after educational credentials and workplace credentials</li>
<li>Microsoft was not so focused on authentication
<ul>
<li>There was no strategy around DID</li>
</ul>
</li>
<li>Personal Datastore standard is what unlocks the floodgates
<ul>
<li>When you pair these with DID you get the foundations of distributed compute
<ul>
<li><a href="https://twitter.com/csuwildcat/status/1379804281381953537">https://twitter.com/csuwildcat/status/1379804281381953537</a></li>
<li>First you need Identity</li>
<li>Then you need Storage</li>
<li>Then you can have Distrusted Compute</li>
</ul>
</li>
<li>If I have DIDs and datastores, then I have created a distributed network</li>
<li>You have essentially created the Signal Network
<ul>
<li>Can I have an ID and permission to store data</li>
<li><a href="https://techcommunity.microsoft.com/t5/azure-active-directory-identity/identity-hubs-as-personal-datastores/ba-p/389577">https://techcommunity.microsoft.com/t5/azure-active-directory-identity/identity-hubs-as-personal-datastores/ba-p/389577</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>ION has been out for a year as 1.0</li>
<li>Today, can I used DID for auth?
<ul>
<li>OIDC for SSI approaches
<ul>
<li>Three specs
<ul>
<li>Issuing ID in wallet, claims can be issued to
<ul>
<li>Functions as DID</li>
<li>Can participate in different wallet central protocols around authentication</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Get involved
<ul>
<li>Join WC3 credentials community</li>
<li>Join Decentralized Identify Foundation
<ul>
<li>Membership required for orgs of over 1000 people</li>
<li>Talked to Ned Smith about our involvement</li>
</ul>
</li>
</ul>
</li>
<li>Use cases
<ul>
<li>DIDs enable change of ownership
<ul>
<li>Lifecycle concerns are answered</li>
<li>When you need to prove anything about yourself, it's portable, you know who's getting your data</li>
<li>Claim can be anything
<ul>
<li>Captures some skill about a person, or maybe some attribute</li>
<li>Can be issued by a peer
<ul>
<li>That's verifiable</li>
<li>Up to consumer of that information what they want to do with it</li>
<li>Remove gatekeeping
<ul>
<li>You have to have claim X from A, we'll maybe I'll accept Y + Z from B instead</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Every time you author work then you should link it to your DID</li>
<li>Helps with API flexibility / interoperability between applications</li>
</ul>
</li>
<li>Identity Hubs and DIF
<ul>
<li>TBDecks</li>
</ul>
</li>
<li>Verity Decntrialized Identity</li>
<li>Verifiable Crednetials
<ul>
<li>Allow people to move their data with you</li>
</ul>
</li>
<li>Brooklyn Zelenka
<ul>
<li><a href="https://whitepaper.fission.codes/">https://whitepaper.fission.codes/</a>
<ul>
<li><a href="https://github.com/digitalbazaar/did-method-key/">https://github.com/digitalbazaar/did-method-key/</a></li>
</ul>
</li>
<li>End user can decide what gets read or written</li>
<li>Allow for serivces, background jobs, to do lots of things</li>
<li>Working on ucan spec
<ul>
<li>Ned Smith mentioned it would be good to have CWTs involved</li>
<li>Discussion around CWT/DICE and other transport/format support in ucan here: <a href="https://github.com/ucan-wg/spec/discussions/18">https://github.com/ucan-wg/spec/discussions/18</a></li>
</ul>
</li>
</ul>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Seminal articles / papers</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/stories/</id>
    <updated>2021-10-26T22:57:07Z</updated>
    <published>2021-10-26T22:57:07Z</published>
    <content type="html"><![CDATA[<div class="document">


<p><a class="reference external" href="https://aphyr.com/posts/341-hexing-the-technical-interview">https://aphyr.com/posts/341-hexing-the-technical-interview</a></p>
<p><a class="reference external" href="http://www.catb.org/jargon/html/story-of-mel.html">http://www.catb.org/jargon/html/story-of-mel.html</a></p>
</div>]]></content>
  </entry>
  <entry>
    <title>Git</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/git/</id>
    <updated>2021-07-16T16:00:00Z</updated>
    <published>2021-07-16T16:00:00Z</published>
    <content type="html"><![CDATA[<h2 id="cherry-pick-last-n-commits-off-a-branch">Cherry pick last N commits off a branch</h2>
<p>Picks the last two commits in the order they appear in history on master</p>
<pre><code class="language-console" data-lang="console">$ git cherry-pick master~2..master
</code></pre><h2 id="rebase-bulk-rename-commit-messages">Rebase bulk rename commit messages</h2>
<pre><code class="language-console" data-lang="console">git filter-branch --msg-filter 'sed &quot;s/Refs: #xxxxx/Refs: #22917/g&quot;' master..my_branch
</code></pre><blockquote>
<p><a href="https://stackoverflow.com/questions/14332551/whats-the-fastest-way-to-edit-hundreds-of-git-commit-messages">https://stackoverflow.com/questions/14332551/whats-the-fastest-way-to-edit-hundreds-of-git-commit-messages</a></p>
</blockquote>
<h2 id="configure-git-to-rebase-on-pull-instead-of-merge">Configure git to rebase on pull instead of merge</h2>
<pre><code class="language-console" data-lang="console">git config --global pull.rebase true
</code></pre><h2 id="arange-patch-files-by-date">Arange patch files by date</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">Arange patch files given as args and outputs the patch files ordered by the date
</span><span class="s2">within the patch file.
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">pathlib</span>
<span class="kn">import</span> <span class="nn">argparse</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">itertools</span>


<span class="k">def</span> <span class="nf">make_parser</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span>
        <span class="n">description</span><span class="o">=</span><span class="vm">__doc__</span><span class="p">,</span>
        <span class="n">formatter_class</span><span class="o">=</span><span class="n">argparse</span><span class="o">.</span><span class="n">RawDescriptionHelpFormatter</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span>
        <span class="s2">&#34;patches&#34;</span><span class="p">,</span>
        <span class="nb">type</span><span class="o">=</span><span class="n">pathlib</span><span class="o">.</span><span class="n">Path</span><span class="p">,</span>
        <span class="n">nargs</span><span class="o">=</span><span class="s2">&#34;+&#34;</span><span class="p">,</span>
        <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The .patch files to organize by date&#34;</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">parser</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">make_parser</span><span class="p">()</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="n">patches</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span>
        <span class="o">*</span><span class="p">[</span>
            <span class="p">[</span>
                <span class="p">(</span>
                    <span class="n">patch</span><span class="p">,</span>
                    <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span>
                        <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">maxsplit</span><span class="o">=</span><span class="mi">1</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
                        <span class="s2">&#34;%a, </span><span class="si">%d</span><span class="s2"> %b %Y %H:%M:%S %z&#34;</span><span class="p">,</span>
                    <span class="p">),</span>
                <span class="p">)</span>
                <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">patch_contents</span>
                <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;Date:&#34;</span><span class="p">)</span>
            <span class="p">]</span>
            <span class="k">for</span> <span class="n">patch</span><span class="p">,</span> <span class="n">patch_contents</span> <span class="ow">in</span> <span class="p">[</span>
                <span class="p">(</span><span class="n">patch</span><span class="p">,</span> <span class="n">patch</span><span class="o">.</span><span class="n">read_text</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="s2">&#34;ignore&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">))</span>
                <span class="k">for</span> <span class="n">patch</span> <span class="ow">in</span> <span class="n">args</span><span class="o">.</span><span class="n">patches</span>
            <span class="p">]</span>
        <span class="p">]</span>
    <span class="p">)</span>
    <span class="k">for</span> <span class="n">patch</span><span class="p">,</span> <span class="n">date</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">patches</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
        <span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">patch</span><span class="p">),</span> <span class="n">date</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
</code></pre></div><h2 id="branching">Branching</h2>
<p>We support multiple branches so as to provide stability to our users.
If they go write some code based off our last release, and then we
release, and no longer support the last version, they will have to
turn around right after they implemented and update all their code to
use our new APIs. If we support at least two versions, then it gives
people time to do other things than spend all their time updating to
the lastest version of our libraries API!</p>
<h2 id="github">GitHub</h2>
<p>GitHub Related tips and tricks</p>
<h3 id="create-pull-request-and-merge-when-status-checks-complete">Create Pull Request and merge when status checks complete</h3>
<p>Merges as soon as CI checks pass</p>
<pre><code class="language-console" data-lang="console">$ gh pr create &amp;&amp; gh pr merge --auto --rebase --delete-branch
</code></pre>]]></content>
  </entry>
  <entry>
    <title>Kernelci</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/kernelci/</id>
    <updated>2021-04-02T15:00:00Z</updated>
    <published>2021-04-02T15:00:00Z</published>
    <content type="html"><![CDATA[<p>Neelima and John setting up KernelCI</p>
<p>Working off <a href="https://github.com/kernelci/kernelci-backend-config/blob/master/INSTALL.md">https://github.com/kernelci/kernelci-backend-config/blob/master/INSTALL.md</a></p>
<p>We clone the config</p>
<pre><code class="language-console" data-lang="console">git clone https://github.com/kernelci/kernelci-backend-config.git
</code></pre><p>We found out that you have to create a file for each host under <code>host_vars/</code></p>
<div class="highlight"><pre class="chroma"><code class="language-diff" data-lang="diff">
</code></pre></div><pre><code>127.0.0.1 - - [07/Apr/2021 14:22:13] &quot;GET / HTTP/1.1&quot; 500 -
Traceback (most recent call last):
  File &quot;/srv/kernelci-frontend/.venv/lib/python2.7/site-packages/flask/app.py&quot;, line 2301, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/srv/kernelci-frontend/.venv/lib/python2.7/site-packages/flask/app.py&quot;, line 2287, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/srv/kernelci-frontend/.venv/lib/python2.7/site-packages/flask/app.py&quot;, line 1733, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/srv/kernelci-frontend/.venv/lib/python2.7/site-packages/flask/app.py&quot;, line 2284, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/srv/kernelci-frontend/.venv/lib/python2.7/site-packages/flask/app.py&quot;, line 1807, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/srv/kernelci-frontend/.venv/lib/python2.7/site-packages/flask/app.py&quot;, line 1705, in handle_user_exception
    return self.handle_http_exception(e)
  File &quot;/srv/kernelci-frontend/.venv/lib/python2.7/site-packages/flask/app.py&quot;, line 1642, in handle_http_exception
    return handler(e)
  File &quot;/srv/kernelci-frontend/app/dashboard/__init__.py&quot;, line 155, in internal_server_error
    return render_template(&quot;500.html&quot;, page_content=page_content), 500
  File &quot;/srv/kernelci-frontend/.venv/lib/python2.7/site-packages/flask/templating.py&quot;, line 133, in render_template
    ctx.app.update_template_context(context)
  File &quot;/srv/kernelci-frontend/.venv/lib/python2.7/site-packages/flask/app.py&quot;, line 790, in update_template_context
    context.update(func())
  File &quot;/srv/kernelci-frontend/app/dashboard/__init__.py&quot;, line 128, in inject_variables
    back_version=backend.get_version(),
  File &quot;/srv/kernelci-frontend/.venv/lib/python2.7/site-packages/flask_cache/__init__.py&quot;, line 537, in decorated_function
    rv = f(*args, **kwargs)
  File &quot;/srv/kernelci-frontend/app/dashboard/utils/backend.py&quot;, line 420, in get_version
    data, status_code, headers = request_get(url)
  File &quot;/srv/kernelci-frontend/app/dashboard/utils/backend.py&quot;, line 277, in request_get
    abort(500)
  File &quot;/srv/kernelci-frontend/.venv/lib/python2.7/site-packages/werkzeug/exceptions.py&quot;, line 772, in abort
    return _aborter(status, *args, **kwargs)
  File &quot;/srv/kernelci-frontend/.venv/lib/python2.7/site-packages/werkzeug/exceptions.py&quot;, line 753, in __call__
    raise self.mapping[code](*args, **kwargs)
InternalServerError: 500 Internal Server Error: The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.
</code></pre><p>Which made it so that every time I made a request, I started seeing this in the
logs (directly above the traceback).</p>
<pre><code>http://api.mydomain.local/version
127.0.0.1 - - [07/Apr/2021 14:22:13] &quot;GET / HTTP/1.1&quot; 500 -
Traceback (most recent call last):
</code></pre><p>So it's making a request to: <code>http://api.mydomain.local/version</code></p>
<p>I then looked in the /etc/hosts file, and saw that we must have lost the entries
for api.mydomain.local and frontend.mydomain.local So I re-added them and it's
no longer dumping the same traceback page.</p>
<p>Also, I created a systemd unit file to start the frontend service. It wasn't
clear to me how it was supposed to get started. I didn't see any docs about it
or anything in the repo or in the config repo for the frontend.</p>
<p>Create the virtualenv</p>
<pre><code class="language-console" data-lang="console">$ python2 -m virtualenv /srv/kernelci-frontend/.venv
</code></pre><p>Activate the virtualenv and install dependencies</p>
<pre><code class="language-console" data-lang="console">$ . srv/kernelci-frontend/.venv/bin/activate
$ pip install -r requirements.txt
</code></pre><p>Create the systemd service for the frontend</p>
<pre><code class="language-console" data-lang="console">cat &gt; /etc/systemd/system/kernelci-frontend.service &lt;&lt;'EOF'
[Unit]
Description=Kernel CI Frontend Service
Requires=kernelci-backend.service
After=kernelci-backend.service

[Service]
Type=simple
User=www-data
Group=www-data
ProtectSystem=full
ProtectHome=true
NoNewPrivileges=true
PrivateTmp=true
SyslogIdentifier=kernelci-frontend
LimitNOFILE=65536
RestartSec=5
Restart=always
WorkingDirectory=/srv/kernelci-frontend/app
ExecStart=/srv/kernelci-frontend/.venv/bin/python -OO -R server.py

[Install]
WantedBy=multi-user.target
EOF
</code></pre><p>Reload the systemd daemon to see the new service file</p>
<pre><code class="language-console" data-lang="console">$ systemctl daemon-reload
</code></pre><p>Enable the frontend service to start on boot and use --now to start it now too</p>
<pre><code class="language-console" data-lang="console">$ systemctl enable --now kernelci-frontend
</code></pre><p>I had to do the systemd service file to see the log output. I think you had been
running it from an ssh session or something. So I stopped that process, and now
it runs under systemd. Which means we can see the log output with journalctl -xe</p>
<p>Oh, and the backend code is broken. So the patch in the that PR above needs to
be applied or else nothing works.</p>
<pre><code class="language-console" data-lang="console">cd /srv/kernelci-backend
curl -sfL https://github.com/kernelci/kernelci-backend/pull/285.patch | git am
</code></pre>]]></content>
  </entry>
  <entry>
    <title>Personal Digital Security</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/personal-digital-security/</id>
    <updated>2021-02-10T06:00:00Z</updated>
    <published>2021-02-10T06:00:00Z</published>
    <content type="html"><![CDATA[<p>This post will cover steps you can take to better secure the digital aspects of
your life. We will cover some applications (software) and devices (hardware)
that you can use.</p>
<ul>
<li><a href="#high-level-guidance">High Level Guidance</a></li>
<li><a href="#applications">Applications</a></li>
<li><a href="#devices">Devices</a></li>
<li><a href="#personal-considerations">Personal Considerations</a></li>
<li><a href="#threat-considerations">Threat Considerations</a></li>
<li><a href="#rational">Rational</a></li>
<li><a href="#theory">Theory</a></li>
</ul>
<h1 id="high-level-guidance">High Level Guidance</h1>
<p>This high level guidance is meant to be generic, since individuals have
different situations, hardware, and software. If you have a specific case you
need help with, reach out to me and I will try to give you more clarity.</p>
<h2 id="update-and-encrypt">Update and Encrypt</h2>
<p>These are two high level concepts we'll be following.</p>
<ul>
<li>
<p>Update</p>
<ul>
<li>Make sure you're running the latest software. Ideally this also means
running on hardware with the latest security features.</li>
</ul>
</li>
<li>
<p>Encrypt</p>
<ul>
<li>Make sure that your talking over encrypted channels. To your friends, to
your bank, wherever possible.</li>
</ul>
</li>
<li>
<p>Miscellaneous</p>
<ul>
<li>
<p>Make long, unique passwords.</p>
<ul>
<li>Use a password manager</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="update">Update</h3>
<ul>
<li>
<p>Make sure that auto updates are on on all your devices.</p>
<ul>
<li>
<p>If there is a setting for frequency, make it as frequently as possible.</p>
</li>
<li>
<p>There is usually a device level setting found in the devices main settings
application.</p>
</li>
<li>
<p>There may be a setting for the pieces of software on the device. Found in an
app store or something like that.</p>
</li>
</ul>
</li>
<li>
<p>If you can afford it. Buy the latest versions of whatever devices you use.</p>
<ul>
<li>This is particularly important if you are concerned your device might
be physically acessable by someone you don't trust.</li>
</ul>
</li>
</ul>
<h3 id="encrypt">Encrypt</h3>
<ul>
<li>
<p>Use encryption wherever possible</p>
<ul>
<li>
<p>You should always choose ways of communicating that are encrypted. You do
not know what information, no matter how inconsequentiall it seems to you,
might be of use to comprimise the security of seemingly unrelated areas.</p>
</li>
<li>
<p>Communicating using encryption means that there has been some control placed
on who can see the contents of your communication. The level of control over
who can see communications is</p>
</li>
</ul>
</li>
<li>
<p>Use end-to-end encryption whenever possible</p>
<ul>
<li>End-To-End encryption is used to describe a situation where only the
sender and the recepieant can see a message. By definition, anything that
is not end-to-end encrypted could possibly be seen by someone other than
your intended recipient.</li>
</ul>
</li>
</ul>
<h1 id="applications">Applications</h1>
<p>Here are some applications you can use to increase your security.</p>
<h2 id="signal">Signal</h2>
<p>Signal is an end-to-end encrypted messaging application.</p>
<ul>
<li><a href="https://signal.org/install">Install Signal</a></li>
</ul>
<p>You can be confident that you are communicating securely if you have an updated,
recent phone, and you have verified the safety number of the person you are
talking to over signal. For the best possible assurance that you are talking to
who you think you are talking to, verify safety numbers in person by scanning
each others QR code safety numbers.</p>
<p>Do not set a PIN. This will make it so that your data is backed up on their
servers. This is convenient for you if you switch devices, but means that they
could potentially decrypt your messages and contacts if they guessed your PIN
(which is easy to do).</p>
<p><a href="https://support.signal.org/hc/en-us/articles/360007059792-Signal-PIN#pin_disable">https://support.signal.org/hc/en-us/articles/360007059792-Signal-PIN#pin_disable</a></p>
<p>Make sure to read <a href="#governments---police">Threat Considerations: Governments</a>
too.</p>
<h1 id="devices">Devices</h1>
<p>These are some devices which have reasonably good security, or can be used to
improve your security posture.</p>
<p>For any device, security is typically increased when the device is powered off.
If you are in a situation where you think your device might be taken from you,
<strong>TURN IT OFF</strong>.</p>
<h2 id="chromebooks">Chromebooks</h2>
<p>A Chromebook is in my opinion the most secure consumer laptop available at the
moment. Their lack of ability to install software significantly decreases the
amount of attacks that can be done on them (<a href="#attack-surface">Theory: Attack
Surface</a>).</p>
<h1 id="personal-considerations">Personal Considerations</h1>
<blockquote>
<p>This section is in progress</p>
</blockquote>
<h1 id="threat-considerations">Threat Considerations</h1>
<blockquote>
<p>This section is in progress</p>
</blockquote>
<h2 id="apple">Apple</h2>
<p>Apple does a very good job, they also tend to care about their users privacy
more than most other companies. This means they work hard than most others to
protect it by building secure products.</p>
<h2 id="google">Google</h2>
<h2 id="governments---police">Governments - Police</h2>
<p>This goes for all government entities. If the government is in the list of
people you're worried about, do not use a fingerprint, face unlock, or any other
non-password based method to unlock your devices. There are laws protecting your
password in your head but not your fingers and face from being used to unlock
your devices.</p>
<p>If you think they are going to get your device, <strong>TURN IT OFF</strong>. This is the
best thing you can do to stop them from getting into it. Make sure it is off
before interacting with them.</p>
<h2 id="governments---three-letter-agencies">Governments - Three Letter Agencies</h2>
<p>Using open source software is generally a good idea here. With Open Source, even if you dont know how to program, someone who does has looked at the code and you'd probably be able to find out through minimal searching if anyone has found any reason not to trust the open source project you're considering using. With closed source stuff, we usually only find out if it's doing something nefarious if a security researcher got bored in their free time and tried to hack a non-open source peice of software, which happens less often.</p>
<p>Related to the choice of using open source applications: <a href="https://www.vice.com/amp/en/article/akgkwj/operation-trojan-shield-anom-fbi-secret-phone-network">https://www.vice.com/amp/en/article/akgkwj/operation-trojan-shield-anom-fbi-secret-phone-network</a></p>
<h1 id="rational">Rational</h1>
<p>Let's go into detail on why the above guidance holds true broad spectrum.</p>
<h3 id="update-1">Update</h3>
<p>Updating is main way we respond to vulnerabilities. The software and hardware
our devices run on will enviably suffer from vulnerabilities. This is why we
MUST update them.</p>
<ul>
<li>
<p>Auto Updates</p>
<ul>
<li>Hardware and software vulnerabilities are identified on a regular basis.
Updates contain fixes to vulnerabilities. If your device has a
vulnerability, an update may &quot;patch&quot; the vulnerability. A &quot;patch&quot; for a
vulnerability is a fix which makes your device no longer vulnerable. If you
do not update, you will not get the &quot;patch&quot;es that fix vulnerabilities, and
your device will be vulnerable.</li>
</ul>
</li>
<li>
<p>If you can afford it. Buy the latest versions of whatever devices you use.</p>
<ul>
<li>In a given product line, such as the Google or Apple phones, devices are
made of hardware components. The product lines have versions, the components
within those products also have versions. When you buy the latest version of
a device, you're doing an update of your hardware. Hardware vulnerabilities
usually a concern when someone might have physical access to your device.
Typical examples of this include airport securty, police, theives, abusive
partners, etc.</li>
</ul>
</li>
</ul>
<h3 id="encrypt-1">Encrypt</h3>
<ul>
<li>
<p>Use encryption wherever possible</p>
<ul>
<li>
<p>You should always choose ways of communicating that are encrypted. You do
not know what information, no matter how inconsequentiall it seems to you,
might be of use to comprimise the security of seemingly unrelated areas.</p>
</li>
<li>
<p>Communicating using encryption means that there has been some control placed
on who can see the contents of your communication. The level of control over
who can see communications is</p>
</li>
</ul>
</li>
<li>
<p>Use end-to-end encryption whenever possible</p>
<ul>
<li>End-To-End encryption is used to describe a situation where only the
sender and the recepieant can see a message. By definition, anything that
is not end-to-end encrypted could possibly be seen by someone other than
your intended recipient.</li>
</ul>
</li>
</ul>
<h1 id="theory">Theory</h1>
<blockquote>
<p>This section is in progress</p>
</blockquote>
<h2 id="attack-surface">Attack Surface</h2>
<p>The potential for a there to be a vulnerability is directly related to the
number of components in a system and the quality of those components.</p>
<h2 id="threat-model">Threat Model</h2>
<p>For a given situation.</p>
<ul>
<li>
<p>What are your assets?</p>
<ul>
<li>Assets are things you may want to protect.</li>
</ul>
</li>
<li>
<p>Who are the actors?</p>
<ul>
<li>Who are the potential people or entities involved in a situation? At a
minimum there is you, and the &quot;attacker&quot;.</li>
</ul>
</li>
</ul>
<h2 id="mitm">MITM</h2>
<p>Man-in-the-middle or person-in-the-middle attacks are when someone inserts
themselves into a thought to be private conversation.</p>]]></content>
  </entry>
  <entry>
    <title>Digital Ocean Python Scripting</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/digital-ocean-python-scripting/</id>
    <updated>2021-01-23T06:00:00Z</updated>
    <published>2021-01-23T06:00:00Z</published>
    <content type="html"><![CDATA[<p>This post is some heavily commented example code that shows you how you can use
Python to script up creation of Digital Ocean VMs (Droplets), start web servers
on them, and connect them to a load balancer that provides TLS (LB coming
in an update to this post later).</p>
<p>The code for do.py can be found here:
<a href="https://gist.github.com/pdxjohnny/f1f13d77dc7dd4403a6647baa3926042">https://gist.github.com/pdxjohnny/f1f13d77dc7dd4403a6647baa3926042</a></p>
<p>The first time we'll see that there are no containers to kill or remove. And
that the Python 3.8 container had to be pulled down before it could be run.</p>
<pre><code class="language-console" data-lang="console">$ DIGITALOCEAN_ACCESS_TOKEN=20b7f300f7d84b752c11239c568c81b3bc010cb49026968f19d3a84deeaa6baa python do.py
{'my-test-app-sfo2-s-1vcpu-1gb-1': &lt;Droplet: 227830340 my-test-app-sfo2-s-1vcpu-1gb-1&gt;, 'my-test-app-sfo2-s-1vcpu-1gb-0': &lt;Droplet: 227830027 my-test-app-sfo2-s-1vcpu-1gb-0&gt;}
[178.128.7.222] [err]   &quot;docker kill&quot; requires at least 1 argument.
[178.128.7.222] [err]   See 'docker kill --help'.
[178.128.7.222] [err]
[178.128.7.222] [err]   Usage:  docker kill [OPTIONS] CONTAINER [CONTAINER...]
[178.128.7.222] [err]
[178.128.7.222] [err]   Kill one or more running containers
[167.99.96.5]   [err]   &quot;docker kill&quot; requires at least 1 argument.
[167.99.96.5]   [err]   See 'docker kill --help'.
[167.99.96.5]   [err]
[167.99.96.5]   [err]   Usage:  docker kill [OPTIONS] CONTAINER [CONTAINER...]
[167.99.96.5]   [err]
[167.99.96.5]   [err]   Kill one or more running containers
[178.128.7.222] [err]   &quot;docker rm&quot; requires at least 1 argument.
[178.128.7.222] [err]   See 'docker rm --help'.
[178.128.7.222] [err]
[178.128.7.222] [err]   Usage:  docker rm [OPTIONS] CONTAINER [CONTAINER...]
[178.128.7.222] [err]
[178.128.7.222] [err]   Remove one or more containers
[167.99.96.5]   [err]   &quot;docker rm&quot; requires at least 1 argument.
[167.99.96.5]   [err]   See 'docker rm --help'.
[167.99.96.5]   [err]
[167.99.96.5]   [err]   Usage:  docker rm [OPTIONS] CONTAINER [CONTAINER...]
[167.99.96.5]   [err]
[167.99.96.5]   [err]   Remove one or more containers
[167.99.96.5]   3172daa1cf000bc0dbce3ba912cfb18358b38481cccbb7585f01c6c1f87389f4
[167.99.96.5]   [err]   Unable to find image 'python:3.8' locally
[167.99.96.5]   [err]   3.8: Pulling from library/python
[167.99.96.5]   [err]   b9a857cbf04d: Pulling fs layer
[167.99.96.5]   [err]   d557ee20540b: Pulling fs layer
[167.99.96.5]   [err]   3b9ca4f00c2e: Pulling fs layer
[167.99.96.5]   [err]   667fd949ed93: Pulling fs layer
[167.99.96.5]   [err]   4ad46e8a18e5: Pulling fs layer
[167.99.96.5]   [err]   381aea9d4031: Pulling fs layer
[167.99.96.5]   [err]   8a9e78e1993b: Pulling fs layer
[167.99.96.5]   [err]   9eff4cbaa677: Pulling fs layer
[167.99.96.5]   [err]   1addfed3cc19: Pulling fs layer
[167.99.96.5]   [err]   667fd949ed93: Waiting
[167.99.96.5]   [err]   4ad46e8a18e5: Waiting
[167.99.96.5]   [err]   381aea9d4031: Waiting
[167.99.96.5]   [err]   8a9e78e1993b: Waiting
[167.99.96.5]   [err]   9eff4cbaa677: Waiting
[167.99.96.5]   [err]   1addfed3cc19: Waiting
[167.99.96.5]   [err]   d557ee20540b: Verifying Checksum
[167.99.96.5]   [err]   d557ee20540b: Download complete
[167.99.96.5]   [err]   3b9ca4f00c2e: Verifying Checksum
[167.99.96.5]   [err]   3b9ca4f00c2e: Download complete
[167.99.96.5]   [err]   b9a857cbf04d: Verifying Checksum
[167.99.96.5]   [err]   b9a857cbf04d: Download complete
[167.99.96.5]   [err]   381aea9d4031: Verifying Checksum
[167.99.96.5]   [err]   381aea9d4031: Download complete
[167.99.96.5]   [err]   667fd949ed93: Verifying Checksum
[167.99.96.5]   [err]   667fd949ed93: Download complete
[167.99.96.5]   [err]   8a9e78e1993b: Verifying Checksum
[167.99.96.5]   [err]   8a9e78e1993b: Download complete
[167.99.96.5]   [err]   9eff4cbaa677: Verifying Checksum
[167.99.96.5]   [err]   9eff4cbaa677: Download complete
[167.99.96.5]   [err]   1addfed3cc19: Verifying Checksum
[167.99.96.5]   [err]   1addfed3cc19: Download complete
[167.99.96.5]   [err]   4ad46e8a18e5: Verifying Checksum
[167.99.96.5]   [err]   4ad46e8a18e5: Download complete
[167.99.96.5]   [err]   b9a857cbf04d: Pull complete
[167.99.96.5]   [err]   d557ee20540b: Pull complete
[167.99.96.5]   [err]   3b9ca4f00c2e: Pull complete
[167.99.96.5]   [err]   667fd949ed93: Pull complete
[167.99.96.5]   [err]   4ad46e8a18e5: Pull complete
[167.99.96.5]   [err]   381aea9d4031: Pull complete
[167.99.96.5]   [err]   8a9e78e1993b: Pull complete
[167.99.96.5]   [err]   9eff4cbaa677: Pull complete
[167.99.96.5]   [err]   1addfed3cc19: Pull complete
[167.99.96.5]   [err]   Digest: sha256:fe08f4b7948acd9dae63f6de0871f79afa017dfad32d148770ff3a05d3c64363
[167.99.96.5]   [err]   Status: Downloaded newer image for python:3.8
[178.128.7.222] 54ae127c7abf3cd3d8f3b1cbe909c586c046c9d40fbb139c39b263ef72bd4df8
[178.128.7.222] [err]   Unable to find image 'python:3.8' locally
[178.128.7.222] [err]   3.8: Pulling from library/python
[178.128.7.222] [err]   b9a857cbf04d: Pulling fs layer
[178.128.7.222] [err]   d557ee20540b: Pulling fs layer
[178.128.7.222] [err]   3b9ca4f00c2e: Pulling fs layer
[178.128.7.222] [err]   667fd949ed93: Pulling fs layer
[178.128.7.222] [err]   4ad46e8a18e5: Pulling fs layer
[178.128.7.222] [err]   381aea9d4031: Pulling fs layer
[178.128.7.222] [err]   8a9e78e1993b: Pulling fs layer
[178.128.7.222] [err]   9eff4cbaa677: Pulling fs layer
[178.128.7.222] [err]   1addfed3cc19: Pulling fs layer
[178.128.7.222] [err]   667fd949ed93: Waiting
[178.128.7.222] [err]   4ad46e8a18e5: Waiting
[178.128.7.222] [err]   381aea9d4031: Waiting
[178.128.7.222] [err]   8a9e78e1993b: Waiting
[178.128.7.222] [err]   9eff4cbaa677: Waiting
[178.128.7.222] [err]   1addfed3cc19: Waiting
[178.128.7.222] [err]   d557ee20540b: Verifying Checksum
[178.128.7.222] [err]   d557ee20540b: Download complete
[178.128.7.222] [err]   3b9ca4f00c2e: Verifying Checksum
[178.128.7.222] [err]   3b9ca4f00c2e: Download complete
[178.128.7.222] [err]   b9a857cbf04d: Verifying Checksum
[178.128.7.222] [err]   b9a857cbf04d: Download complete
[178.128.7.222] [err]   381aea9d4031: Verifying Checksum
[178.128.7.222] [err]   381aea9d4031: Download complete
[178.128.7.222] [err]   667fd949ed93: Verifying Checksum
[178.128.7.222] [err]   667fd949ed93: Download complete
[178.128.7.222] [err]   8a9e78e1993b: Verifying Checksum
[178.128.7.222] [err]   8a9e78e1993b: Download complete
[178.128.7.222] [err]   9eff4cbaa677: Verifying Checksum
[178.128.7.222] [err]   9eff4cbaa677: Download complete
[178.128.7.222] [err]   1addfed3cc19: Verifying Checksum
[178.128.7.222] [err]   1addfed3cc19: Download complete
[178.128.7.222] [err]   4ad46e8a18e5: Verifying Checksum
[178.128.7.222] [err]   4ad46e8a18e5: Download complete
[178.128.7.222] [err]   b9a857cbf04d: Pull complete
[178.128.7.222] [err]   d557ee20540b: Pull complete
[178.128.7.222] [err]   3b9ca4f00c2e: Pull complete
[178.128.7.222] [err]   667fd949ed93: Pull complete
[178.128.7.222] [err]   4ad46e8a18e5: Pull complete
[178.128.7.222] [err]   381aea9d4031: Pull complete
[178.128.7.222] [err]   8a9e78e1993b: Pull complete
[178.128.7.222] [err]   9eff4cbaa677: Pull complete
[178.128.7.222] [err]   1addfed3cc19: Pull complete
[178.128.7.222] [err]   Digest: sha256:fe08f4b7948acd9dae63f6de0871f79afa017dfad32d148770ff3a05d3c64363
[178.128.7.222] [err]   Status: Downloaded newer image for python:3.8
[nodemon] clean exit - waiting for changes before restart
</code></pre><p>If we re-run we'll see that the <code>docker kill</code> and <code>docker rm</code> commands succeed
this time.</p>
<pre><code class="language-console" data-lang="console">$ DIGITALOCEAN_ACCESS_TOKEN=20b7f300f7d84b752c11239c568c81b3bc010cb49026968f19d3a84deeaa6baa python do.py
{'my-test-app-sfo2-s-1vcpu-1gb-1': &lt;Droplet: 227830340 my-test-app-sfo2-s-1vcpu-1gb-1&gt;, 'my-test-app-sfo2-s-1vcpu-1gb-0': &lt;Droplet: 227830027 my-test-app-sfo2-s-1vcpu-1gb-0&gt;}
SSH Private Key (/home/pdxjohnny/.ssh/id_rsa) Password:
[178.128.7.222] 54ae127c7abf
[167.99.96.5]   3172daa1cf00
[178.128.7.222] 54ae127c7abf
[167.99.96.5]   3172daa1cf00
[178.128.7.222] 935710fd1ba64fe8b70ccd695a1f60c956e9712c7a36ba8d2e3f0dc87a1b01d9
[167.99.96.5]   27abd899ba5c19a0022c2bf633fe467c9d914e32d34d7264ada06810eede10b2
</code></pre><p><strong>TODO</strong> Add load balancing with TLS</p>]]></content>
  </entry>
  <entry>
    <title>Today I Learned</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/til/</id>
    <updated>2021-01-09T16:00:00Z</updated>
    <published>2021-01-09T16:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="2021-01-8">2021-01-8</h1>
<p>Forward a UNIX socket over SSH. This command will sit around in the background.</p>
<p>References: <a href="https://github.com/moby/moby/pull/18373#issuecomment-184895457">https://github.com/moby/moby/pull/18373#issuecomment-184895457</a></p>
<pre><code class="language-console" data-lang="console">$ ssh -L ./mysock:/var/run/docker.sock -Nf hostname.example.com
</code></pre><h1 id="2021-01-09">2021-01-09</h1>
<p><a href="https://stackoverflow.com/questions/65515652/fix-cannot-update-component-from-inside-function-body-of-different-component-w">https://stackoverflow.com/questions/65515652/fix-cannot-update-component-from-inside-function-body-of-different-component-w</a></p>
<p>Some thoughts:
Pretty sure it’s because we call setState within the render method, which is
whatever method returns JSX, <code>return (&lt;stuff&gt;...&lt;/stuff&gt;)</code>.</p>
<p>I think it doesn’t like that since we pass the setter to the child, then the
child renders, and could immediately call setState (<code>if (data === true)</code>), which
triggers a re-render in the parent, which triggers a re-render in the child,
which calls setState... and causes an infinite loop effectively.</p>
<p>Create wrapper around setter and pass to children
<a href="https://github.com/intel/dffml/blob/b88424a927f6279191285e2103a2b50b993b1921/service/webui/webui/src/Paperbase.js#L167-L205">https://github.com/intel/dffml/blob/b88424a927f6279191285e2103a2b50b993b1921/service/webui/webui/src/Paperbase.js#L167-L205</a>
<a href="https://github.com/intel/dffml/blob/b88424a927f6279191285e2103a2b50b993b1921/service/webui/webui/src/Paperbase.js#L228-L236">https://github.com/intel/dffml/blob/b88424a927f6279191285e2103a2b50b993b1921/service/webui/webui/src/Paperbase.js#L228-L236</a></p>
<p>Old style class accepting wrapped setter (props.saveBackend())
<a href="https://github.com/intel/dffml/blob/b88424a927f6279191285e2103a2b50b993b1921/service/webui/webui/src/SetBackendPopup.js#L16-L48">https://github.com/intel/dffml/blob/b88424a927f6279191285e2103a2b50b993b1921/service/webui/webui/src/SetBackendPopup.js#L16-L48</a></p>
<p>New style class accepting wrapped setter (saveBackend())
<a href="https://github.com/intel/dffml/blob/b88424a927f6279191285e2103a2b50b993b1921/service/webui/webui/src/SettingsBackend.js#L44-L60">https://github.com/intel/dffml/blob/b88424a927f6279191285e2103a2b50b993b1921/service/webui/webui/src/SettingsBackend.js#L44-L60</a></p>
<h1 id="2021-01-13">2021-01-13</h1>
<p><strong>TODO</strong> Add notes about meetings and people skills stuff</p>
<h1 id="2021-01-14">2021-01-14</h1>
<p>Split screen PC games!</p>
<p><a href="https://www.reddit.com/r/nucleuscoop/comments/fjdqid/list_of_new_supported_games_and_faq/">https://www.reddit.com/r/nucleuscoop/comments/fjdqid/list_of_new_supported_games_and_faq/</a></p>
<h1 id="2021-02-12">2021-02-12</h1>
<p>Sealed boxes, anonymously encrypt something using a public key</p>
<p><a href="https://libsodium.gitbook.io/doc/public-key_cryptography/sealed_boxes">https://libsodium.gitbook.io/doc/public-key_cryptography/sealed_boxes</a></p>
<h1 id="2021-02-17">2021-02-17</h1>
<p>Regular experssion builder helper</p>
<p><a href="https://regex101.com/">https://regex101.com/</a></p>
<h1 id="2021-02-27">2021-02-27</h1>
<p>Inspect memory of running process</p>
<p><a href="https://superuser.com/questions/231776/how-do-i-see-a-history-of-what-ive-post-ed-in-google-chrome/1119310#1119310">https://superuser.com/questions/231776/how-do-i-see-a-history-of-what-ive-post-ed-in-google-chrome/1119310#1119310</a></p>
<p>Hedge Fund Legend Paul Tudor Jones
&quot;5:1 (risk /reward) Five to one means I’m risking one dollar to make five.  What five to one does is allow you to have a hit ratio of 20%.  I can actually be a complete imbecile. I can be wrong 80% of the time and I’m still not going to lose.&quot;</p>
<p><a href="https://mobile.twitter.com/realwillmeade/status/1365661871999713283">https://mobile.twitter.com/realwillmeade/status/1365661871999713283</a></p>
<h1 id="2022-01-09">2022-01-09</h1>
<p>Port knocking</p>
<h2 id="2022-01-24">2022-01-24</h2>
<p>UEFI shell commands</p>
<p><code>Shell&gt; map</code> - show FS</p>
<p><code>Shell&gt; cls</code> - clear screan</p>
<p><code>Shell&gt; fs1:</code></p>
<p><code>FS1:\&gt; dir</code></p>
<p><code>iPXE&gt; sanboot http://example.com/myimg.iso</code></p>
<h1 id="2022-01-30">2022-01-30</h1>
<p><a href="https://archive.nanog.org/sites/default/files/2_Steenbergen_Tutorial_New_And_v2.pdf">https://archive.nanog.org/sites/default/files/2_Steenbergen_Tutorial_New_And_v2.pdf</a></p>
<h1 id="2022-02-09">2022-02-09</h1>
<p><a href="https://blog.cloudflare.com/missing-manuals-io_uring-worker-pool/">https://blog.cloudflare.com/missing-manuals-io_uring-worker-pool/</a></p>
<h1 id="2022-04-21">2022-04-21</h1>
<blockquote>
<p>The utmp file allows one to discover information about who is
currently using the system.  There may be more users currently
using the system, because not all programs use utmp logging.</p>
</blockquote>
<p>Source: <a href="https://man7.org/linux/man-pages/man5/utmp.5.html">https://man7.org/linux/man-pages/man5/utmp.5.html</a></p>
<p>bpf to trace created threads: <a href="https://unix.stackexchange.com/a/606831">https://unix.stackexchange.com/a/606831</a></p>
<p><a href="https://www.kitploit.com/2022/04/ecapture-capture-ssltls-text-content.html?fbclid=IwAR1lvgfA532iqtjUMcbYt_pfNzy3BsUVLPDz4dnZCas6x_JFrZCWDlIrYGc&amp;m=1">https://www.kitploit.com/2022/04/ecapture-capture-ssltls-text-content.html?fbclid=IwAR1lvgfA532iqtjUMcbYt_pfNzy3BsUVLPDz4dnZCas6x_JFrZCWDlIrYGc&amp;m=1</a></p>
<p>Mutli-cluster k8s with kcp: <a href="https://asciinema.org/a/471709">https://asciinema.org/a/471709</a></p>
<h2 id="2022-06-07">2022-06-07</h2>
<p>Bash history</p>
<ul>
<li><a href="https://www.gnu.org/software/bash/manual/bash.html#History-Interaction">https://www.gnu.org/software/bash/manual/bash.html#History-Interaction</a></li>
<li><a href="https://askubuntu.com/questions/67283/is-it-possible-to-make-writing-to-bash-history-immediate">https://askubuntu.com/questions/67283/is-it-possible-to-make-writing-to-bash-history-immediate</a></li>
<li><a href="https://www.gnu.org/software/bash/manual/bash.html#index-histchars">https://www.gnu.org/software/bash/manual/bash.html#index-histchars</a></li>
<li><a href="https://docs.python.org/3/library/time.html#time.strftime">https://docs.python.org/3/library/time.html#time.strftime</a></li>
</ul>
<h2 id="2022-06-21">2022-06-21</h2>
<ul>
<li><a href="https://til.simonwillison.net/sqlite/one-line-csv-operations">https://til.simonwillison.net/sqlite/one-line-csv-operations</a></li>
</ul>
<h2 id="2022-07-13">2022-07-13</h2>
<ul>
<li><a href="https://cfcd-prep.cloudfoundry.org/pushing/envars/">https://cfcd-prep.cloudfoundry.org/pushing/envars/</a></li>
</ul>
<h2 id="2023-06-13">2023-06-13</h2>
<ul>
<li>React hooks useAsync
<ul>
<li><a href="https://www.30secondsofcode.org/react/s/use-async/">https://www.30secondsofcode.org/react/s/use-async/</a></li>
<li><a href="https://github.com/30-seconds/30-seconds-of-code">https://github.com/30-seconds/30-seconds-of-code</a></li>
</ul>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>TPM2.0</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/tpm2/</id>
    <updated>2020-10-13T19:00:00Z</updated>
    <published>2020-10-13T19:00:00Z</published>
    <content type="html"><![CDATA[<p>TPM2.0 Book
<a href="https://web.archive.org/web/20210629155650/https://link.springer.com/content/pdf/10.1007%2F978-1-4302-6584-9.pdf">https://web.archive.org/web/20210629155650/https://link.springer.com/content/pdf/10.1007%2F978-1-4302-6584-9.pdf</a></p>
<p>Things to be worried about when using Microsoft's Reference simulator:</p>
<ul>
<li>
<p>It's not production ready</p>
</li>
<li>
<p>Side channel attacks</p>
</li>
<li>
<p>Random numbers</p>
</li>
<li>
<p>Key derivation</p>
</li>
<li>
<p>David Wooten</p>
<ul>
<li>TPM Code for commands</li>
<li>Interface to crypto library</li>
<li>module rpovded by platform manufacturer
<ul>
<li>Time of day</li>
<li>Random number generator</li>
<li>Anything in the module call platfrom is supposed to be replaced by acctual platfrom or hardware code</li>
</ul>
</li>
<li>SImulator peice
<ul>
<li>TCP/IP interface to talk to the TPM</li>
</ul>
</li>
</ul>
</li>
<li>
<p>William (Bill) Roberts (notes from his presentation to</p>
<ul>
<li>TPM2-TSS
<ul>
<li>SAPI (shouldn't be used people aren't gonig to use it much)</li>
<li>ESAPI Full control but encrypted. If you want full low level control but want to do it with encryption</li>
<li>FAPI high level automatatic verifyed sessions with TPM and key storage</li>
<li>RcDecode Return code to error string (strerror for TPM2)</li>
<li>MU Marshalling and unmarshaling library</li>
<li>TctiLdr They are similar to a network layer in that they move bytes to and from the TPM over an abitrary interface. Could talk to simulator, or /dev/tpm0</li>
</ul>
</li>
<li>pytss
<ul>
<li>All based on cffi</li>
<li>Classes</li>
<li>Default arguments</li>
<li>Type coercions (Python types to TPM types, TPM2B, TPMT_PUBLIC)
<ul>
<li>Can take dictionaries</li>
<li>Can take subclass types directly</li>
<li>Copy constructors work</li>
<li>Comparision with string, euqivilent Python types, work</li>
</ul>
</li>
<li>tpm2-tools -G strings work
<ul>
<li>-G, -a, -n tpm2-tools strings work</li>
<li><code>.parse()</code> supported on TPM2T and TPM2B</li>
<li><code>TPMT_PUBLIC.parse(alg=&quot;rsa2048:rsapss&quot;, objectAttributes=&quot;fixedtpm|sign&quot;)</code></li>
<li>Defaults to tpm2_create over tpm2_createprimary</li>
</ul>
</li>
<li>TPM2_ALG.parse(&quot;sha&quot;) --&gt; TPM2_ALF.SHA or 0x04
<ul>
<li>For all structures</li>
</ul>
</li>
<li>Can load tpm2-tool context files
<ul>
<li><code>TPMS_CONTEXT.from_tools(ctxbytes)</code></li>
</ul>
</li>
<li>Exceptions run return code thorugh RcDecode for error message
<ul>
<li><code>TSS2_Exception</code></li>
<li>Handle, parmeter, session, and return code are provided</li>
</ul>
</li>
<li>ESAPI
<ul>
<li><code>with ESAPI(TCTILdr(&quot;device&quot;)) as e: e.get_random()</code></li>
<li>Context managers are your friend, they help you close the underlying TCTI</li>
<li>Will be able to pass TCTI loader string into <code>ESAPI()</code> call</li>
<li>Will choose sensible defaults</li>
<li>Will make you choose auth objects</li>
</ul>
</li>
<li>Converting PEM/DER/SSH keys to TPM
<ul>
<li><code>TPM2B_Public.from_pem(rsa_public_key)</code></li>
<li><code>TPM2B_SENSITIVE.from_pem(rsa_private_key)</code></li>
<li><code>e.load_extrenal(priv, pub)</code></li>
<li>Conversions are being done using Python cryptography package</li>
<li>Other attributes can be set during call to <code>.from_pem()</code></li>
</ul>
</li>
<li>Importing keys ot TPM
<ul>
<li>You must wrap before import.</li>
<li><code>.wrap()</code> let's you add keys</li>
</ul>
</li>
<li><code>make_credential()</code> will create a TPM credential which doesn't require talking to the TPM
<ul>
<li>Many people have asked for this</li>
</ul>
</li>
<li>Calculate Name Without TPM
<ul>
<li>You can call <code>.get_name()</code> to get the name of a <code>TPM2B_PUBLIC</code> without going to the TPM</li>
</ul>
</li>
<li>TSS2 PEM/DER Format Support</li>
<li>Can grab keys from openssl engine / provider</li>
<li>Could create keys with <code>key.create_rsa(esapi).to_pem()</code></li>
<li>FAPI
<ul>
<li>Very close to C API, doesn't use any of the native TPM types
<ul>
<li>Strings byte arrays, PEM files</li>
</ul>
</li>
</ul>
</li>
<li>Next Steps
<ul>
<li>Test against more versions of the TSS</li>
<li>policy engine
<ul>
<li>Eventually pull this back into the Python bindings</li>
</ul>
</li>
</ul>
</li>
<li>Examples
<ul>
<li>Check the test code</li>
<li>Will be adding to the docs</li>
<li>test/test_esapi.py
<ul>
<li><code>get_random()</code> in two lines</li>
</ul>
</li>
</ul>
</li>
<li>Conclusions
<ul>
<li>Default arguments make commnds simple and less cluttered than the C code</li>
<li>Docs get updated automatically on read the docs</li>
<li>Can pass all your normal session handles
<ul>
<li>They'll be validated</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Python</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/python/</id>
    <updated>2020-10-12T21:50:57Z</updated>
    <published>2020-10-12T21:50:57Z</published>
    <content type="html"><![CDATA[<blockquote>
<p>This post is in progress</p>
</blockquote>
<h2 id="development-environment">Development Environment</h2>
<p>First, update pip! <code>pip</code> is the way you'll install Python libraries and
programs that already exist. You'll likely need to install some existing things
using <code>pip</code> which you might <code>import</code> from your Python files for use in your
project.</p>
<p>We use the <code>--user</code> flag to tell pip to install just for our user. This
eliminates the need for <code>sudo</code>.</p>
<pre><code class="language-console" data-lang="console">$ python3 -m pip install --user --upgrade pip
Collecting pip
  Downloading https://files.pythonhosted.org/packages/cd/82/04e9aaf603fdbaecb4323b9e723f13c92c245f6ab2902195c53987848c78/pip-21.1.2-py3-none-any.whl (1.5MB)
    100% |████████████████████████████████| 1.6MB 862kB/s
Installing collected packages: pip
Successfully installed pip-21.1.2
</code></pre><p>Before you install any Python package, always update three packages. <code>pip</code>,
<code>setuptools</code>, and <code>wheel</code>. These packages are used in the download and
installation process of many packages. Installation of packages may fail due to
them requiring features of these three packages only present in their latest
versions. Which is why we always update them before installing other packages.</p>
<pre><code class="language-console" data-lang="console">$ python3 -m pip install --upgrade pip setuptools wheel
Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: pip in ./.local/lib/python3.6/site-packages (21.1.2)
Requirement already satisfied: setuptools in /usr/lib/python3.6/site-packages (39.2.0)
Collecting setuptools
  Downloading setuptools-57.0.0-py3-none-any.whl (821 kB)
     |████████████████████████████████| 821 kB 381 kB/s
Collecting wheel
  Downloading wheel-0.36.2-py2.py3-none-any.whl (35 kB)
Installing collected packages: wheel, setuptools
Successfully installed setuptools-57.0.0 wheel-0.36.2
</code></pre><h2 id="installing-packages">Installing packages</h2>
<p>You should create a new &quot;virtual environment&quot; each time you have a new
python project. Typically for every directory with a <code>requirements.txt</code> in it,
you would also have a <code>.venv</code> directory in it with the virtual environment
which you installed the packages into.</p>
<p><a href="https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment">https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment</a></p>
<h2 id="installing-packages-globally">Installing packages globally</h2>
<p>If you want packages to be available for use without activating a virtual
environment, you can install them to your user site-packages.</p>
<p>With a recent version of pip installed, Python will install to your <code>--user</code>
location even if you forget to specify. Or you can pass <code>--user</code> to be
explict about it.</p>
<pre><code class="language-console" data-lang="console">$ python3 -m pip install --user --upgrade dffml
</code></pre><h2 id="async-def-and-await"><code>async def</code> and <code>await</code></h2>
<p><code>await</code> is a keyword which means &quot;give me the return value <em>when it's ready</em>&quot;.
The caller is understands the return value may not be ready right away. The
caller knows that the callee may not have the return value right away since the
callee function was defined with <code>async def</code>. Using the <code>await</code> keyword tells
Python that the caller wishes to pause execution (stay at the same line) and
wait for the callee's return value to be ready. Pausing of execution is usually
due to (but not limited to) network events, such as sending or receiving of
data, or the completion of work done within another thread or process.</p>
<p>The power of using <code>async def</code> (and
<a href="https://docs.python.org/3.7/library/asyncio-task.html"><code>asyncio</code></a> in general)
is that since the execution of a caller can be paused, multiple <code>async def</code>
functions can be run at the same time, an <code>async def</code> function is also known as
a coroutine. When a coroutine reaches the point where it would be waiting on an
event, such as completion of work in another thread or process, or a network
receive, etc. Python pauses the execution of that coroutine, and checks if there
is another coroutine that was waiting for an event which completed during the
running of the previous coroutine. If it finds a coroutine that was waiting for
a now complete event, it runs that coroutine until it either completes, or until
it is stuck waiting on another event.</p>
<h2 id="drop-to-debugger-on-exception">Drop to debugger on exception</h2>
<p><strong>a.py</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="k">if</span> <span class="s2">&#34;a&#34;</span> <span class="ow">in</span> <span class="n">a</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">return</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">func</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div><p>If you pass <code>-i</code> you dump to a <em>fresh</em> intepreter session</p>
<pre><code class="language-console" data-lang="console">$ python -i a.py
Traceback (most recent call last):
  File &quot;a.py&quot;, line 10, in &lt;module&gt;
    main()
  File &quot;a.py&quot;, line 7, in main
    func(3)
  File &quot;a.py&quot;, line 2, in func
    if &quot;a&quot; in a:
TypeError: argument of type 'int' is not iterable
&gt;&gt;&gt; a
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
NameError: name 'a' is not defined
</code></pre><p>If you run with pdb you get an interpreter session within
the same context.</p>
<ul>
<li><a href="https://docs.python.org/3/library/pdb.html">https://docs.python.org/3/library/pdb.html</a></li>
<li><a href="https://docs.pytest.org/en/7.0.x/how-to/failures.html#using-python-library-pdb-with-pytest">https://docs.pytest.org/en/7.0.x/how-to/failures.html#using-python-library-pdb-with-pytest</a></li>
</ul>
<pre><code class="language-console" data-lang="console">$ python -m pdb a.py
&gt; /tmp/tmp.aHjcycHqeF/a.py(1)&lt;module&gt;()
-&gt; def func(a):
(Pdb) c
Traceback (most recent call last):
  File &quot;/usr/lib/python3.7/pdb.py&quot;, line 1699, in main
    pdb._runscript(mainpyfile)
  File &quot;/usr/lib/python3.7/pdb.py&quot;, line 1568, in _runscript
    self.run(statement)
  File &quot;/usr/lib/python3.7/bdb.py&quot;, line 578, in run
    exec(cmd, globals, locals)
  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;/tmp/tmp.aHjcycHqeF/a.py&quot;, line 1, in &lt;module&gt;
    def func(a):
  File &quot;/tmp/tmp.aHjcycHqeF/a.py&quot;, line 7, in main
    func(3)
  File &quot;/tmp/tmp.aHjcycHqeF/a.py&quot;, line 2, in func
    if &quot;a&quot; in a:
TypeError: argument of type 'int' is not iterable
Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program
&gt; /tmp/tmp.aHjcycHqeF/a.py(2)func()
-&gt; if &quot;a&quot; in a:
(Pdb) a
a = 3
(Pdb)
</code></pre><h1 id="requirementstxt"><code>requirements.txt</code></h1>
<p><a href="https://www.python.org/dev/peps/pep-0508/">https://www.python.org/dev/peps/pep-0508/</a></p>]]></content>
  </entry>
  <entry>
    <title>C Development</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/c-development/</id>
    <updated>2020-08-20T21:00:00Z</updated>
    <published>2020-08-20T21:00:00Z</published>
    <content type="html"><![CDATA[<blockquote>
<p>This post is in progress</p>
</blockquote>
<h2 id="make">make</h2>
<p>The <code>make</code> command line utility can be used to help you organize the build
process of your project.</p>
<h3 id="make---tip-and-ticks">make - Tip and Ticks</h3>
<ul>
<li>Use the <code>-j</code> flag to have make compile with all the cores on your machine.
This will speed up your builds when you have many files. If you're having
trouble reading the errors, remove this flag to go back to using only one
core.</li>
</ul>
<h2 id="autotools">autotools</h2>
<p><code>autoconf</code> is a package which provides the tooling that a lot of long time C
projects use. Projects which use <code>autoconf</code> have files such as</p>
<ul>
<li><code>bootstrap</code></li>
<li><code>bootstrap.sh</code></li>
<li><code>configure</code></li>
<li><code>configure.sh</code></li>
<li><code>configure.ac</code></li>
<li><code>Makefile.am</code></li>
</ul>
<p>You'll hear these projects referred to as &quot;autoconf&quot; or &quot;autotools&quot; based
projects.</p>
<h3 id="autotools---troubleshooting">autotools - Troubleshooting</h3>
<p>If you get issues with projects that have <code>bootstrap</code>, <code>configure.sh</code>, or
<code>configure.ac</code>, you likely need to make sure the following packages are
installed on your system. Typaclly you'll find you're missing <code>autoconf-archive</code>
or <code>pkg-config</code>. These can be the source of many m4 macro not found errors.</p>
<ul>
<li>automake</li>
<li>autoconf</li>
<li>autoconf-archive</li>
<li>pkg-config</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Terminal Quickstart</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/terminal-quickstart/</id>
    <updated>2020-07-27T18:00:00Z</updated>
    <published>2020-07-29T18:00:00Z</published>
    <content type="html"><![CDATA[<center>
<img alt="Its dangerous to go alone, take this! $ _" src="/images/terminal-quickstart.gif" />
</center>
<h2 id="references">References</h2>
<p>Haven't looked at the content of these but they might help.</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=UuJuq5wubaU&amp;list=PL78ppT-_wOmvlYSfyiLvkrsZTdQJ7A24L">https://www.youtube.com/watch?v=UuJuq5wubaU&amp;list=PL78ppT-_wOmvlYSfyiLvkrsZTdQJ7A24L</a></li>
</ul>
<h2 id="how-to-read-examples">How to read examples</h2>
<p>You're about to see a lot of examples similar to this one</p>
<pre><code class="language-console" data-lang="console">$ echo Hello World
Hello World
</code></pre><p>The first line in the above example shows</p>
<ul>
<li>
<p>The <em>prompt</em> (<code>$ </code>)</p>
</li>
<li>
<p>The <em>command</em> (<code>echo</code>)</p>
</li>
<li>
<p>The <em>arguments</em> (<code>Hello World</code>)</p>
</li>
</ul>
<p>The second line and all the lines following it until you see another prompt
<code>$ </code> show the output which was a result of running a command. In the above
example. The output was <code>Hello World</code> (the same as the arguments, this is the
purpose of the <code>echo</code> command).</p>
<h2 id="command">Command</h2>
<p>The first word (Including underscores or hyphens) after the prompt <code>$ </code> is the
command.</p>
<pre><code class="language-console" data-lang="console">$ ls
  ^^
   \--- Command
</code></pre><h2 id="argument">Argument</h2>
<p>Everything after the command are called arguments.</p>
<pre><code class="language-console" data-lang="console">$ ls   -l   mydirectory
  ^^   ^^   ^^^^^^^^^^^
   |    |    \--- Argument
   |    |
   |    \--- Argument
   |
   \--- Command
</code></pre><h2 id="running-a-command">Running a command</h2>
<p>To run a command. Type the command and it's arguments into your terminal /
shell. Then hit enter.</p>
<p>In the terminal, there is a general philosophy that no news means good news.
Many commands will only output text to the terminal if that is a part of their
core functionality. Otherwise commands usually output logging information or
error information.</p>
<h2 id="string">String</h2>
<p>The term <em>string</em> means a sequence of characters. Strings are usually found
or referred to within quotes. One can use the word string to talk about any
sequence of characters. Where <em>character</em> likely means something that can be
found in the <a href="https://man7.org/linux/man-pages/man7/ascii.7.html">ASCII</a> table.</p>
<pre><code>       Char          Char
       ----------------------
       SPACE         `
       !             a
       &quot;             b
       #             c
       $             d
       %             e
       &amp;             f
       '             g
       (             h
       )             i
       *             j
       +             k
       ,             l
       -             m
       .             n
       /             o
       0             p
       1             q
       2             r
       3             s
       4             t
       5             u
       6             v
       7             w
       8             x
       9             y
       :             z
       ;             {
       &lt;             |
       =             }
       &gt;             ~
</code></pre><p>For example you could call each of the following a string</p>
<ul>
<li>
<p>&quot;Hello World&quot;</p>
</li>
<li>
<p>/home/username</p>
</li>
<li>
<p>UNIX</p>
</li>
</ul>
<h2 id="navigation-and-paths">Navigation and paths</h2>
<p>A directory is another word for a folder</p>
<p>When talking about where something is (a directory, a file, a command, etc.) we
use the word <em>path</em>.</p>
<p>The last part of a path is the something (the directory, the file, the command,
etc.)</p>
<p>Whenever we have a string that contains all the information we'd need to get
from where we are to wherever something is, we call it a path.</p>
<ul>
<li>
<p><code>.</code> means the directory you're in</p>
</li>
<li>
<p><code>..</code> means the directory above the directory you're in</p>
</li>
<li>
<p><code>/</code> means the path <em>separator</em></p>
</li>
</ul>
<p>The file system works like a tree. We call something a <em>full path</em> or an
<em>absolute path</em> when it starts with <code>/</code>.</p>
<p>The directory a full path starts with is called the <em>root</em>. It's name is &quot;the
root directory&quot;, because we can't give it a name, since it's denoted via the
path separator. Whenever you see <code>/</code> as the only character in a path, or as the
first character of a path, think to yourself, that's the root directory.</p>
<p>Where <code>/</code> is not the first or only character, it's used to show separation
between files and directories.</p>
<p>Examples</p>
<ul>
<li>
<p><code>/</code></p>
<ul>
<li>The root directory</li>
</ul>
</li>
<li>
<p><code>/a/b/c.txt</code></p>
<ul>
<li>Start at the root directory. Then go directory <code>a</code>. Within directory <code>a</code>
there is a directory <code>b</code>. Go into directory <code>b</code>. Within directory <code>b</code> there
is a file named <code>c.txt</code>. This is the file the path is referencing</li>
</ul>
</li>
<li>
<p><code>./a.out</code></p>
<ul>
<li><code>.</code> means the current directory. The separator is seen after it. Then we see
<code>a.out</code> which is the file the path is referencing</li>
</ul>
</li>
<li>
<p><code>../updog</code></p>
<ul>
<li>Look in the directory above the one we're currently in for a file named
<code>updog</code></li>
</ul>
</li>
<li>
<p><code>../../updog</code></p>
<ul>
<li>Look in the directory above the directory above the one we're currently in
for a file named <code>updog</code></li>
</ul>
</li>
</ul>
<h2 id="useful-commands">Useful Commands</h2>
<p>Here are some commands that will be useful for you to understand where you are,
how to move around, and what stuff is in the directory (aka folder) you're in.</p>
<h3 id="where-am-i">Where am I?</h3>
<p>Use the <code>pwd</code> command to find out where you are on your system</p>
<p>In the below example, we run the <code>pwd</code> command and it tells us we're in our
<code>HOME</code> directory.</p>
<pre><code class="language-console" data-lang="console">$ pwd
/home/username
</code></pre><h3 id="what-files-are-here">What files are here?</h3>
<p>The <code>ls</code> command prints the contents of the directory we are currently in</p>
<pre><code class="language-console" data-lang="console">$ ls
file1  file2
</code></pre><p>We can supply it with the name of a directory as an argument to have it list the
contents of that directory</p>
<pre><code class="language-console" data-lang="console">$ ls my-directory
file1  file2
</code></pre><p>If we give <code>-lAF</code> as an argument to <code>ls</code> it will show us all the hidden files as
a long list.</p>
<pre><code class="language-console" data-lang="console">$ ls -lAF
total 0
-rw-rw-r--. 1 username username 0 Jul 30 18:00 file1
-rw-rw-r--. 1 username username 0 Jul 30 18:00 file2
</code></pre><h3 id="how-do-i-move-around">How do I move around?</h3>
<p>Pass the path as the only argument to the <code>cd</code> command to change where you
currently are, known as your <em>current working directory</em>.</p>
<pre><code class="language-console" data-lang="console">$ cd somewhere
</code></pre><p>Pass no arguments to be taken to your home directory</p>
<pre><code class="language-console" data-lang="console">$ cd
</code></pre><h3 id="how-to-i-create-new-directories">How to I create new directories?</h3>
<pre><code class="language-console" data-lang="console">$ mkdir -p my-new-directory
</code></pre><h3 id="download-files">Download files?</h3>
<p>The curl or wget commands download files when provided with a URL</p>
<p>wget will save the file as it's filename</p>
<pre><code class="language-console" data-lang="console">$ wget 'https://example.com/file.tar.gz'
</code></pre><p>curl usually needs to be told to follow redirects using <code>-L</code> and then to have it
save the file as the filename you'll need <code>-O</code> (which if you put it with the
<code>-L</code> you only need one <code>-</code>).</p>
<pre><code class="language-console" data-lang="console">$ curl -LO 'https://example.com/file.tar.gz'
</code></pre><blockquote>
<p>Sometimes one is installed on your system and the other isn't. Try the other
one if you're seeing something allong the lines of &quot;Command not found&quot;</p>
</blockquote>
<h3 id="extract-zip-and-tar-files">Extract zip and tar files?</h3>
<p>When you download software it usually in a <code>.tar</code> or <code>.zip</code> file.</p>
<p>You can extract <code>.tar</code> files using the tar command.</p>
<pre><code class="language-console" data-lang="console">$ tar -xvf file.tar.gz
</code></pre><p>You can extract <code>.zip</code> files using the unzip command.</p>
<pre><code class="language-console" data-lang="console">$ unzip file.zip
</code></pre><h2 id="editor---vim">Editor - VIM</h2>
<p>vim (aka vi) is a common editor you'll find installed on a lot of UNIX systems.</p>
<p>To edit <code>filename.c</code> pass it as an argument to vim</p>
<pre><code class="language-console" data-lang="console">$ vim filename.c
</code></pre><p>Press</p>
<ul>
<li>
<p><code>i</code> to start editing</p>
<ul>
<li>Use the arrow keys to move around</li>
</ul>
</li>
<li>
<p><code>ESC</code> to get out of editing mode</p>
<ul>
<li>
<p><code>:w</code> and then enter to save the file</p>
</li>
<li>
<p><code>:q</code> and then enter to quit</p>
</li>
</ul>
</li>
</ul>
<p>You can learn how to use vim by going to <a href="https://vim-adventures.com/">https://vim-adventures.com/</a></p>
<h2 id="keyboard-shortcuts">Keyboard Shortcuts</h2>
<p>Some keys or key combinations that can speed you up.</p>
<h3 id="tab">Tab</h3>
<p>Whenever you hit the Tab key on your keyboard (above Caps Lock) your shell will
attempt to auto complete whatever you're typing. Hit Tab twice for a list of
autocomplete options. Keep typing and hitting tab and eventually when there is
only one match left it will fill the rest of the word in.</p>
<blockquote>
<p>TODO Add asciinema video of Tab complete in action</p>
</blockquote>
<h3 id="ctrl-r">Ctrl-R</h3>
<p>Start typing to reverse search through your past commands. Hit enter to run.</p>
<blockquote>
<p>TODO Add asciinema video of Ctrl-R complete in action</p>
</blockquote>]]></content>
  </entry>
  <entry>
    <title>CORS</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/cors/</id>
    <updated>2020-07-24T06:00:00Z</updated>
    <published>2020-07-24T06:00:00Z</published>
    <content type="html"><![CDATA[<p>Hey you know JavaScript, that thing everyone loves and hates.</p>
<p>Well chances are you've written some of it. And you don't understand what these
bullshit CORS messages are in the console when you try to make a request to a
service hosted on a diferent domain or port than the one your webpage is served
from.</p>
<p>CORS (Cross Origin Resource Sharing) is a security feature which makes it so
that websites can't send request to other websites without the permission of the
site the request is being sent to. Makes sense, but it can be a pain when
developing.</p>
<p>You need control over the web server you are <em>requesting</em> in order to make CORS
requests work (or a proxy between your client and the server).</p>
<h2 id="fetch">Fetch</h2>
<p>You might have run across this if you've tried using the
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">&quot;Using Fetch&quot;</a>
example from the Mozilla JavaScript documentation. Since it's about CORS.</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
  <span class="nx">mode</span><span class="o">:</span> <span class="s1">&#39;cors&#39;</span><span class="p">,</span>
  <span class="nx">cache</span><span class="o">:</span> <span class="s1">&#39;no-cache&#39;</span><span class="p">,</span>
  <span class="nx">credentials</span><span class="o">:</span> <span class="s1">&#39;same-origin&#39;</span><span class="p">,</span>
  <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
    <span class="c1">// Triggers the sending of `Access-Control-Request-Headers: content-type`
</span><span class="c1"></span>    <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/json&#39;</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="nx">redirect</span><span class="o">:</span> <span class="s1">&#39;follow&#39;</span><span class="p">,</span>
  <span class="nx">referrer</span><span class="o">:</span> <span class="s1">&#39;no-referrer&#39;</span><span class="p">,</span>
  <span class="nx">body</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">),</span> <span class="c1">// body data type must match &#34;Content-Type&#34; header
</span><span class="c1"></span><span class="p">})</span>
</code></pre></div><h2 id="example-request">Example Request</h2>
<p>When your JavaScript makes a <code>POST</code> request to <code>/url/path/requested/by/client</code>,
the following is the interaction between the server and the client (for the
<em>preflight</em> request, in the successful case).</p>
<p>Since we've issued a <code>POST</code> request instead of a <code>GET</code> request, the browser is
going to make a request before the <code>POST</code> called the <em>preflight</em> request. This
request has a HTTP method of <code>OPTIONS</code>. The purpose is for the browser to check
if this JavaScript is allowed to make a <code>POST</code> request to the server.</p>
<pre><code>*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)
&gt; OPTIONS /url/path/requested/by/client HTTP/1.1
&gt; Host: 127.0.0.1:8080
&gt; Accept-Encoding: deflate, gzip
&gt; User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
&gt; Accept: */*
&gt; Accept-Language: en-US,en;q=0.5
&gt; Access-Control-Request-Method: POST
&gt; Access-Control-Request-Headers: content-type
&gt; Referer: http://127.0.0.1:5000/no-referrer
&gt; Origin: http://127.0.0.1:5000
&gt; DNT: 1
&gt; Connection: keep-alive
&gt; Pragma: no-cache
&gt; Cache-Control: no-cache
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Access-Control-Allow-Origin: http://127.0.0.1:5000
&lt; Access-Control-Allow-Methods: POST
&lt; Access-Control-Allow-Headers: CONTENT-TYPE
&lt; Content-Length: 0
&lt; Content-Type: application/octet-stream
&lt; Date: Wed, 31 Jul 2019 20:35:24 GMT
&lt; Server: Python/3.7 aiohttp/3.5.4
&lt; 
* Connection #0 to host 127.0.0.1 left intact
</code></pre><p>There's a couple important parts to this.</p>
<ul>
<li><code>OPTIONS</code>
<ul>
<li>Since the request is for the <code>OPTIONS</code> method. We need to make sure whatever
server we're using, or library we're using to make a webserver, will repond
to <code>OPTIONS</code> requests on the URL requested.</li>
</ul>
</li>
<li><code>Access-Control-Request-Headers</code>
<ul>
<li>When the server responds to the <code>OPTIONS</code> request, it should include the
<code>Access-Control-Allow-Headers</code> header in the response. This tells the
browser what headers the JavaScript is allowed to send.</li>
</ul>
</li>
</ul>
<h2 id="fixing-it">Fixing it</h2>
<p>You likely need to find some middleware for whatever framework your using, or
search for how to enable CORS with whatever your working with.</p>
<p>For example</p>
<ul>
<li>
<p><a href="https://enable-cors.org/server.html">https://enable-cors.org/server.html</a></p>
<ul>
<li>List of how to enable for various servers and clients</li>
</ul>
</li>
<li>
<p><a href="https://github.com/aio-libs/aiohttp-cors">https://github.com/aio-libs/aiohttp-cors</a></p>
<ul>
<li>If you're using aiohttp server</li>
</ul>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>ffmpeg</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/ffmpeg/</id>
    <updated>2020-07-24T06:00:00Z</updated>
    <published>2020-07-24T06:00:00Z</published>
    <content type="html"><![CDATA[<p>ffmpeg is a powerful tool for command line video, audio, and image processing
(centered around images and audio as they relate to video).</p>
<p>Here's some things you can do with it</p>
<h2 id="video-to-gif">Video to GIF</h2>
<pre><code class="language-console" data-lang="console">$ ffmpeg -ss 0.3 -t 40 -i input-video.flv -vf \
  &quot;fps=10,scale=1920:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse&quot; \
  -loop 0 output.gif
</code></pre><p>Arguments:</p>
<ul>
<li>
<p><code>-ss</code> start second</p>
</li>
<li>
<p><code>-t</code> end after X seconds</p>
</li>
<li>
<p><code>-y</code> means overwrite the output file without asking</p>
</li>
</ul>
<p>Notes:</p>
<ul>
<li>
<p><code>scale=1920</code> lower this number to lower Y (I think?) resolution, lower will
give you a smaller file size</p>
</li>
<li>
<p><code>fps=10</code> lower this number to speed up, number of frames per second, also will
decrease size of output file</p>
</li>
</ul>
<h2 id="crop-video">Crop video</h2>
<pre><code class="language-console" data-lang="console">$ ffmpeg -i putin-on-ritz.mp3 -ss 00:00:43 -t 00:00:57 -async 1 cut.mp3
</code></pre><h2 id="combine-with-image">Combine with image</h2>
<pre><code class="language-console" data-lang="console">$ ffmpeg -loop 1 -y -i putin-on-the-ritz.jpg -i cut.mp3 -shortest out.webm
</code></pre>]]></content>
  </entry>
  <entry>
    <title>Linux Kernel Development Tips And Tricks</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/linux-kernel/</id>
    <updated>2020-10-06T08:00:00Z</updated>
    <published>2020-07-24T06:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="resources">Resources</h1>
<ul>
<li><a href="https://linux-kernel-labs.github.io/refs/heads/master/index.html">https://linux-kernel-labs.github.io/refs/heads/master/index.html</a></li>
</ul>
<h1 id="videos">Videos</h1>
<ul>
<li>Kernel Recipes 2014 - The Linux Kernel, how fast it is developed and how we stay sane doing it
<ul>
<li><a href="https://www.youtube.com/watch?v=DmDmXDtaz-U">https://www.youtube.com/watch?v=DmDmXDtaz-U</a></li>
</ul>
</li>
<li>LPC2019 - Reflections on kernel quality, development process and testing
<ul>
<li><a href="https://www.youtube.com/watch?v=iAfrrNdl2f4">https://www.youtube.com/watch?v=iAfrrNdl2f4</a></li>
</ul>
</li>
<li>virtio
<ul>
<li><a href="https://blogs.oracle.com/linux/post/introduction-to-virtio">https://blogs.oracle.com/linux/post/introduction-to-virtio</a></li>
</ul>
</li>
</ul>
<h1 id="quickstart">Quickstart</h1>
<p>We are going to download the Git repositories of QEMU and the Linux kernel. We
are not going to cover what dependencies are required. You should read the
reference links for each section to help you get the compilers and other build
tools you will need.</p>
<h2 id="building-the-kernel">Building the Kernel</h2>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
<span class="nb">cd</span> linux
git checkout v5.8
<span class="c1"># Copy your system&#39;s config into the kernel source tree to use as your config</span>
<span class="c1"># You can modify it too if you want but you can be pretty sure this will give</span>
<span class="c1"># you a working kernel without having to edit it</span>
cp <span class="k">$(</span>ls /boot/config-* <span class="p">|</span> head -n 1<span class="k">)</span> .config
make olddefconfig
<span class="c1"># Build just the bzImage needed to boot the VM. If you want to build all the</span>
<span class="c1"># modules too, just leave off the last argument (bzImage)</span>
make -j <span class="k">$(($(</span>nproc<span class="k">)</span><span class="o">*</span><span class="m">4</span><span class="k">))</span> bzImage
</code></pre></div><blockquote>
<p>References</p>
<ul>
<li><a href="https://docs.fedoraproject.org/en-US/quick-docs/kernel/build-custom-kernel/#_get_the_dependencies">Fedora Build Dependencies</a></li>
<li><a href="https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel#Build_Environment">Ubuntu Build Dependencies</a></li>
</ul>
</blockquote>
<h2 id="building-qemu">Building QEMU</h2>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git clone https://git.qemu.org/git/qemu.git
<span class="nb">cd</span> qemu
git checkout v5.1.0
git submodule init
git submodule update --recursive
mkdir build
<span class="nb">cd</span> build
../configure --target-list<span class="o">=</span>x86_64-softmmu
make -j <span class="k">$(($(</span>nproc<span class="k">)</span><span class="o">*</span><span class="m">4</span><span class="k">))</span>
</code></pre></div><blockquote>
<p>References</p>
<ul>
<li><a href="https://wiki.qemu.org/Hosts/Linux">https://wiki.qemu.org/Hosts/Linux</a></li>
<li><a href="https://www.qemu.org/download/#source">https://www.qemu.org/download/#source</a></li>
</ul>
</blockquote>
<h2 id="running-your-vm">Running your VM</h2>
<p>Put the following script in a file called <code>run-vm.sh</code>. It will be the way you
run your development Kernel in a virtual machine. You can modify it as you wish.</p>
<script src="https://gist.github.com/pdxjohnny/a0dc3a58b4651dc3761bee65a198a80d.js"></script>
<p>Here's how you download it, make it executable, and run it.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">curl -o run-vm.sh -fSL https://gist.github.com/pdxjohnny/a0dc3a58b4651dc3761bee65a198a80d/raw/da2f456c9ecbb56bf84ee30c8c83a2762e86fb43/run-vm.sh <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span><span class="nb">echo</span> <span class="s2">&#34;eb5c49fb0aff6b3293ad6f4bd8c7a9c32df97f40d3c8c4fe404b72c1e9c283b44e714be493ce88b5f22e5bb717b8f71d  run-vm.sh&#34;</span> <span class="p">|</span> sha384sum -c - <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>chmod <span class="m">755</span> run-vm.sh
./run-vm.sh
</code></pre></div><h2 id="tools">Tools</h2>
<ul>
<li>
<p><a href="https://pypi.org/project/b4/">b4</a></p>
<ul>
<li>Grab patches from mailing list</li>
</ul>
</li>
</ul>
<h2 id="exploitation">Exploitation</h2>
<p>SMEP disable via ROP, KASLR bypasss via DMESG</p>
<ul>
<li><a href="https://web.archive.org/web/20171029060939/http://www.blackbunny.io/linux-kernel-x86-64-bypass-smep-kaslr-kptr_restric/">https://web.archive.org/web/20171029060939/http://www.blackbunny.io/linux-kernel-x86-64-bypass-smep-kaslr-kptr_restric/</a></li>
</ul>
<h2 id="hacking-with-vim">Hacking With VIM</h2>
<p><a href="https://stackoverflow.com/questions/33676829/vim-configuration-for-linux-kernel-development">https://stackoverflow.com/questions/33676829/vim-configuration-for-linux-kernel-development</a></p>
<h2 id="build-in-tree-modules">Build In Tree Modules</h2>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">make -j <span class="k">$(($(</span>nproc<span class="k">)</span><span class="o">*</span><span class="m">4</span><span class="k">))</span> <span class="nv">M</span><span class="o">=</span>arch/x86/kvm/ modules
</code></pre></div><h2 id="install-kernel-to-chroot">Install Kernel To chroot</h2>
<p>Here's how you install a kernel to a chroot. Or tar it up and
send it over to another system for use there.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Edit your config</span>
make olddefconfig
<span class="nb">export</span> <span class="nv">INSTALL_MOD_PATH</span><span class="o">=</span>/path/to/your/chroot
<span class="nb">export</span> <span class="nv">INSTALL_PATH</span><span class="o">=</span><span class="si">${</span><span class="nv">INSTALL_MOD_PATH</span><span class="si">}</span>/boot
mkdir -p <span class="s2">&#34;</span><span class="si">${</span><span class="nv">INSTALL_PATH</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="c1"># Use number of cores times 4, this usually is about how many</span>
<span class="c1"># threads your system can run</span>
make -j <span class="k">$(($(</span>nproc<span class="k">)</span><span class="o">*</span><span class="m">4</span><span class="k">))</span>
make install
make modules_install -j <span class="k">$(($(</span>nproc<span class="k">)</span><span class="o">*</span><span class="m">4</span><span class="k">))</span>
</code></pre></div><h2 id="chroot">Chroot</h2>
<p>Instead of doing a regular chroot use <code>systemd-nspawn</code> which gives you a more fully featured chroot.</p>
<p><a href="https://wiki.archlinux.org/index.php/Systemd-nspawn">https://wiki.archlinux.org/index.php/Systemd-nspawn</a></p>
<h2 id="debugging-with-gdb">Debugging With GDB</h2>
<p>If you are lucky enough to be working on something thats in a VM you can get
GDB working!</p>
<p>You need to run the kernel without KASLR (on the cmdline thats <code>nokaslr</code>).</p>
<blockquote>
<p>If you don't disable KASLR gdb can't set breakpoints or display the source to you</p>
</blockquote>
<p>Then you run QEMU with <code>-s -S</code>.</p>
<ul>
<li><code>-s</code> says enable GDB on port <code>1234</code></li>
<li><code>-S</code> says wait to start the VM until GDB connects.</li>
</ul>
<p>Run GDB with <code>gdb ./vmlinux</code></p>
<p>Now run</p>
<pre><code class="language-console" data-lang="console">(gdb) target remote 127.0.0.1:1234
</code></pre><p>To view the source code, type <code>layout src</code></p>
<p>To focus back on the typey type window, type <code>focus cmd</code></p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c">   <span class="err">┌──</span><span class="n">arch</span><span class="o">/</span><span class="n">x86</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">machine_kexec_64</span><span class="p">.</span><span class="n">c</span><span class="err">─────────────────────────────────────────────────────────────────┐</span>
   <span class="err">│</span><span class="mi">353</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span>                                                                      <span class="err">│</span>
   <span class="err">│</span><span class="mi">354</span>                         <span class="k">return</span> <span class="n">result</span><span class="p">;</span>                                                           <span class="err">│</span>
   <span class="err">│</span><span class="mi">355</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">356</span>                 <span class="cm">/* update purgatory as needed */</span>                                                 <span class="err">│</span>
   <span class="err">│</span><span class="mi">357</span>                 <span class="n">result</span> <span class="o">=</span> <span class="n">arch_update_purgatory</span><span class="p">(</span><span class="n">image</span><span class="p">);</span>                                           <span class="err">│</span>
   <span class="err">│</span><span class="mi">358</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span>                                                                      <span class="err">│</span>
   <span class="err">│</span><span class="mi">359</span>                         <span class="k">return</span> <span class="n">result</span><span class="p">;</span>                                                           <span class="err">│</span>
   <span class="err">│</span><span class="mi">360</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">361</span>                 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>                                                                        <span class="err">│</span>
   <span class="err">│</span><span class="mi">362</span>         <span class="p">}</span>                                                                                        <span class="err">│</span>
   <span class="err">│</span><span class="mi">363</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">364</span>         <span class="kt">void</span> <span class="n">machine_kexec_cleanup</span><span class="p">(</span><span class="k">struct</span> <span class="n">kimage</span> <span class="o">*</span><span class="n">image</span><span class="p">)</span>                                         <span class="err">│</span>
   <span class="err">│</span><span class="mi">365</span>         <span class="p">{</span>                                                                                        <span class="err">│</span>
   <span class="err">│</span><span class="mi">366</span>                 <span class="n">free_transition_pgtable</span><span class="p">(</span><span class="n">image</span><span class="p">);</span>                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">367</span>         <span class="p">}</span>                                                                                        <span class="err">│</span>
   <span class="err">│</span><span class="mi">368</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">369</span>         <span class="cm">/*                                                                                       │
</span><span class="cm">   │370          * Do not allocate memory (or fail in any way) in machine_kexec().                       │
</span><span class="cm">   │371          * We are past the point of no return, committed to rebooting now.                       │
</span><span class="cm">   │372          */</span>                                                                                      <span class="err">│</span>
   <span class="err">│</span><span class="mi">373</span>         <span class="kt">void</span> <span class="n">machine_kexec</span><span class="p">(</span><span class="k">struct</span> <span class="n">kimage</span> <span class="o">*</span><span class="n">image</span><span class="p">)</span>                                                 <span class="err">│</span>
<span class="n">B</span><span class="o">+&gt;</span><span class="err">│</span><span class="mi">374</span>         <span class="p">{</span>                                                                                        <span class="err">│</span>
   <span class="err">│</span><span class="mi">375</span>                 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">page_list</span><span class="p">[</span><span class="n">PAGES_NR</span><span class="p">];</span>                                               <span class="err">│</span>
   <span class="err">│</span><span class="mi">376</span>                 <span class="kt">void</span> <span class="o">*</span><span class="n">control_page</span><span class="p">;</span>                                                              <span class="err">│</span>
   <span class="err">│</span><span class="mi">377</span>                 <span class="kt">int</span> <span class="n">save_ftrace_enabled</span><span class="p">;</span>                                                         <span class="err">│</span>
   <span class="err">│</span><span class="mi">378</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">379</span>         <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_KEXEC_JUMP</span>                                                                 <span class="err">│</span>
   <span class="err">│</span><span class="mi">380</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">image</span><span class="o">-&gt;</span><span class="n">preserve_context</span><span class="p">)</span>                                                     <span class="err">│</span>
   <span class="err">│</span><span class="mi">381</span>                         <span class="n">save_processor_state</span><span class="p">();</span>                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">382</span>         <span class="err">#</span><span class="n">endif</span>                                                                                   <span class="err">│</span>
   <span class="err">│</span><span class="mi">383</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">384</span>                 <span class="n">save_ftrace_enabled</span> <span class="o">=</span> <span class="n">__ftrace_enabled_save</span><span class="p">();</span>                                   <span class="err">│</span>
   <span class="err">│</span><span class="mi">385</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">386</span>                 <span class="cm">/* Interrupts aren&#39;t acceptable while we reboot */</span>                               <span class="err">│</span>
   <span class="err">│</span><span class="mi">387</span>                 <span class="n">local_irq_disable</span><span class="p">();</span>                                                             <span class="err">│</span>
   <span class="err">│</span><span class="mi">388</span>                 <span class="n">hw_breakpoint_disable</span><span class="p">();</span>                                                         <span class="err">│</span>
   <span class="err">│</span><span class="mi">389</span>                                                                                                  <span class="err">│</span>
   <span class="err">│</span><span class="mi">390</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">image</span><span class="o">-&gt;</span><span class="n">preserve_context</span><span class="p">)</span> <span class="p">{</span>                                                   <span class="err">│</span>
   <span class="err">│</span><span class="mi">391</span>         <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_X86_IO_APIC</span>                                                                <span class="err">│</span>
   <span class="err">│</span><span class="mi">392</span>                         <span class="cm">/*                                                                       │
</span><span class="cm">   │393                          * We need to put APICs in legacy mode so that we can                    │
</span><span class="cm">   │394                          * get timer interrupts in second kernel. kexec/kdump                    │
</span><span class="cm">   │395                          * paths already have calls to restore_boot_irq_mode()                   │
</span><span class="cm">   │396                          * in one form or other. kexec jump path also need one.                  │
</span><span class="cm">   └─────────────────────────────────────────────────────────────────────────────────────────────────────┘
</span><span class="cm">remote Thread 1.1 In: machine_kexec                                          L374  PC: 0xffffffff810635f0
</span><span class="cm">(gdb) b *machine_kexec
</span><span class="cm">Breakpoint 1 at 0xffffffff810635f0: file arch/x86/kernel/machine_kexec_64.c, line 374.
</span><span class="cm">(gdb) c
</span><span class="cm">Continuing.
</span><span class="cm">
</span><span class="cm">Breakpoint 1, machine_kexec (image=0xffff888006f96800) at arch/x86/kernel/machine_kexec_64.c:374
</span><span class="cm">(gdb)
</span></code></pre></div><p>Core dumps and kgdb: <a href="https://elinux.org/images/f/f0/Bingham.pdf">https://elinux.org/images/f/f0/Bingham.pdf</a></p>
<h2 id="kvm">KVM</h2>
<p><a href="https://lwn.net/Articles/658511/">https://lwn.net/Articles/658511/</a></p>
<h3 id="nested-and-vmcs">Nested and VMCS</h3>
<p><a href="https://web.archive.org/web/20191105205408/http://events19.linuxfoundation.org/wp-content/uploads/2017/12/Improving-KVM-x86-Nested-Virtualization-Liran-Alon-Oracle.pdf">https://web.archive.org/web/20191105205408/http://events19.linuxfoundation.org/wp-content/uploads/2017/12/Improving-KVM-x86-Nested-Virtualization-Liran-Alon-Oracle.pdf</a></p>
<h2 id="contributions">Contributions</h2>
<p>In your patches, write all about what you're doing. The kernel doesn't
seem to like comments very much. Instead they rely on people writing
insanely detailed commit messages describing what they are changing.</p>
<p>Every time you change the kernel you're changing something that has been
working fine for someone for X amount of long time. As such, you need to
be convincing for why your change should be accepted! Make your coverletter
and commit messages very detailed. The kernel is a big place. It may have
been a long time since someone reading your patch series has looked at the
place you're working. Be courtious and remind them of all the moving peices
involved in what you're doing, and why and how you're changing them.</p>
<h3 id="etiquette">Etiquette</h3>
<ul>
<li>You can say <code>patch</code> or <code>patchset</code> in your coverletter. Just not in the
commit messages themselves.</li>
</ul>
<h2 id="kvm-1">KVM</h2>
<h3 id="vmx">VMX</h3>
<p>When a VM enters VMX root mode (aka &quot;I'm gonna run some VMs mode&quot;) using
the <code>VMXON</code> instruction, it sets up what's called a <code>VMCS</code> for each VM
/ virtualized processor it wants to run. All VMX related instructions
operate on whatever VMCS we pointed to via the <code>VMPTRLD</code> instruction.</p>
<h3 id="nested">Nested</h3>
<ul>
<li>
<p>L0 == The host</p>
</li>
<li>
<p>L1 == The guest</p>
</li>
<li>
<p>L2 == The guest of the guest</p>
</li>
</ul>
<p><code>vmx/nested.c</code> is responsible for emulating VMX for L1. When L1 does a
<code>VMLAUNCH</code> or <code>VMRESUME</code>, <code>enter_guest_mode</code> is called, which means that
<code>is_guest_mode</code> will now return <code>true</code>.</p>
<h3 id="terminology">Terminology</h3>
<p>Root mode = L0 when not running a virtual machine</p>
<p>Non-root mode = L0 when running a virtual machine L(n)</p>
<h2 id="assembly">Assembly</h2>
<p>What is <code>jmp 1f</code>?</p>
<p><a href="https://stackoverflow.com/a/27353169/12310488">https://stackoverflow.com/a/27353169/12310488</a></p>]]></content>
  </entry>
  <entry>
    <title>QEMU</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/qemu/</id>
    <updated>2020-07-24T06:00:00Z</updated>
    <published>2020-07-24T06:00:00Z</published>
    <content type="html"><![CDATA[<p>QEMU is an indispensable tool for the virtual machine inclined. It's a command
line utility for running virtual machines.</p>
<p>Main documentation: <a href="https://www.qemu.org/docs/master/system/">https://www.qemu.org/docs/master/system/</a></p>
<h2 id="example-flags">Example Flags</h2>
<p>Run a 64 bit Intel / AMD system</p>
<pre><code class="language-console" data-lang="console">qemu-system-x86_64 ...
</code></pre><h3 id="kvm">KVM</h3>
<p>Without KVM your VM will be VERY VERY VERY slow. You'll want to enable this.</p>
<pre><code>  -enable-kvm
</code></pre><p>Make sure your use account has access to <code>/dev/kvm</code>, use <code>chown</code> to make the
group <code>kvm</code>, and add your user to that group. You'll need log out and log back
in for changes to take effect. Or run <code>bash --login</code>.</p>
<pre><code class="language-console" data-lang="console">$ groupadd kvm
$ sudo usermod -aG kvm $USER
$ ll /dev/kvm
crw-rw-rw- 1 root root 10, 232 Jul 22 12:10 /dev/kvm
$ chown root:kvm /dev/kvm
$ ll /dev/kvm
crw-rw-rw- 1 root kvm 10, 232 Jul 22 12:10 /dev/kvm
</code></pre><h3 id="multiple-cpus">Multiple CPUs</h3>
<pre><code>  -smp cpus=4
</code></pre><p>More detailed</p>
<pre><code>  -smp sockets=1,cpus=4,cores=2 -cpu host
</code></pre><h3 id="memory">Memory</h3>
<pre><code>  -m 8192M
</code></pre><h3 id="networking---nat">Networking - NAT</h3>
<pre><code>  -netdev user,id=mynet0 \
  -device virtio-net-pci,netdev=mynet0
</code></pre><p>You can also do what's known as &quot;bridged&quot; networking. It can be a bit of a mess
though. It's covered in the main QEMU documenation at the top.</p>
<blockquote>
<p>TODO Cover bridged networking</p>
</blockquote>
<h3 id="usb">USB</h3>
<p>You may want to give a VM control over a USB device, such as a USB NIC.</p>
<p>Creating a ehci device and attaching the usb device to it is important!</p>
<p>Use <code>lsusb -v</code> to find the idProduct (productid) and idVendor (vendorid)</p>
<pre><code>  -usb \
  -device usb-ehci,id=ehci \
  -device usb-host,bus=ehci.0,vendorid=0x0424,productid=0xEC00
</code></pre><h3 id="share-small-files">Share small files</h3>
<pre><code>  -virtfs local,path=$PWD/share,mount_tag=host0,security_model=mapped-file,id=host0
</code></pre><h3 id="fast-random-number-generator">Fast Random Number Generator</h3>
<pre><code>  -device virtio-rng-pci
</code></pre><h3 id="port-forwarding">Port Forwarding</h3>
<pre><code>  -net \
    user,hostfwd=tcp::2222-:22,hostfwd=tcp::4444-:2222
</code></pre><h3 id="guest-image">Guest Image</h3>
<p>For a raw <code>.img</code> or <code>.iso</code></p>
<pre><code>  -drive \
    file=&quot;image.iso&quot;,if=virtio,aio=threads,format=raw
</code></pre><p>For a <code>.qcow2</code></p>
<pre><code>  -drive \
    file=&quot;image.qcow2&quot;,if=virtio,aio=threads,format=qcow2
</code></pre><h3 id="kernel">Kernel</h3>
<p>Boot directly to a Linux kernel binary (skips some BIOS stuff)</p>
<pre><code>  -kernel \
    &quot;linux-source-tree/arch/x86/boot/bzImage&quot;
</code></pre><h3 id="kernel-cmdline">Kernel cmdline</h3>
<p>The <code>root*</code> options here correspond to the
<a href="#host-filesystem-passthrough">Host Filesystem Passthrough</a> section.</p>
<pre><code>  -append \
    &quot;console=ttyS0 rootfstype=9p root=fsdev-root ro rootflags=trans=virtio,version=9p2000.u init=/usr/lib/systemd/systemd&quot;
</code></pre><h3 id="disable-gui">Disable GUI</h3>
<pre><code>  -nographic
</code></pre><h3 id="cpu-emulation">CPU Emulation</h3>
<p>Specify <code>host</code> to have QEMU not emulate another CPU, just use the host CPU.</p>
<pre><code>  -cpu host
</code></pre><h3 id="specify-bios">Specify BIOS</h3>
<p>You'll need this if you want to use UEFI</p>
<pre><code>  -bios \
    &quot;path/to/OVMF.fd&quot;
</code></pre><h3 id="bios-debugging-connection">BIOS Debugging Connection</h3>
<pre><code>  -chardev \
    pipe,path=qemudebugpipe,id=seabios \
  -device \
    isa-debugcon,iobase=0x402,chardev=seabios
</code></pre><p>Reference: <a href="https://www.seabios.org/Debugging#Debugging_with_gdb_on_QEMU">https://www.seabios.org/Debugging#Debugging_with_gdb_on_QEMU</a></p>
<h3 id="host-filesystem-passthrough">Host Filesystem Passthrough</h3>
<p>Use a directory on the host as a filesystem for the guest.</p>
<p>This requires that the guest kernel has been configured with:</p>
<pre><code>CONFIG_9P_FS=y
CONFIG_9P_FS_POSIX_ACL=y
CONFIG_9P_FS_SECURITY=y
CONFIG_NET_9P=y
CONFIG_NET_9P_VIRTIO=y
</code></pre><p><em>9P fs is buggy as all hell</em> In particular, fsync seems to be broken.</p>
<pre><code>  -fsdev \
    local,id=fsdev-root,path=&quot;${CHROOT}&quot;,security_model=passthrough,readonly \
  -device \
    virtio-9p-pci,fsdev=fsdev-root,mount_tag=/dev/root
</code></pre><p>Make sure you're using the <a href="#kernel-cmdline">corresponding kernel cmdline</a>
options.</p>
<h3 id="creating-a-bootable-uefi-guest-image">Creating A Bootable UEFI Guest Image</h3>
<p>Create <code>qcow2</code> image</p>
<pre><code class="language-console" data-lang="console">$ qemu-img create -f qcow2 image.qcow2 20G
</code></pre><blockquote>
<p>Source of NBD commands: <a href="https://gist.github.com/shamil/62935d9b456a6f9877b5">https://gist.github.com/shamil/62935d9b456a6f9877b5</a></p>
</blockquote>
<p>Enable network block devices</p>
<pre><code class="language-console" data-lang="console">$ sudo modprobe nbd max_part=8
</code></pre><p>Map the image file to the <code>/dev/nbd0</code> network block device</p>
<pre><code class="language-console" data-lang="console">$ sudo qemu-nbd --connect=/dev/nbd0 image.qcow2
</code></pre><p>Create GPT partition table (UEFI)</p>
<pre><code class="language-console" data-lang="console">$ sudo parted /dev/nbd0 &lt;&lt; 'EOF'
mklabel gpt
mkpart primary fat32 1MiB 261MiB
set 1 esp on
mkpart primary linux-swap 261MiB 10491MiB
mkpart primary ext4 10491MiB 100%
EOF
</code></pre><p>Format partitions</p>
<pre><code class="language-console" data-lang="console">$ sudo mkfs.fat /dev/nbd0p1
$ sudo mkswap /dev/nbd0p2
$ sudo mkfs.ext4 /dev/nbd0p3
</code></pre><p>Unmount and disconnect</p>
<pre><code class="language-console" data-lang="console">$ sudo umount -R /mnt/somepoint/
$ sudo qemu-nbd --disconnect /dev/nbd0
</code></pre><blockquote>
<p>parted commands from: <a href="https://wiki.archlinux.org/index.php/Parted#UEFI/GPT_examples">https://wiki.archlinux.org/index.php/Parted#UEFI/GPT_examples</a></p>
</blockquote>
<h3 id="cpu-hotplug">CPU Hotplug</h3>
<pre><code class="language-conole" data-lang="conole">  -smp 1,maxcpus=2 -qmp unix:/tmp/q,server,nowait
</code></pre><p>In another shell</p>
<pre><code class="language-console" data-lang="console">$ sudo qemu/scripts/qmp/qmp-shell -p -v /tmp/q
Welcome to the QMP low-level shell!
Connected to QEMU 4.1.0

(QEMU) device_add id=cpu-2 driver=host-x86_64-cpu socket-id=1 core-id=0 thread-id=0 die-id=0
</code></pre><p>Back in your Linux guest you'll see
<code>[   51.190460] CPU1 has been hot-added</code> in the dmesg logs.</p>
<p>To initialize the CPU within the guest</p>
<pre><code class="language-console" data-lang="console"># echo 1 &gt; /sys/devices/system/cpu/cpu1/online
</code></pre><blockquote>
<p>Reference: <a href="https://wiki.qemu.org/Features/CPUHotplug">https://wiki.qemu.org/Features/CPUHotplug</a></p>
</blockquote>
<h3 id="precompiled-uefi-firmware">Precompiled UEFI Firmware</h3>
<p><a href="https://cdn.download.clearlinux.org/image/OVMF.fd">https://cdn.download.clearlinux.org/image/OVMF.fd</a></p>
<pre><code>UEFI_BIOS=&quot;-bios OVMF.fd&quot;

if [ -f OVMF_VARS.fd -a -f OVMF_CODE.fd ]; then
    UEFI_BIOS=&quot; -drive file=OVMF_CODE.fd,if=pflash,format=raw,unit=0,readonly=on &quot;
    UEFI_BIOS+=&quot; -drive file=OVMF_VARS.fd,if=pflash,format=raw,unit=1 &quot;
fi
</code></pre>]]></content>
  </entry>
  <entry>
    <title>Wireguard HowTo</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/wireguard/</id>
    <updated>2020-07-24T06:00:00Z</updated>
    <published>2020-07-24T06:00:00Z</published>
    <content type="html"><![CDATA[<p>Wireguard is a VPN that comes built into Linux kernels &gt;= 5.6
It also has clients for OSs like Windows, OSX, and Android.</p>
<p>If you're looking for how to have a virtual LAN party, Wireguard
is a great way to do it. Since it's cross platform. You can even
play Windows games on Linux using Lutris and network them with
Wireguard to get Windows and Linux machines playing together.</p>
<h2 id="checking-if-you-have-it">Checking If You Have It</h2>
<p>To check if you're Linux distro alreay has wireguard support,
look in the modules directory.</p>
<blockquote>
<p>My version at the moment is <code>5.6.4-152.current</code>, yours will
likely be different</p>
</blockquote>
<pre><code class="language-console" data-lang="console">$ find /lib/modules/$(uname -r) -type f -name '*wireguard*.ko*'
/lib/modules/5.6.4-152.current/kernel/drivers/net/wireguard/wireguard.ko
</code></pre><p>If that doesn't show anything then check if it's built into the
kernel. This command will show some output if it is. On my system
it's a <code>.ko</code>, therefore it's not builtin, therefore this command
showed nothing.</p>
<pre><code class="language-console" data-lang="console">$ grep wireguard /lib/modules/$(uname -r)/modules.builtin
</code></pre><p>You'll also need the <code>wg</code> command line utility. Just type <code>wg</code> and
if you see command not found then you'll want to head over to
<a href="https://www.wireguard.com/install/">https://www.wireguard.com/install/</a> for details on how to install it.</p>
<h2 id="getting-it">Getting It</h2>
<p>If you don't have a version of the Linux kernel with wireguard
built in, you can compile and use the
<a href="https://git.zx2c4.com/wireguard-go/about/">wireguard-go</a> project.
It won't be as fast as compiling the kernel module but it might be
a hell of a lot less steps.</p>
<p>If you don't want to take the performance hit, you can compile the
kernel module as seen in the
<a href="https://www.wireguard.com/compilation/">compilation</a> instructions.</p>
<p>You'll build it, then add it to the kernel with <code>insmod</code>.</p>
<pre><code class="language-console" data-lang="console">$ sudo insmod wireguard-linux-compat/src/wireguard.ko
</code></pre><p>Check <code>dmesg</code>, if you see complaints about missing symbols,
you can recompile those modules that are missing, as seen
under kernel requirements. You'll want to find out how your
Linux distrobution recommends compiling the kernel. This is
because many of them have patches that your system won't
work without added to the kernel. You might be able to run
the kernel from kernel.org, but don't count on that.</p>
<h2 id="configuring-it">Configuring It</h2>
<p>The following is an example config file one might use.
There are comments within it to explain everything.</p>
<div class="highlight"><pre class="chroma"><code class="language-ini" data-lang="ini"><span class="c1"># The Interface section is for defining things about this</span>
<span class="c1"># machine</span>
<span class="k">[Interface]</span>
<span class="c1"># The port wireguard will listen on for others to use as</span>
<span class="c1"># and Endpoint (along with this machines IP)</span>
<span class="na">ListenPort</span> <span class="o">=</span> <span class="s">60200</span>
<span class="c1"># On Windows when you click Add Tunnel it will generate</span>
<span class="c1"># a private key for you. On Linux you&#39;ll want to put the</span>
<span class="c1"># output of `wg genkey` here.</span>
<span class="c1"># The config files of the other machines in the network</span>
<span class="c1"># will need the public key that correseponds to this private</span>
<span class="c1"># key. On Windows it will show you the public key in a little</span>
<span class="c1"># box under the config file name when it&#39;s being edited. On</span>
<span class="c1"># Linux, you can run the following command to parse this file</span>
<span class="c1"># to get the private key and convert it into the public key</span>
<span class="c1"># $ grep &#39;PrivateKey = &#39; wg.conf | tail -n 1 | sed -e &#39;s/.* = //g&#39; | wg pubkey</span>
<span class="na">PrivateKey</span> <span class="o">=</span> <span class="s">REPLACE_WITH_PRIVATE_KEY</span>
<span class="c1"># On Windows you&#39;ll want to specify the address for the</span>
<span class="c1"># machine like by removing the # in front. The setup.sh</span>
<span class="c1"># script that follows parses it out of this config file</span>
<span class="c1"># and uses it as your address. For Linux the wg tool will</span>
<span class="c1"># tell you there&#39;s an error if you uncomment it.</span>
<span class="c1"># You&#39;ll want to make sure you leave this as /24 and</span>
<span class="c1"># the other addresses as /32. See the References section</span>
<span class="c1"># for more details on this.</span>
<span class="c1"># Address = 192.168.4.4/24</span>

<span class="c1"># Each time you have a new compuer you want to connect to</span>
<span class="c1"># it&#39;ll need it&#39;s own [Peer] section.</span>
<span class="k">[Peer]</span>
<span class="c1"># You&#39;ll want to specify the public key of the machine</span>
<span class="c1"># you want to connect to. The person with the config file</span>
<span class="c1"># of the machine you&#39;re trying to connect to needs to run</span>
<span class="c1"># the command with `wg pubkey` in the comment above PrivateKey</span>
<span class="c1"># to get their public key. They then should share it with you</span>
<span class="c1"># over some secure medium of communication, ideally end to</span>
<span class="c1"># end encrypted. If it get&#39;s tampered with, your wireguard</span>
<span class="c1"># connection is no longer secure.</span>
<span class="na">PublicKey</span> <span class="o">=</span> <span class="s">4QEX7I58pR5PaZNmDI2wmnsT/HvvFBkNc5wZJ00scXw==</span>
<span class="c1"># You&#39;ll want to put the IP that the other machine will be</span>
<span class="c1"># accessable at here. This is the value they have as Address</span>
<span class="c1"># under the [Interface] section of their wg.conf</span>
<span class="na">AllowedIPs</span> <span class="o">=</span> <span class="s">192.168.4.115/32</span>
<span class="c1"># If the person has a server they&#39;re running wireguard on and</span>
<span class="c1"># has exposed their ListenPort then that goes here. If another</span>
<span class="c1"># person has used their home router and port forwarded then</span>
<span class="c1"># that also can be used. The IP address here is the IP address</span>
<span class="c1"># of the machine as it is on the publicly addressable Internet,</span>
<span class="c1"># not your friends IP on their home network. This can be found by</span>
<span class="c1"># typing into Google, what&#39;s my IP, or using canihazip.com</span>
<span class="na">Endpoint</span> <span class="o">=</span> <span class="s">76.115.24.198:43022</span>
<span class="c1"># This is used to make sure the connection stays alive.</span>
<span class="c1"># It says to send a heartbeat / ping to the Endpoint every</span>
<span class="c1"># 25 seconds</span>
<span class="na">PersistentKeepalive</span> <span class="o">=</span> <span class="s">25</span>

<span class="c1"># Keep adding peers as you wish. At a minium you&#39;ll need to</span>
<span class="c1"># add their public key and their address</span>
<span class="k">[Peer]</span>
<span class="na">PublicKey</span> <span class="o">=</span> <span class="s">3StsslOTQlqMnd42UaKi9FdNu9GSTLi1WCaqwg8lkhc=</span>
<span class="na">AllowedIPs</span> <span class="o">=</span> <span class="s">192.168.4.3/32</span>
</code></pre></div><p>If we wanted to setup a network where all machines would have
192.168.4.XXX addresses, we could do it as follows.</p>
<p>First, copy the example config file into a file named <code>wg.conf</code>.</p>
<p>You'll want to generate a new private key and add it to the file.</p>
<pre><code class="language-console" data-lang="console">$ sed -i &quot;s#REPLACE_WITH_PRIVATE_KEY#$(wg genkey)#&quot; wg.conf
</code></pre><p>You need to get your public key from your private key.
The following command parses the private key out of the
config file and generates the corresponding public key.</p>
<pre><code class="language-console" data-lang="console">$ grep 'PrivateKey = ' wg.conf | tail -n 1 | sed -e 's/.* = //g' | wg pubkey
rR7O5IvIq16RpntAqZCNmTd42nsI6Mq5139XMYwZ5hQ=
</code></pre><p>The output of this command is the public key which will
be used in one of the <code>[Peer]</code> sections in the config of
the other machines in your new wireguard network. It will
change whenever you regenerate the private key and replace
it in the config file.</p>
<p>You should communicate with the other people you're trying
to set up your new wireguard network with to make sure you
all choose a differnet IP address for the line that has
<code>Address = </code>. On Windows you'll need to uncomment that line.
In the <a href="#using-it">Using It</a> secion there will be a <code>setup.sh</code>
script, On Linux the script will parse the comment and use it
as your IP address within the wireguard network, do not
uncomment that line on Linux.</p>
<p>You can parse your config file to get your choosen address
using the following command.</p>
<pre><code class="language-console" data-lang="console">$ cat &quot;${conf}&quot;| grep 'Address = ' | sed -e 's/.* = //g' -e 's/\/24//g'
192.168.4.4
</code></pre><p>In this case, our machine will appear in the config file
of the other machines as follows</p>
<div class="highlight"><pre class="chroma"><code class="language-ini" data-lang="ini"><span class="k">[Peer]</span>
<span class="na">PublicKey</span> <span class="o">=</span> <span class="s">rR7O5IvIq16RpntAqZCNmTd42nsI6Mq5139XMYwZ5hQ=</span>
<span class="na">AllowedIPs</span> <span class="o">=</span> <span class="s">192.168.4.4/32</span>
</code></pre></div><p>If you have the <code>ListenPort</code> exposed to the public internet,
via port forwarding or via firewall rules (or both). Then the
peer section for your machine in the config files of the other
people in your netowrk will include the <code>Endpoint</code> and optionally
the <code>PersistentKeepalive</code> properties.</p>
<p>You can find your IP by running</p>
<pre><code class="language-console" data-lang="console">$ curl -s -w '\n' https://canihazip.com/s
24.21.101.158
</code></pre><p>The corresponding <code>[Peer]</code> section in other peoples configs
would then be the following.</p>
<div class="highlight"><pre class="chroma"><code class="language-ini" data-lang="ini"><span class="k">[Peer]</span>
<span class="na">PublicKey</span> <span class="o">=</span> <span class="s">rR7O5IvIq16RpntAqZCNmTd42nsI6Mq5139XMYwZ5hQ=</span>
<span class="na">AllowedIPs</span> <span class="o">=</span> <span class="s">192.168.4.4/32</span>
<span class="na">Endpoint</span> <span class="o">=</span> <span class="s">24.21.101.158:60200</span>
<span class="na">PersistentKeepalive</span> <span class="o">=</span> <span class="s">25</span>
</code></pre></div><h2 id="using-it">Using It</h2>
<p>If you're using wireguard-go you'll want to run it in a seperate
terminal before running the <code>setup.sh</code> script. This command tells
wireguard-go to create a new wireguard interface called wg0.</p>
<pre><code class="language-console" data-lang="console">$ wireguard-go -f wg0
</code></pre><p>If you're using wireguard-go you'll want to run this export
command in the same terminal you're going to run <code>setup.sh</code></p>
<pre><code class="language-console" data-lang="console">$ export WGGO=1
</code></pre><p>Here is the script you can name <code>setup.sh</code> to use to setup a
simple wireguard network.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/usr/bin/env bash
</span><span class="cp"></span><span class="c1"># Usage: sudo bash setup.sh wg.conf</span>
<span class="nb">set</span> -xe

<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;x</span><span class="nv">$UID</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;x0&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
  <span class="nb">echo</span> <span class="s2">&#34;You must be root to run this.&#34;</span>
  <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="c1"># Check that the first argument is a file</span>
<span class="k">if</span> <span class="o">[</span> -f <span class="s2">&#34;</span><span class="si">${</span><span class="nv">1</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
  <span class="c1"># Set the conf variable to the first argument</span>
  <span class="nv">conf</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">1</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="k">else</span>
  <span class="c1"># If it isn&#39;t a file then complain</span>
  <span class="nb">echo</span> <span class="s2">&#34;Usage: sudo bash </span><span class="nv">$0</span><span class="s2"> wg.conf&#34;</span>
  <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="c1"># If you are using wireguard-go</span>
<span class="c1"># export WGGO=1</span>
<span class="c1"># before running this. You&#39;ll have to create the</span>
<span class="c1"># interface a different way described later</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;x</span><span class="si">${</span><span class="nv">WGGO</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">==</span> <span class="s2">&#34;x&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
  <span class="c1"># Remove existing interface if it exists</span>
  ip link del dev wg0 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
  <span class="c1"># Create a new wireguard interface</span>
  ip link add dev wg0 <span class="nb">type</span> wireguard
<span class="k">fi</span>

<span class="c1"># Parse out our IP from the config file</span>
<span class="nv">our_ip</span><span class="o">=</span><span class="k">$(</span>cat <span class="s2">&#34;</span><span class="si">${</span><span class="nv">conf</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">|</span> grep <span class="s1">&#39;Address = &#39;</span> <span class="p">|</span> sed -e <span class="s1">&#39;s/.* = //g&#39;</span> -e <span class="s1">&#39;s/\/24//g&#39;</span><span class="k">)</span>

<span class="c1"># Tell Linux that our IP for the wireguard interface is the</span>
<span class="c1"># one we paresed out from the Address line in the config file</span>
ip address add <span class="s2">&#34;</span><span class="nv">$our_ip</span><span class="s2">&#34;</span>/24 dev wg0

<span class="c1"># Grab a list of our peers IPs by parsing every line</span>
<span class="c1"># with AllowedIPs in the config file</span>
<span class="nv">peers</span><span class="o">=</span><span class="k">$(</span>cat <span class="s2">&#34;</span><span class="si">${</span><span class="nv">conf</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">|</span> grep AllowedIPs <span class="p">|</span> sed -e <span class="s1">&#39;s/.* = //g&#39;</span> -e <span class="s1">&#39;s/\/32//g&#39;</span><span class="k">)</span>

<span class="k">for</span> addr in <span class="si">${</span><span class="nv">peers</span><span class="si">}</span><span class="p">;</span> <span class="k">do</span>
  <span class="c1"># Tell Linux that it can find our peers using the</span>
  <span class="c1"># interface we added</span>
  ip address add dev wg0 <span class="s2">&#34;</span><span class="si">${</span><span class="nv">our_ip</span><span class="si">}</span><span class="s2">&#34;</span> peer <span class="s2">&#34;</span><span class="si">${</span><span class="nv">addr</span><span class="si">}</span><span class="s2">&#34;</span>
<span class="k">done</span>

<span class="c1"># Tell wireguard to use our config file</span>
wg setconf wg0 <span class="s2">&#34;</span><span class="si">${</span><span class="nv">conf</span><span class="si">}</span><span class="s2">&#34;</span>

<span class="c1"># Turn on the interface</span>
ip link <span class="nb">set</span> up dev wg0

<span class="c1"># Show the configured interface</span>
ip addr show wg0
</code></pre></div><p>Make sure your config files are all correct, and then run
the script as root. The following example of running the
script includes sample output.</p>
<pre><code class="language-console" data-lang="console">$ sudo bash setup.sh wg.conf
+ '[' x0 '!=' x0 ']'
+ '[' -f wg.conf ']'
+ conf=wg.conf
+ '[' x == x ']'
+ ip link del dev wg0
+ ip link add dev wg0 type wireguard
++ cat wg.conf
++ sed -e 's/.* = //g' -e 's/\/24//g'
++ grep 'Address = '
+ our_ip=192.168.4.4
+ ip address add 192.168.4.4/24 dev wg0
++ cat wg.conf
++ sed -e 's/.* = //g' -e 's/\/32//g'
++ grep AllowedIPs
+ peers='192.168.4.115
192.168.4.3'
+ for addr in ${peers}
+ ip address add dev wg0 192.168.4.4 peer 192.168.4.115
+ for addr in ${peers}
+ ip address add dev wg0 192.168.4.4 peer 192.168.4.3
+ wg setconf wg0 wg.conf
+ ip link set up dev wg0
+ ip addr show wg0
25: wg0: &lt;POINTOPOINT,NOARP,UP,LOWER_UP&gt; mtu 1420 qdisc noqueue state UNKNOWN group default qlen 1000
    link/none
    inet 192.168.4.4/24 scope global wg0
       valid_lft forever preferred_lft forever
    inet 192.168.4.4 peer 192.168.4.115/32 scope global wg0
       valid_lft forever preferred_lft forever
    inet 192.168.4.4 peer 192.168.4.3/32 scope global wg0
       valid_lft forever preferred_lft forever
</code></pre><p>On Windows, you'll just save the config file and click Activate.</p>
<p>Once everyone has run the script or activated the config (for
Windows). Then you can try pinging the other hosts.</p>
<blockquote>
<p>You may not be able to ping some Windows machines. But they
will be able to ping you. So try the reverse when it's not
working.</p>
</blockquote>
<pre><code class="language-console" data-lang="console">$ ping 192.168.4.3
PING 192.168.4.3 (192.168.4.3): 56 data bytes
64 bytes from 192.168.4.3: icmp_seq=0 ttl=128 time=3.197 ms
64 bytes from 192.168.4.3: icmp_seq=1 ttl=128 time=3.617 ms
64 bytes from 192.168.4.3: icmp_seq=2 ttl=128 time=37.290 ms
64 bytes from 192.168.4.3: icmp_seq=3 ttl=128 time=3.504 ms
64 bytes from 192.168.4.3: icmp_seq=4 ttl=128 time=3.626 ms
64 bytes from 192.168.4.3: icmp_seq=5 ttl=128 time=37.651 ms
64 bytes from 192.168.4.3: icmp_seq=6 ttl=128 time=3.461 ms
^C--- 192.168.4.3 ping statistics ---
7 packets transmitted, 7 packets received, 0% packet loss
round-trip min/avg/max/stddev = 3.197/13.192/37.651/15.356 ms
</code></pre><h2 id="gotchas">Gotchas</h2>
<ul>
<li>
<p>If you see <code>ping: sending packet: Destination address required</code>.
It's likely that everyone need to check their configs to make
sure that everyone elses public keys are correct.</p>
</li>
<li>
<p>The Windows client takes an <code>Address</code> parameter that's used as the
IP address for the machine running that config. You'll need to
uncomment it.</p>
</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li>
<p><a href="https://www.wireguard.com/quickstart/">https://www.wireguard.com/quickstart/</a></p>
</li>
<li>
<p><a href="https://blog.jessfraz.com/post/installing-and-using-wireguard/">https://blog.jessfraz.com/post/installing-and-using-wireguard/</a></p>
<ul>
<li>Example of using the demo server</li>
</ul>
</li>
<li>
<p>Scripts that run the wireguard demo server</p>
<ul>
<li><a href="https://git.zx2c4.com/wireguard-tools/tree/contrib/ncat-client-server">https://git.zx2c4.com/wireguard-tools/tree/contrib/ncat-client-server</a></li>
</ul>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#IPv4_CIDR_blocks">https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#IPv4_CIDR_blocks</a></p>
<ul>
<li>The reason we do <code>/32</code> behind all the IPs of our peers is because
it means there is only 1 address in that block, that one address
is the address of our peer (the one preceding the <code>/</code>)</li>
</ul>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Private_network#Private_IPv4_addresses">https://en.wikipedia.org/wiki/Private_network#Private_IPv4_addresses</a></p>
<ul>
<li>If you have more than 255 peers you want to connect then you'll
want to change the <code>/24</code> to something appropriate. You'll have to
read this and the previous link to figure out what you should use.</li>
</ul>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Binary Downloads</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/binary-downloads/</id>
    <updated>2020-07-24T05:00:00Z</updated>
    <published>2020-07-24T05:00:00Z</published>
    <content type="html"><![CDATA[<h2 id="choosing-the-right-download">Choosing the right download</h2>
<p>So you went to download a file and you were presented with a list of options
similar to the following</p>
<p><img src="/images/binary-downloads.png" alt="list-of-binary-downloads"></p>
<p>You know you're on Linux. But which one of these Linux downloads is right for
you?</p>
<p>Run the <code>uname</code> tool to help you find out</p>
<pre><code class="language-console" data-lang="console">$ uname -a
x86_64
</code></pre><ul>
<li><code>m</code> means tell us the hardware type</li>
</ul>
<p>If you see <code>x86_64</code> that means you want the download that says <code>amd64</code>.</p>
<h2 id="installing-it">Installing it</h2>
<p>When you're presented with a tarball (<code>.tar.*</code>) you'll want to download it and
untar it using either your browser, <code>wget</code>, <code>curl</code> or whatever you want.</p>
<p>Be careful when you extract the tarball! People usually leave all the files in
the top level directory and when you extract it all the sudden you'll have files
all over the place!</p>
<p>I recommend creating a <em>temporary</em> directory first and changing your directory
into it. We can do this all at once with the following command</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> <span class="k">$(</span>mktemp -d<span class="k">)</span>
</code></pre></div><ul>
<li>
<p><code>cd</code> is change directory</p>
</li>
<li>
<p><code>mktemp</code> is a utility for creating temporary files and directories.
It will output the name, which we capture and use as the place we want to
change our current working directory to using the <code>$(  )</code> operator.</p>
<ul>
<li><code>-d</code> tells it to make a directory</li>
</ul>
</li>
</ul>
<p>Here's an example of downloading Hugo which is shown in the screenshot above.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">curl -LO https://github.com/gohugoio/hugo/releases/download/v0.74.3/hugo_0.74.3_Linux-64bit.tar.gz
</code></pre></div><ul>
<li>
<p><code>L</code> means follow any redirects, you'll usually want this, especially with
GitHub since it likes to redirect</p>
</li>
<li>
<p><code>O</code> means save the file with the same name as it has in the URL</p>
</li>
</ul>
<p>We then extract the downloaded file</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">tar -xvz hugo_0.74.3_Linux-64bit.tar.gz
</code></pre></div><ul>
<li>
<p><code>x</code> means extract</p>
</li>
<li>
<p><code>v</code> means be verbose, print all extracted files</p>
</li>
<li>
<p><code>z</code> means the file will be <code>.gz</code> compressed, and we'll need to decompress it
using the gzip decompression algorithm. If you run into other file types,
do a search to figure out what to replace this with.</p>
</li>
</ul>
<p>We should have extracted 3 files.</p>
<p>You now want to put the binary, the command line program you want to run, in one
of the directories in the <code>PATH</code> environment variable.</p>
<p>You can run</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="nv">$PATH</span>
</code></pre></div><p>To get a <code>:</code> separated list of directories you can move the <code>hugo</code> file to so
that you'll be able to use it from anywhere.</p>
<p>We'll move it into the <code>/usr/bin</code> directory, a common place for executable files
to live.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mv hugo /usr/bin/
</code></pre></div><p>Now you can return to where you we're before you created the temporary directory
by running</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> -
</code></pre></div><p>We can now run hugo!</p>
<pre><code class="language-console" data-lang="console">$ hugo version
Hugo Static Site Generator v0.74.3-DA0437B4 linux/amd64 BuildDate: 2020-07-23T16:22:34Z
</code></pre>]]></content>
  </entry>
  <entry>
    <title>SSH Tricks</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/ssh-tricks/</id>
    <updated>2020-07-24T05:00:00Z</updated>
    <published>2020-07-24T05:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="reverse-port-forwarding">Reverse Port Forwarding</h1>
<p>Want to see what a port that is only listening on 127.0.0.1 on example.com is
saying?</p>
<pre><code>ssh -nNT -L 9000:127.0.0.1:8080 user@example.com
</code></pre><p>Now you can go to http://localhost:9000/ and you will see it</p>
<p>And if you want the machine you're on to listen on 0.0.0.0 then</p>
<pre><code>ssh -nNT -L '*:9000:127.0.0.1:8080' user@example.com
</code></pre><blockquote>
<p>The <code>'</code> here are important! Or else your shell will replace <code>*</code> with every
file in your current directory</p>
</blockquote>
<h1 id="use-ssh-key-for-auth-always-accept-server-key">Use ssh key for auth always accept server key</h1>
<p>Don't put anything you care about on this machine! You know
what you're logging into.</p>
<pre><code>ssh -i ~/.ssh/nahdig -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PasswordAuthentication=no root@143.198.133.87
</code></pre>]]></content>
  </entry>
  <entry>
    <title>Python Pagination</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/python-pagination/</id>
    <updated>2020-07-24T04:42:34Z</updated>
    <published>2020-07-24T04:42:34Z</published>
    <content type="html"><![CDATA[<p>This is an example of how you might uses the <code>requests</code> HTTP Python library to
create a client that knows how to read all the pages from an HTTP API and yield
each result within a page.</p>
<p>We also use the <code>httptest</code> library to create a test server.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">unittest</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">urllib.parse</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">NamedTuple</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">List</span>

<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">httptest</span>


<span class="k">class</span> <span class="nc">TestSearchPagesHTTPHandler</span><span class="p">(</span><span class="n">httptest</span><span class="o">.</span><span class="n">Handler</span><span class="p">):</span>

    <span class="n">TOTAL</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1237</span>
    <span class="n">PER_PAGE</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">25</span>
    <span class="n">RESULTS</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">TOTAL</span><span class="p">)]</span>

    <span class="k">def</span> <span class="nf">do_GET</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">params</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">urllib</span><span class="o">.</span><span class="n">parse</span><span class="o">.</span><span class="n">parse_qsl</span><span class="p">(</span><span class="n">urllib</span><span class="o">.</span><span class="n">parse</span><span class="o">.</span><span class="n">urlparse</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">query</span><span class="p">))</span>
        <span class="n">i</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;page&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">send_response</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">send_header</span><span class="p">(</span><span class="s2">&#34;Content-type&#34;</span><span class="p">,</span> <span class="s2">&#34;application/json&#34;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">end_headers</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">wfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span>
            <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span>
                <span class="p">{</span>
                    <span class="s2">&#34;queryInfo&#34;</span><span class="p">:</span> <span class="p">{</span>
                        <span class="s2">&#34;resultsFound&#34;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">TOTAL</span><span class="p">,</span>
                        <span class="s2">&#34;resultsPerPage&#34;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">PER_PAGE</span><span class="p">,</span>
                        <span class="s2">&#34;page&#34;</span><span class="p">:</span> <span class="n">i</span><span class="p">,</span>
                        <span class="s2">&#34;pageSize&#34;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">PER_PAGE</span><span class="p">,</span>
                        <span class="s2">&#34;nextPage&#34;</span><span class="p">:</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
                        <span class="s2">&#34;lastPage&#34;</span><span class="p">:</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">TOTAL</span> <span class="o">/</span> <span class="bp">self</span><span class="o">.</span><span class="n">PER_PAGE</span><span class="p">),</span>
                    <span class="p">},</span>
                    <span class="s2">&#34;results&#34;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">RESULTS</span><span class="p">[</span>
                        <span class="p">((</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">PER_PAGE</span><span class="p">)</span> <span class="p">:</span> <span class="p">((</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">PER_PAGE</span><span class="p">)</span>
                        <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">PER_PAGE</span>
                    <span class="p">],</span>
                <span class="p">}</span>
            <span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">()</span>
        <span class="p">)</span>


<span class="k">class</span> <span class="nc">ClientConfig</span><span class="p">(</span><span class="n">NamedTuple</span><span class="p">):</span>
    <span class="n">url</span><span class="p">:</span> <span class="nb">str</span>


<span class="k">class</span> <span class="nc">Client</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">tuple</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="n">config</span>
        <span class="c1"># Requests session</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">session</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="fm">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">session</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="fm">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">_exc_type</span><span class="p">,</span> <span class="n">_exc_value</span><span class="p">,</span> <span class="n">_traceback</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">session</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">page_size</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">25</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">lastPage</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">while</span> <span class="n">lastPage</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">lastPage</span><span class="p">:</span>
            <span class="n">params</span> <span class="o">=</span> <span class="p">(</span>
                <span class="p">(</span><span class="s2">&#34;sortOrder&#34;</span><span class="p">,</span> <span class="s2">&#34;name_asc&#34;</span><span class="p">),</span>
                <span class="p">(</span><span class="s2">&#34;page&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)),</span>
                <span class="p">(</span><span class="s2">&#34;pageSize&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">page_size</span><span class="p">)),</span>
                <span class="p">(</span><span class="s2">&#34;searchQuery&#34;</span><span class="p">,</span> <span class="n">query</span><span class="p">),</span>
            <span class="p">)</span>
            <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;{self.config.url}/search&#34;</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="n">params</span><span class="p">)</span>
            <span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span>
            <span class="n">body</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
            <span class="n">lastPage</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s2">&#34;queryInfo&#34;</span><span class="p">][</span><span class="s2">&#34;lastPage&#34;</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">body</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">]:</span>
                <span class="k">yield</span> <span class="n">result</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>


<span class="k">class</span> <span class="nc">TestClient</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="nd">@httptest.Server</span><span class="p">(</span><span class="n">TestSearchPagesHTTPHandler</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">test_search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ts</span><span class="o">=</span><span class="n">httptest</span><span class="o">.</span><span class="n">NoServer</span><span class="p">()):</span>
        <span class="k">with</span> <span class="n">Client</span><span class="p">(</span><span class="n">ClientConfig</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">ts</span><span class="o">.</span><span class="n">url</span><span class="p">()))</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
            <span class="n">results</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&#34;test&#34;</span><span class="p">))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">results</span><span class="p">),</span> <span class="n">TestSearchPagesHTTPHandler</span><span class="o">.</span><span class="n">TOTAL</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</code></pre></div>]]></content>
  </entry>
  <entry>
    <title>Free Resources</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/free-resources/</id>
    <updated>2020-07-18T12:15:29Z</updated>
    <published>2020-07-18T12:15:29Z</published>
    <content type="html"><![CDATA[<h1 id="free-resources">Free Resources</h1>
<p>Places you can find things for free to use in projects or anything.</p>
<p>Whenever you find something you need to make sure you say where you got it from,
or attribute in whatever way the license for whatever you found said.</p>
<p>If you find something that's Public Domain, then you don't <em>have</em> to say where
you got it.</p>
<ul>
<li><a href="https://www.openculture.com/">https://www.openculture.com/</a></li>
</ul>
<h2 id="images">Images</h2>
<ul>
<li><a href="https://free-images.com/">https://free-images.com/</a></li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Time Saving Tricks and Hacks</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/tricks/</id>
    <updated>2020-07-07T19:00:00Z</updated>
    <published>2020-07-07T19:00:00Z</published>
    <content type="html"><![CDATA[<h2 id="dos2unix-in-python">dos2unix in Python</h2>
<p>Remove carrage returns from CRLF (carrage return, line feed: <code>\r\n</code>).</p>
<pre><code class="language-console" data-lang="console">$ python -c 'import pathlib, sys; p = pathlib.Path(sys.argv[-1]); p.write_bytes(p.read_bytes().replace(b&quot;\r&quot;, b&quot;&quot;))' file.txt
</code></pre><h2 id="get-list-of-available-versions">Get list of available versions</h2>
<pre><code class="language-console" data-lang="console">$ python -m pip install dffml==
</code></pre><h2 id="download-file-with-python-from-command-line-with-progress">Download file with Python from command line with progress</h2>
<pre><code class="language-console" data-lang="console">$ python3 -c 'import sys, functools, urllib.request; print(urllib.request.urlretrieve(sys.argv[-1], reporthook=lambda n, c, t: print(f&quot;{round(((n*c)/t) * 100, 2)}%&quot;, end=&quot;\r&quot;, file=sys.stderr))[0])' https://storage.googleapis.com/laurencemoroney-blog.appspot.com/rps.zip
</code></pre><p><a href="https://asciinema.org/a/357044"><img src="https://asciinema.org/a/357044.svg" alt="asciicast"></a></p>
<h2 id="display-only-blocks-of-text-with-certain-text-in-them">Display only blocks of text with certain text in them</h2>
<p>Use grep to displays blocks of text. Only display blocks with certain text
inside them.</p>
<pre><code class="language-console" data-lang="console">$ git grep -A 25 -E 'dffml train|dffml accuracy|dffml predict' | python -c 'import sys; print(&quot;--&quot;.join([i for i in sys.stdin.read().split(&quot;--&quot;) if not &quot;model-directory&quot; in i]).strip())'
</code></pre><h2 id="display-a-file-as-plain-text-in-a-browser">Display a file as plain text in a browser</h2>
<pre><code class="language-console" data-lang="console">$ (echo -e 'HTTP/1.0 200 OK\n' &amp;&amp; cat myfile.txt) | nc -Nlp 8000
</code></pre><p>If you have <code>socat</code> that's better, as chrome sometimes requests the favicon then netcat closes the listening socket. <code>socat</code> will serve multiple connections.</p>
<pre><code class="language-console" data-lang="console">$ (echo -e 'HTTP 1.0\n200 OK\n' &amp;&amp; cat myfile.txt | tee /dev/stderr | socat - TCP-LISTEN:8000,fork,reuseaddr
</code></pre><p>Redisplay on reload.</p>
<ul>
<li><code>-N</code> to netcat mean close socket on EOF from STDIN</li>
</ul>
<pre><code class="language-console" data-lang="console">$ nodemon -e md --exec &quot;clear; while test 1; do (echo -e 'HTTP/1.0 200 OK\n' &amp;&amp; cat open-architecture.md) | nc -Nlp 8000; sleep 0.5; done; test 1&quot;
</code></pre><h2 id="do-a-vim-commands-on-files-in-an-automated-way">Do a vim commands on files in an automated way</h2>
<p>Remove all newlines from end of file</p>
<pre><code class="language-console" data-lang="console">$ for file in $(echo examples/notebooks/*.ipynb); do vim -b '+set noeol' '+wq' $file; done
</code></pre><h2 id="open-a-list-of-files-in-tmux-panes">Open a list of files in tmux panes</h2>
<ul>
<li><a href="https://github.com/tmux/tmux/wiki/Advanced-Use">https://github.com/tmux/tmux/wiki/Advanced-Use</a></li>
</ul>
<pre><code class="language-console" data-lang="console">$ for file in $(git ls-files | grep -E '.*\.cpp|.*\.h|.*\.ino'); do tmux split-window -h &quot;vim ${file}&quot;; tmux next-layout; done
</code></pre><p><a href="https://asciinema.org/a/441107"><img src="https://asciinema.org/a/441107.svg" alt="asciicast"></a></p>
<h2 id="close-all-but-the-active-tmux-pane">Close all but the active tmux pane</h2>
<pre><code class="language-console" data-lang="console">$  for pane in $(tmux list-pane | grep -v active | sed -e 's/:.*//g'); do export pane=$(tmux list-pane | grep -v active | sed -e 's/:.*//g' | head -n 1); tmux kill-pane -t $pane ; done
</code></pre><h2 id="scrape-page-for-links">Scrape page for links</h2>
<pre><code class="language-console" data-lang="console">$ curl -sfL &quot;https://pypi.org/simple/dffml/&quot; | python -u -c 'import sys, json, bs4; print(json.dumps({link.get_text(): link.get(&quot;href&quot;) for link in bs4.BeautifulSoup(sys.stdin.read(), &quot;html.parser&quot;).find_all(&quot;a&quot;)}))' | python -m json.tool
{
    &quot;dffml-0.4.0.post0-py3-none-any.whl&quot;: &quot;https://files.pythonhosted.org/packages/37/d5/6dc945d453cbdeb15db4249fe09e07bdd2e750a6f256fd893c81ced7bbbb/dffml-0.4.0.post0-py3-none-any.whl#sha256=031dd3a4ca57d46f568f7dd2711a223a26bc343f5f2ac36e1af881ead19e05b6&quot;,
    &quot;dffml-0.4.0.post0.tar.gz&quot;: &quot;https://files.pythonhosted.org/packages/b0/42/a151555fe3b45926fa041813f8513d883180bdb9e8def64d2d5260609743/dffml-0.4.0.post0.tar.gz#sha256=f6f898c504450e3514dd5791b31bcba21ad9edfc3e896ac5da9cbe3181af5d2b&quot;
}
</code></pre><h2 id="sign-and-verify-data-using-ssh-keys">Sign and verify data using ssh keys</h2>
<p>References:</p>
<ul>
<li><a href="https://www.agwa.name/blog/post/ssh_signatures">https://www.agwa.name/blog/post/ssh_signatures</a></li>
</ul>
<pre><code class="language-console" data-lang="console">$ podman run -v $HOME/.ssh/:/root/.ssh:ro -v $PWD:/usr/src/workdir -w /usr/src/workdir --rm -ti --entrypoint ssh-keygen lscr.io/linuxserver/openssh-server -Y sign -f /root/.ssh/mykeyname -n file CHANGELOG.md
$ (printf 'alice@example.com ' &amp;&amp; cat ~/.ssh/mykeyname.pub) | tee allowed_signers
$ cat CHANGELOG.md | podman run -v $HOME/.ssh/:/root/.ssh:ro -v $PWD:/usr/src/workdir -w /usr/src/workdir --rm -i --entrypoint ssh-keygen lscr.io/linuxserver/openssh-server -Y verify -f allowed_signers -I alice@example.com -n file -s CHANGELOG.md.sig
Good &quot;file&quot; signature for alice@example.com with RSA key SHA256:RQsUY/opy5KWg+pesXcjI9I3I1z8udgkFAlOjDrv8cw
</code></pre><h2 id="git-stash-show-patch">git stash show patch</h2>
<p>Shows just applied patch</p>
<pre><code class="language-console" data-lang="console">$ git stash show -p
</code></pre><h2 id="wsl-start-sshd">wsl start sshd</h2>
<p>From powershell:</p>
<pre><code class="language-console" data-lang="console">$ Start-Job -ScriptBlock{wsl -u root -e mkdir -pv /run/sshd ; wsl -u root -e /usr/sbin/sshd -D}
</code></pre><h2 id="wsl-forward-port">WSL Forward Port</h2>
<p>Run the following from an Administrator PowerShell session</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">WINDOWS</span><span class="p">\</span><span class="n">system32</span><span class="p">&gt;</span> <span class="n">netsh</span> <span class="n">interface</span> <span class="n">portproxy</span> <span class="n">add</span> <span class="n">v4tov4</span> <span class="n">listenaddress</span><span class="p">=</span><span class="n">0</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">0</span> <span class="n">listenport</span><span class="p">=</span><span class="n">2222</span> <span class="n">connectaddress</span><span class="p">=((</span><span class="n">wsl</span> <span class="n">-u</span> <span class="n">root</span> <span class="p">--</span> <span class="n">sh</span> <span class="n">-c</span> <span class="s2">&#34;ip a | grep inet\ | grep -v 127.0.0&#34;</span><span class="p">).</span><span class="n">Split</span><span class="p">()[</span><span class="n">5</span><span class="p">].</span><span class="n">Split</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)[</span><span class="n">0</span><span class="p">])</span> <span class="n">connectport</span><span class="p">=</span><span class="n">22</span>

<span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">WINDOWS</span><span class="p">\</span><span class="n">system32</span><span class="p">&gt;</span> <span class="n">netsh</span> <span class="n">advfirewall</span> <span class="n">firewall</span> <span class="n">add</span> <span class="n">rule</span> <span class="n">name</span><span class="p">=</span><span class="s2">&#34;Open Port 2222 for WSL2&#34;</span> <span class="n">dir</span><span class="p">=</span><span class="k">in</span> <span class="n">action</span><span class="p">=</span><span class="n">allow</span> <span class="n">protocol</span><span class="p">=</span><span class="n">TCP</span> <span class="n">localport</span><span class="p">=</span><span class="n">2222</span>
<span class="n">Ok</span><span class="p">.</span>

<span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">WINDOWS</span><span class="p">\</span><span class="n">system32</span><span class="p">&gt;</span> <span class="n">netsh</span> <span class="n">interface</span> <span class="n">portproxy</span> <span class="n">show</span> <span class="n">v4tov4</span>

<span class="n">Listen</span> <span class="n">on</span> <span class="n">ipv4</span><span class="err">:</span>             <span class="n">Connect</span> <span class="n">to</span> <span class="n">ipv4</span><span class="err">:</span>

<span class="n">Address</span>         <span class="n">Port</span>        <span class="n">Address</span>         <span class="n">Port</span>
<span class="p">---------------</span> <span class="p">----------</span>  <span class="p">---------------</span> <span class="p">----------</span>
<span class="n">0</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">0</span>         <span class="n">2222</span>        <span class="n">172</span><span class="p">.</span><span class="n">23</span><span class="p">.</span><span class="n">21</span><span class="p">.</span><span class="n">232</span>   <span class="n">22</span>
</code></pre></div><h2 id="github-cli-set-secrets">GitHub CLI set secrets</h2>
<pre><code class="language-console" data-lang="console">$ grep oauth_token: &lt; ~/.config/gh/hosts.yml | sed -e 's/.*oauth_token: //g' | gh secret set MY_TOKEN
</code></pre><p><strong>../secrets</strong></p>
<pre><code>SECRET_NAME secret value
</code></pre><pre><code class="language-console" data-lang="console">$ while IFS= read -r line; do gh secret set -R github.com/intel/dffml &quot;$(echo $line | sed -e 's/ .*//')&quot; --body &quot;$(echo $line | sed -e 's/[^ ]* //')&quot;; done &lt; ../secrets
</code></pre><h2 id="return-repos-from-sourcegraph-query">Return repos from sourcegraph query</h2>
<pre><code class="language-console" data-lang="console">$ curl 'https://sourcegraph.com/search/stream?q=context%3Aglobal%20repo%3A%5Egithub%5C.com%2Forg-name%2F.*%20log4j%20&amp;v=V2&amp;t=literal&amp;dl=0&amp;dk=html&amp;dc=1&amp;display=1500' | tee /tmp/org-name
$ python -c 'import sys, json, itertools; print(&quot;\n&quot;.join(list(set(filter(bool, itertools.chain(*map(lambda data: list(map(lambda content: content.get(&quot;repository&quot;, &quot;&quot;), data)) if isinstance(data, list) else [], filter(bool, map(json.loads, map(lambda line: &quot;{}&quot; if not line.startswith(&quot;data: &quot;) else line.split(maxsplit=1)[-1], sys.stdin))))))))))' &lt; /tmp/org-name
</code></pre><h2 id="commit-one-file-at-a-time">Commit one file at a time</h2>
<pre><code class="language-console" data-lang="console">$ git add $(git status --porcelain=2 | grep -v \? | awk '{print $NF}' | head -n 1) &amp;&amp; git commit -sm &quot;$(git status --porcelain=2 | grep -v \? | awk '{print $NF}' | sed -e 's/dffml_source_mongodb\///g' -e 's/examples\/shouldi\///g' -e 's/\//: /g' -e 's/_/ /g' -e 's/\.py//g' | head -n 1): Format with black&quot;
</code></pre><h2 id="run-command-on-line-in-vim">Run command on line in vim</h2>
<p>Source: <a href="https://stackoverflow.com/questions/26809543/how-to-use-an-external-command-in-vim-to-modify-the-selection">https://stackoverflow.com/questions/26809543/how-to-use-an-external-command-in-vim-to-modify-the-selection</a></p>
<pre><code>'&lt;,'&gt; !python3 -c 'import sys, datetime; print(&quot;\n&quot;.join([line_datetime[0].strip() for line_datetime in sorted([(line, datetime.datetime.strptime(line.split()[-1], &quot;\%Y-\%m-\%dT\%H:\%M:\%SZ&quot;)) for line in sys.stdin], key=lambda line_datetime: line_datetime[1])]))'
</code></pre><pre><code>How to use an external command in Vim to modify the selection

Something I've found useful in other editors is the ability to:

take the selected text
run an external command and pass the selection to its stdin
take the external commands stdout and replace the current selection with it.
This way you can write useful text tools which operate on the selection using any language that can do basic io.

How can this be done with vim?

(Directly in the command line, or via a key binding?)

---

:'&lt;,'&gt;!command

'&lt;,'&gt; represents the (linewise) visual selection and is automatically inserted when you hit : and have something selected.

Example:

If you select a line containing:

print(&quot;Hello!&quot;)

and run the Vim command:

:'&lt;,'&gt;!python

the text will be replaced with Hello!.

If you want to set this to a key-binding (F5 to evaluate for example)

vnoremap &lt;F5&gt; :!python&lt;cr&gt;
</code></pre><ul>
<li>Example vim session insert, put this text, then press Escape key and type: <code>:'&lt;,'&gt; !bash</code></li>
</ul>
<pre><code>mkdir -p schema/image/container/build/
cat &gt; schema/image/container/build/README.md&lt;&lt;'EOF'
# Container Image Build Manifest
EOF
</code></pre><p>Use <code>tee</code> to replace output with existing and save sections of a file to smaller files</p>
<pre><code>:'&lt;,'&gt; !tee output.txt
</code></pre><p>Line select and calculate hash</p>
<pre><code>curl -sfL https://download.fedoraproject.org/pub/fedora/linux/releases/36/Server/x86_64/iso/Fedora-Server-netinst-x86_64-36-1.5.iso | sha256sum -
:'&lt;,'&gt; !bash
</code></pre><p>Find replace multiple things at the same time</p>
<pre><code>:'&lt;,'&gt; !sed -e 's/support/readme/g' -e 's/Support/Readme/g' -e 's/SUPPORT/README/g'
</code></pre><h2 id="dump-github-comments-to-markdown-file">Dump GitHub comments to markdown file</h2>
<pre><code class="language-console" data-lang="console">$ gh issue view https://github.com/intel/dffml/issues/1279 --json comments | jq -r '.comments[].body' | tr -d '\r' | sed -e 's/[[:space:]]*$//' -e 's/^#/\n\n#/g' | tee ~/comments.$(date &quot;+%4Y-%m-%d-%H-%M&quot;).md
</code></pre><h2 id="print-the-date-in-a-yyyy-mm-dd-hh-ss-format">Print the date in a YYYY-MM-DD-HH-SS format</h2>
<pre><code class="language-console" data-lang="console">$ date &quot;+%Y-%m-%d-%H-%M&quot;
2022-02-02-06-34
</code></pre><h2 id="reproducable-archive-via-ssh">Reproducable archive via ssh</h2>
<p>Source: <a href="https://reproducible-builds.org/docs/archives/">https://reproducible-builds.org/docs/archives/</a></p>
<pre><code class="language-console" data-lang="console">$ tar -C /some/dir/with/stuff -c --sort=name --mtime=&quot;2015-10-21 00:00Z&quot; --owner=0 --group=0 --numeric-owner --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime myfile.within.some.dir.with.stuff.exe | sshpass -p &quot;$(python -m keyring get $USER password)&quot; ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null &quot;$USER@129.168.1.123&quot; python -c '
import io
import os
import sys
import tarfile
import hashlib
import pathlib
import unittest
import tempfile

artifacts_contents = sys.stdin.buffer.read()

unittest.TestCase().assertEqual(
    hashlib.sha256(artifacts_contents).hexdigest(),
    &quot;2bd972e3c980ee7dd376ca2c5988e2234d325d505f2124146abad226f1d163bb&quot;,
    &quot;Artifact archive hash mismatch&quot;,
)

with tempfile.TemporaryDirectory() as tempdir:
    os.chdir(tempdir)
    with tarfile.open(fileobj=io.BytesIO(artifacts_contents), mode=&quot;r&quot;) as fileobj:
        fileobj.extractall()
        for path in pathlib.Path().rglob(&quot;*&quot;):
            print(path.resolve())
'
</code></pre><h2 id="converting-datetimes-from-one-timezone-to-another-in-python">Converting datetimes from one timezone to another in Python</h2>
<p>Example has local timezone as <code>-08:00</code> (PST).</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timedelta</span><span class="p">,</span> <span class="n">tzinfo</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">fromisoformat</span><span class="p">(</span><span class="s1">&#39;2022-02-13T04:30&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">28</span><span class="p">))</span><span class="o">.</span><span class="n">isoformat</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&#34;-08:00&#34;</span>
<span class="s1">&#39;2022-02-14T08:30:00-08:00&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">fromisoformat</span><span class="p">(</span><span class="s1">&#39;2022-02-13T04:30&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">28</span><span class="p">)</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">minutes</span><span class="o">=</span><span class="mi">30</span><span class="p">))</span><span class="o">.</span><span class="n">isoformat</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&#34;+05:30&#34;</span>
<span class="s1">&#39;2022-02-14T22:00:00+05:30&#39;</span>
</code></pre></div><h2 id="xz-compressed-asciinema-recording">XZ compressed asciinema recording</h2>
<p>Dotfiles: <a href="https://github.com/pdxjohnny/dotfiles/blob/cae7a366d7766bb1a82c478f0aedc6a829630677/.asciinema_source">https://github.com/pdxjohnny/dotfiles/blob/cae7a366d7766bb1a82c478f0aedc6a829630677/.asciinema_source</a></p>
<p>Record (for remote: <code>ssh -t hostname</code>)</p>
<pre><code class="language-console" data-lang="console">$ export REC_TITLE=&quot;&quot;; export REC_HOSTNAME=&quot;$(hostname)&quot;; python3.9 -m asciinema rec --idle-time-limit 0.5 --title &quot;$(date -Iseconds): ${REC_HOSTNAME} ${REC_TITLE}&quot; --command &quot;sh -c 'tmux a || tmux'&quot; &gt;(xz --stdout - &gt; &quot;$HOME/asciinema/${REC_HOSTNAME}-rec-$(date -Iseconds).json.xz&quot;)
</code></pre><p>Check size</p>
<pre><code class="language-console" data-lang="console">du -h ~/Downloads/ascii*
</code></pre><p>Playback</p>
<pre><code class="language-console" data-lang="console">xz --stdout -d - &lt; ~/Downloads/asci* | python -m asciinema play -s 20 -
</code></pre><p>Upload <strong>TODO</strong> title from recording first line, this is an example where (Alice shell / dataflows) parallel stream processing shines due to <code>tee &gt;(export title=$(read))</code> not being available for <code>${title}</code> in place of <code>asciinema</code> with no-ghost bash. With ghost being with Alice, with these parallel / concurrent sub streams.</p>
<pre><code class="language-console" data-lang="console">$ asciinema upload $(ls ~/asciinema/rec-$(hostname)-*ndjson | tail -n 1)
$ url=$(unxz -d &lt; $(ls ~/asciinema/$(hostname)-* | tail -n 1) | python -m asciinema upload /dev/stdin 2&gt;&amp;1 | grep https | awk '{print $NF}'); echo &quot;[![asciinema](${url}.svg)](${url})&quot; | xclip -selection c
$ unxz -d &lt; $(ls ~/asciinema/$(hostname)-* | tail -n 1) | python -m asciinema upload /dev/stdin 2&gt;&amp;1 | grep https | awk '{print $NF}' | xclip -selection 
$ git diff | gh gist create -d $(unxz -d &lt; $(ls ~/asciinema/$(hostname)-* | tail -n 1) | python -m asciinema upload /dev/stdin 2&gt;&amp;1 | grep https | awk '{print $NF}') -f with-rec.patch -
</code></pre><h2 id="obs-studio">OBS Studio</h2>
<p><a href="https://snoober.home.blog/">https://snoober.home.blog/</a></p>
<h2 id="wsl-ssh">wsl ssh</h2>
<pre><code class="language-console" data-lang="console">$ wsl -u root -- mkdir -pv /run/sshd; wsl -u root -- /usr/sbin/sshd -D -o ListenAddress=0.0.0.0
</code></pre><h2 id="parse-time-with-timezone">Parse time with timezone</h2>
<pre><code class="language-console" data-lang="console">$ python -c 'import sys, datetime; print(datetime.datetime.strptime(sys.argv[-1], &quot;%d %b %Y %H:%M:%S %z&quot;))' '11 Jan 2022 00:44:19 +0800'
2022-01-11 00:44:19+08:00
</code></pre><h2 id="date-command">date command</h2>
<pre><code class="language-console" data-lang="console">$ date &quot;+%4Y-%m-%d-%H-%M&quot;
</code></pre><h2 id="file-transfer-with-progress">File transfer with progress</h2>
<p>Machine sending file.</p>
<pre><code class="language-console" data-lang="console">$ nc -Nlp 9999 &lt; filename
</code></pre><p>Machine receiveing file.</p>
<pre><code class="language-console" data-lang="console">$ dd status=progress bs=1M if=&lt;(cat &lt; /dev/tcp/example.com/9999) of=/mnt/c/Users/$USER/Downloads/filename
</code></pre><h2 id="work-on-one-branch-and-make-change-on-other-branch-push-to-github-and-run-ci">Work on one branch and make change on other branch push to github and run CI</h2>
<pre><code class="language-console" data-lang="console">$ nodemon -e yml --exec &quot;clear; export branch=feedface; git branch -D $branch; git checkout upstream/main-test -b $branch; python -c 'print(\&quot;A\&quot; + (\&quot;R\&quot; * (2**8)))' &gt; ahoy-there-matey-its-me-file; git add . &amp;&amp; git commit -sam &quot;${branch}&quot; &amp;&amp; git push -d origin &quot;${branch}&quot;; git push -fu origin $(git status | head -n 1 | awk '{print $NF}') &amp;&amp; gh pr create --base main-test --title &quot;$branch&quot; -F /dev/null&quot;
</code></pre><h2 id="download-and-install-an-autotools-project-with-a-vendored-autoreconf--i">Download and install an autotools project with a vendored <code>autoreconf -i</code></h2>
<pre><code class="language-console" data-lang="console">$ export tempdir=$(mktemp -d); (cd $tempdir &amp;&amp; curl -sfL 'https://www.kernel.org/pub/software/scm/git/git-2.36.0.tar.gz' | tar xz &amp;&amp; cd git* &amp;&amp; ./configure --prefix=$tempdir &amp;&amp; make -j $(($(nproc)*4)) &amp;&amp; ./git version &amp;&amp; echo $tempdir | tee /tmp/git_pwd &amp;&amp; sudo chmod a+rx -R $tempdir) &amp;&amp; sudo chmod a+r /tmp/git_pwd
</code></pre><p>A non autoconf project using <a href="https://www.gnu.org/prep/standards/html_node/Directory-Variables.html#Directory-Variables">https://www.gnu.org/prep/standards/html_node/Directory-Variables.html#Directory-Variables</a> for
<code>prefix      ?= /usr/local</code></p>
<pre><code class="language-console" data-lang="console">$ export tempdir=$(mktemp -d); (cd $tempdir &amp;&amp; curl -sfL https://github.com/stefanhaustein/TerminalImageViewer/archive/refs/tags/v1.1.1.tar.gz | tar xz &amp;&amp; cd Terminal*/src/main/cpp &amp;&amp; make -j $(($(nproc)*4)) &amp;&amp; make install prefix=$tempdir)
install -D tiv /tmp/tmp.ONSIPt2W5E/bin/tiv
</code></pre><h2 id="near-local-github-actions-debug">Near local github actions debug</h2>
<pre><code class="language-console" data-lang="console">$ gh run rerun --failed $(gh run list | head -n 2 | tail -n 1 | awk '{print $(NF-2)}')
$ gh run watch --exit-status -i 1 $(gh run list | head -n 2 | tail -n 1 | awk '{print $(NF-2)}')
$ gh run view $(gh run list | head -n 2 | tail -n 1 | awk '{print $(NF-2)}')
$ gh run view --log $(gh run list | head -n 2 | tail -n 1 | awk '{print $(NF-2)}')
</code></pre><pre><code class="language-console" data-lang="console">gh run view --log-failed $(gh run list --workflow feedface.yml | head -n 1| awk '{print $(NF-2)}')
</code></pre><h2 id="find-the-binaries">Find the binaries</h2>
<p><strong>TODO</strong> CVE Bin Tool approach</p>
<pre><code class="language-console" data-lang="console">$ file $(find $tempdir -name git)
/tmp/tmp.2Wd0hLb8oN/bin/git:                                      ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c1357c209d816a9738b0af78d017a6c2bfba71e7, with debug_info, not stripped
/tmp/tmp.2Wd0hLb8oN/git-2.36.0/bin-wrappers/git:                  POSIX shell script, ASCII text executable
/tmp/tmp.2Wd0hLb8oN/git-2.36.0/git:                               ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c1357c209d816a9738b0af78d017a6c2bfba71e7, with debug_info, not stripped
/tmp/tmp.2Wd0hLb8oN/git-2.36.0/contrib/mw-to-git/bin-wrapper/git: POSIX shell script, ASCII text executable
/tmp/tmp.2Wd0hLb8oN/libexec/git-core/git:                         ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c1357c209d816a9738b0af78d017a6c2bfba71e7, with debug_info, not stripped
</code></pre><h2 id="unix-anyone-can-execute-and-read-anything-in-these-dirs">UNIX anyone can execute and read anything in these dirs</h2>
<pre><code class="language-console" data-lang="console">$ chmod -R a+rx $dir
</code></pre><h2 id="debugging-actions-self-hosted-runners">Debugging actions self-hosted runners</h2>
<pre><code class="language-console" data-lang="console">$ gh run rerun --failed $(gh run list | head -n 2 | tail -n 1 | awk '{print $(NF-2)}') &amp;&amp; sleep 1 &amp;&amp; gh run watch --exit-status -i 1 $(gh run list | head -n 2 | tail -n 1 | awk '{print $(NF-2)}') || gh run view --log $(gh run list | head -n 2 | tail -n 1 | awk '{print $(NF-2)}')
</code></pre><h2 id="used-the-menu-button-on-the-keyboard-for-the-first-time-ever-today">Used the menu button on the keyboard for the first time ever today</h2>
<p><a href="https://support.google.com/chrome/answer/10483214?hl=en">https://support.google.com/chrome/answer/10483214?hl=en</a></p>
<h2 id="edit-a-file-only-if-autoformating-passes">Edit a file only if autoformating passes</h2>
<p>Can be used to hand edit xxd as well if you wanted to</p>
<pre><code class="language-console" data-lang="console">$ cp old-admin.json old-old-admin.json; cp ~/.local/admin.json old-admin.json &amp;&amp; python -m json.tool old-admin.json &gt; admin.json || cp old-admin.json admin.json &amp;&amp; cp admin.json staged.json &amp;&amp; vim staged.json &amp;&amp; python -m json.tool &lt; staged.json &gt; admin.json &amp;&amp; cp admin.json ~/.local/admin.json
</code></pre><h2 id="quick-pop-shell-from-python">Quick pop shell from python</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>
<span class="n">directory</span> <span class="o">=</span> <span class="s2">&#34;/tmp&#34;</span>
<span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;bash -c &#39;cd {directory}; pwd; exec bash&#39;&#34;</span><span class="p">)</span>
</code></pre></div><h2 id="capture-output-of-shell-stderr-and-out-to-file-by-datestamp">Capture output of shell stderr and out to file by datestamp</h2>
<p>Combine with bash history to create Alice herstory as fully connected view.</p>
<pre><code class="language-console" data-lang="console">$ nodemon -e py --exec 'clear; alice please contribute -log debug -repos https://github.com/pdxjohnny/testa -- recommended community standards 2&gt;&amp;1 | tee .output/$(date +%4Y-%m-%d-%H-%M).txt; test 1'
</code></pre><pre><code class="language-console" data-lang="console">$ grep -n -C 5 -i contribute_readme_md $(find .output/ | sort | tail -n 1)
</code></pre><h2 id="python-reverse-lines-in-file">Python reverse lines in file</h2>
<pre><code class="language-console" data-lang="console">$ python -c 'import sys; print(&quot;&quot;.join(list(filter(bool, sys.stdin))[::-1]))' &lt; commits.txt | tee commits-ordered.txt
</code></pre><h2 id="cherry-pick-the-last-two-commits">Cherry pick the last two commits</h2>
<pre><code class="language-console" data-lang="console">$ git cherry-pick branchname~2..branchname
</code></pre><h2 id="print-git-log-with-links-to-commits-on-github">Print git log with links to commits on github</h2>
<pre><code class="language-console" data-lang="console">$ export remote=&quot;$(git remote get-url $(git remote))&quot; &amp;&amp; git log --pretty=oneline -n 2 | sed -e &quot;s#^#${remote}/commit/#&quot;
</code></pre><h2 id="you-can-drag-files-videos-even-right-into-a-markdown-document-to-uploda-them-to-github">You can drag files (videos even) right into a markdown document to uploda them to github</h2>
<h2 id="download-a-python-package-with-curl-and-verify-the-contents-using-the-sha">Download a python package with curl and verify the contents using the SHA</h2>
<p>Sometimes downloading a package with pip will fail.</p>
<pre><code class="language-console" data-lang="console">$ ulimit -c unlimited
$ python -m pip download torch
Collecting torch
  Downloading torch-1.12.1-cp39-cp39-manylinux1_x86_64.whl (776.4 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸ 776.3/776.4 MB 13.0 MB/s eta 0:00:01Killed
</code></pre><p>Look for the path to the download you want.</p>
<pre><code class="language-console" data-lang="console">$ curl -sfL https://pypi.org/simple/torch/ | grep torch-1.12.1-cp39-cp39-manylinux1_x86_64.whl
    &lt;a href=&quot;https://files.pythonhosted.org/packages/1e/2f/06d30fbc76707f14641fe737f0715f601243e039d676be487d0340559c86/torch-1.12.1-cp39-cp39-manylinux1_x86_64.whl#sha256=9b356aea223772cd754edb4d9ecf2a025909b8615a7668ac7d5130f86e7ec421&quot; data-requires-python=&quot;&amp;gt;=3.7.0&quot; &gt;torch-1.12.1-cp39-cp39-manylinux1_x86_64.whl&lt;/a&gt;&lt;br /&gt;
</code></pre><p>Download the package.</p>
<pre><code class="language-console" data-lang="console">$ curl -fLOC - https://files.pythonhosted.org/packages/1e/2f/06d30fbc76707f14641fe737f0715f601243e039d676be487d0340559c86/torch-1.12.1-cp39-cp39-manylinux1_x86_64.whl
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  740M  100  740M    0     0  85.1M      0  0:00:08  0:00:08 --:--:--  106M

Verify the SHA appended to our downloaded URL from our inital command.

```console
$ sha256sum -c - &lt;&lt;&lt;'9b356aea223772cd754edb4d9ecf2a025909b8615a7668ac7d5130f86e7ec421  torch-1.12.1-cp39-cp39-manylinux1_x86_64.whl'
torch-1.12.1-cp39-cp39-manylinux1_x86_64.whl: OK
</code></pre><p>Install the package</p>
<pre><code class="language-console" data-lang="console">$ python -m pip install ./torch-1.12.1-cp39-cp39-manylinux1_x86_64.whl
</code></pre><p>Now it should appear to pip as installed</p>
<pre><code class="language-console" data-lang="console">$ python -m pip install -U pip setuptools wheel
Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: pip in /.pyenv/versions/3.9.13/lib/python3.9/site-packages (22.2.1)
Collecting pip
  Downloading pip-22.2.2-py3-none-any.whl (2.0 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.0/2.0 MB 10.3 MB/s eta 0:00:00
Requirement already satisfied: setuptools in /.pyenv/versions/3.9.13/lib/python3.9/site-packages (63.2.0)
Collecting setuptools
  Downloading setuptools-65.3.0-py3-none-any.whl (1.2 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.2/1.2 MB 16.5 MB/s eta 0:00:00
Requirement already satisfied: wheel in /.pyenv/versions/3.9.13/lib/python3.9/site-packages (0.37.1)
Installing collected packages: setuptools, pip
Successfully installed pip-22.2.2 setuptools-65.3.0

[notice] A new release of pip available: 22.2.1 -&gt; 22.2.2
[notice] To update, run: pip install --upgrade pip
$ pip install torch==1.12.1
Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: torch==1.12.1 in ./.local/lib/python3.9/site-packages (1.12.1)
Requirement already satisfied: typing-extensions in ./.local/lib/python3.9/site-packages (from torch==1.12.1) (4.3.0)
</code></pre><h2 id="read-markdown-in-terminal">Read markdown in terminal</h2>
<pre><code class="language-console" data-lang="console">curl -sfL https://github.com/openai/whisper/raw/main/README.md | python -m rich.markdown /dev/stdin | less -r
</code></pre><h2 id="windows-disable-taskbar-icon-blinking">Windows disable taskbar icon blinking</h2>
<p>Source: <a href="https://answers.microsoft.com/en-us/msteams/forum/all/how-to-stop-teams-from-blinking-in-taskbars-when/decc661a-7c4a-4f7e-a729-afdee2f14824">https://answers.microsoft.com/en-us/msteams/forum/all/how-to-stop-teams-from-blinking-in-taskbars-when/decc661a-7c4a-4f7e-a729-afdee2f14824</a></p>
<blockquote>
<p>Rudy (can't fail): Please edit the value of ForegroundFlashCount from the HKEY_CURRENT_USER\Control Panel\Desktop registry to the value of 1, then the icon will flash once. Which can reduce the number of icon flashing. Note: Setting to 0 will make the icon continuously flash. If you still need to stop Teams' icon flash, for this Windows OS related question, we will move this thread back to the original category. Meanwhile, if you don't want to use Teams client, actually, you can let it run in background via selecting the &quot;Open application in background&quot; options in Settings &gt; General.</p>
</blockquote>
<h2 id="display-date-with-timezone">Display date with timezone</h2>
<pre><code class="language-console" data-lang="console">$ date -Iseconds
2022-10-05T22:30:42-07:00
</code></pre><h2 id="reboot-to-bios">Reboot to BIOS</h2>
<p>Source: <a href="https://twitter.com/ADurrante/status/1578052630043140101?s=20&amp;t=Ypq4nyTINjL_gPctxvvN1A">https://twitter.com/ADurrante/status/1578052630043140101?s=20&amp;t=Ypq4nyTINjL_gPctxvvN1A</a></p>
<pre><code class="language-console" data-lang="console">$ shutdown /r /fw /f /t 0
</code></pre><h2 id="git-push-to-current-branch">Git push to current branch</h2>
<pre><code class="language-console" data-lang="console">$ git push -u origin $(git branch | grep -E '^\*' | sed -e 's/\* //')
</code></pre><h2 id="ssh-port-forward-remote-port-to-enable-connection-via-local-port-to-port-on-remote-server"><code>ssh</code> port forward remote port to enable connection via local port to port on remote server</h2>
<pre><code class="language-console" data-lang="console">$ ssh -nNT -L 8000::8000 target
</code></pre><h2 id="ssh-port-forward-local-port-to-enable-connection-to-port-on-remote-server-to-access-local-port"><code>ssh</code> port forward local port to enable connection to port on remote server to access local port</h2>
<pre><code class="language-console" data-lang="console">$ ssh -nNT -R 127.0.0.1:6000:0.0.0.0:6000 target
</code></pre><p>Ensure <code>GatewayPorts</code> is <code>yes</code> server side</p>
<p><strong>/etc/ssh/sshd_config</strong></p>
<pre><code>AllowTcpForwarding yes
GatewayPorts yes
</code></pre><h2 id="json-to-yaml-with-python-cli">JSON to YAML with Python CLI</h2>
<p>Source: <a href="https://github.com/intel/dffml/blob/8847989eb4cc9f6aa484285ba9c11ff920113ed3/docs/arch/0008-Manifest.md">https://github.com/intel/dffml/blob/8847989eb4cc9f6aa484285ba9c11ff920113ed3/docs/arch/0008-Manifest.md</a></p>
<pre><code class="language-console" data-lang="console">$ python -c &quot;import sys, pathlib, json, yaml; print(yaml.dump(json.load(sys.stdin)))&quot; &lt; manifest.json
</code></pre><h2 id="post-wip-diff-to-pull-request">Post WIP diff to Pull Request</h2>
<pre><code class="language-console" data-lang="console">$ (echo '```diff' &amp;&amp; git diff &amp;&amp; echo '```') | gh pr comment -F -
</code></pre><h2 id="mirror-site-with-wget">Mirror site with wget</h2>
<blockquote>
<p>Source: <a href="https://handyman.dulare.com/advanced-wget-website-mirroring/">https://handyman.dulare.com/advanced-wget-website-mirroring/</a></p>
</blockquote>
<pre><code class="language-console" data-lang="console">$ wget --mirror --convert-links --adjust-extension --page-requisites  http://www.mywebsite.com/
</code></pre><h2 id="remove-bullshit-docker-images">Remove bullshit docker images</h2>
<pre><code class="language-console" data-lang="console">$ docker rm $(docker ps -qa)
$ docker rmi $(docker images | grep \&lt;none\&gt; | awk '{print $3}')
</code></pre><h2 id="print-all-lines-and-variables-in-a-python-file-as-it-executes">Print all lines and variables in a Python file as it executes</h2>
<p><a href="https://github.com/alexmojaki/snoop">https://github.com/alexmojaki/snoop</a></p>
<pre><code class="language-console" data-lang="console">$ python -m pip install snoop
$ sed -e 's/import os/import snoop\n&amp;/g' -e 's/def main/@snoop\n&amp;/g' ~/dffml/.github/actions/create_manifest_instance_build_images_containers/images_containers_manifest.py
</code></pre><h2 id="remap-fields-with-jq">Remap fields with jq</h2>
<pre><code class="language-console" data-lang="console">$ echo '{&quot;mykey&quot;: {&quot;a&quot;: 42}}' | jq 'to_entries[] | {(.key): {&quot;alice&quot;: (.value.&quot;a&quot;)}}' | jq -s 'add'
{
  &quot;mykey&quot;: {
    &quot;alice&quot;: 42
  }
}
</code></pre><h2 id="ssh-through-socks-proxy-with-netcat">SSH through socks proxy with netcat</h2>
<ul>
<li><a href="https://superuser.com/questions/454210/how-can-i-use-ssh-with-a-socks-5-proxy">https://superuser.com/questions/454210/how-can-i-use-ssh-with-a-socks-5-proxy</a></li>
</ul>
<pre><code class="language-console" data-lang="console">$ ssh -R 80:localhost:8080 -o ProxyCommand=&quot;nc -X 5 -x 127.0.0.1:6000 %h %p&quot; nokey@localhost.run
</code></pre><pre><code class="language-console" data-lang="console">$ ssh -nT -R 80:localhost:8080 nokey@localhost.run 2&gt;/dev/null | grep --line-buffered 'tunneled with tls' | python -c 'import sys; print(sys.stdin.readline().split()[-1])' | tee public-url.txt &amp;
</code></pre><h2 id="powershell-to-python">PowerShell to Python</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">http.server</span>

<span class="n">http</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">BaseHTTPRequestHandler</span><span class="o">.</span><span class="n">do_POST</span> <span class="o">=</span> <span class="k">lambda</span> <span class="bp">self</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span>
    <span class="p">[</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">send_response</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">send_header</span><span class="p">(</span><span class="s2">&#34;Content-type&#34;</span><span class="p">,</span> <span class="s2">&#34;text/plain&#34;</span><span class="p">),</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">send_header</span><span class="p">(</span><span class="s2">&#34;Content-length&#34;</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">end_headers</span><span class="p">(),</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">wfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;OK</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">),</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">buffer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">rfile</span><span class="o">.</span><span class="n">read</span><span class="p">()),</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
    <span class="p">]</span>
<span class="p">)</span>
<span class="n">http</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span>
    <span class="p">(</span><span class="s2">&#34;0.0.0.0&#34;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">),</span> <span class="n">http</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">BaseHTTPRequestHandler</span>
<span class="p">)</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
</code></pre></div><pre><code class="language-console" data-lang="console">$ python -uc 'import sys, http.server; http.server.BaseHTTPRequestHandler.do_POST = (lambda self: list([self.send_response(200), self.send_header(&quot;Content-type&quot;, &quot;text/plain&quot;), self.send_header(&quot;Content-length&quot;, 3), self.end_headers(), self.wfile.write(b&quot;OK\n&quot;), sys.stdout.buffer.write(self.rfile.read()), sys.exit(0)])); http.server.HTTPServer((&quot;0.0.0.0&quot;, 8080), http.server.BaseHTTPRequestHandler).serve_forever()' | python -um json.tool | tee data.json
</code></pre><div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nv">$body</span> <span class="p">=</span> <span class="nb">Get-Content</span> <span class="n">-Path</span> <span class="n">data</span><span class="p">.</span><span class="n">json</span> <span class="n">-Encoding</span> <span class="n">UTF8</span> <span class="n">-Raw</span>
<span class="nb">Invoke-WebRequest</span> <span class="n">-Uri</span> <span class="n">http</span><span class="err">:</span><span class="p">//</span><span class="n">localhost</span><span class="err">:</span><span class="n">8080</span><span class="p">/</span> <span class="n">-Method</span> <span class="n">POST</span> <span class="n">-Body</span> <span class="nv">$body</span>
</code></pre></div><h2 id="digital-ocean">Digital Ocean</h2>
<p>I ❤️ DigitalOcean 🐳</p>
<ul>
<li><a href="https://github.com/tmux/tmux/wiki/Advanced-Use#piping-pane-changes">https://github.com/tmux/tmux/wiki/Advanced-Use#piping-pane-changes</a></li>
</ul>
<h3 id="create-a-docker-droplet">Create a Docker Droplet</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">COMPUTE_DOMAIN</span><span class="o">=</span>chadig.com <span class="o">&amp;&amp;</span> <span class="nb">export</span> <span class="nv">COMPUTE_SUBDOMAIN</span><span class="o">=</span>scitt.eve <span class="nb">export</span> <span class="nv">COMPUTE_NAME</span><span class="o">=</span>scitt-eve

doctl compute ssh-key import <span class="k">$(</span>hostname<span class="k">)</span> --public-key-file <span class="s2">&#34;</span><span class="si">${</span><span class="nv">HOME</span><span class="si">}</span><span class="s2">/.ssh/id_rsa.pub&#34;</span><span class="p">;</span> <span class="o">(</span><span class="nb">set</span> -xu <span class="o">&amp;&amp;</span> doctl compute droplet create --ssh-keys <span class="s2">&#34;</span><span class="k">$(</span>ssh-keygen -l -E md5 -f ~/.ssh/id_rsa.pub <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span> <span class="p">|</span> sed -e <span class="s1">&#39;s/MD5://1&#39;</span><span class="k">)</span><span class="s2">&#34;</span> --image <span class="s2">&#34;</span><span class="k">$(</span>doctl compute image list-distribution --no-header --format Slug <span class="p">|</span> grep fedora <span class="p">|</span> tail -n 1<span class="k">)</span><span class="s2">&#34;</span> --size <span class="k">$(</span>doctl compute size list --no-header --format Slug <span class="p">|</span> head -n <span class="m">2</span> <span class="p">|</span> tail -n 1<span class="k">)</span> --region sfo3 --droplet-agent<span class="o">=</span><span class="nb">true</span> --tag-name scitt <span class="s2">&#34;</span><span class="si">${</span><span class="nv">COMPUTE_NAME</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span> <span class="nb">time</span> bash -xeuo pipefail -c <span class="s1">&#39;STATUS=new; while [[ &#34;x${STATUS}&#34; = &#34;xnew&#34; ]]; do STATUS=$(doctl compute droplet get --no-header --format Status ${COMPUTE_NAME}); done&#39;</span> <span class="o">&amp;&amp;</span> <span class="nb">export</span> <span class="nv">COMPUTE_IPV4</span><span class="o">=</span><span class="s2">&#34;&#34;</span> <span class="o">&amp;&amp;</span> <span class="k">while</span> <span class="o">[[</span> <span class="s2">&#34;x</span><span class="si">${</span><span class="nv">COMPUTE_IPV4</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">=</span> <span class="s2">&#34;x&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">do</span> <span class="nb">export</span> <span class="nv">COMPUTE_IPV4</span><span class="o">=</span><span class="k">$(</span>doctl compute droplet list --no-header --format PublicIPv4 <span class="s2">&#34;</span><span class="si">${</span><span class="nv">COMPUTE_NAME</span><span class="si">}</span><span class="s2">&#34;</span><span class="k">)</span><span class="p">;</span> <span class="k">done</span> <span class="o">&amp;&amp;</span> doctl compute domain records create --record-name <span class="s2">&#34;</span><span class="si">${</span><span class="nv">COMPUTE_SUBDOMAIN</span><span class="si">}</span><span class="s2">&#34;</span> --record-ttl <span class="m">3600</span> --record-type A --record-data <span class="s2">&#34;</span><span class="si">${</span><span class="nv">COMPUTE_IPV4</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">COMPUTE_DOMAIN</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span> <span class="k">while</span> ! ssh -i <span class="s2">&#34;</span><span class="si">${</span><span class="nv">HOME</span><span class="si">}</span><span class="s2">/.ssh/id_rsa.pub&#34;</span> -o <span class="nv">StrictHostKeyChecking</span><span class="o">=</span>no <span class="s2">&#34;root@</span><span class="si">${</span><span class="nv">COMPUTE_IPV4</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;set -x &amp;&amp; dnf -y install git tmux python3 python3-pip &amp;&amp; tmux new-session -d -s http_server &#39;python -m http.server 80&#39;&#34;</span><span class="p">;</span> <span class="k">do</span> sleep 1<span class="p">;</span> <span class="k">done</span><span class="o">)</span>

doctl compute droplet delete --force <span class="k">$(</span>doctl compute droplet get --no-header --format ID <span class="s2">&#34;</span><span class="si">${</span><span class="nv">COMPUTE_NAME</span><span class="si">}</span><span class="s2">&#34;</span><span class="k">)</span>

<span class="nb">export</span> <span class="nv">COMPUTE_IPV4</span><span class="o">=</span><span class="k">$(</span>doctl compute droplet list --no-header --format PublicIPv4 <span class="s2">&#34;</span><span class="si">${</span><span class="nv">COMPUTE_NAME</span><span class="si">}</span><span class="s2">&#34;</span><span class="k">)</span>
ssh -t -i <span class="s2">&#34;</span><span class="si">${</span><span class="nv">HOME</span><span class="si">}</span><span class="s2">/.ssh/id_rsa.pub&#34;</span> -o <span class="nv">StrictHostKeyChecking</span><span class="o">=</span>no <span class="s2">&#34;root@</span><span class="si">${</span><span class="nv">COMPUTE_IPV4</span><span class="si">}</span><span class="s2">&#34;</span> <span class="s2">&#34;tmux a&#34;</span>
</code></pre></div><p><a href="https://asciinema.org/a/620287"><img src="https://asciinema.org/a/620287.svg" alt="asciicast"></a></p>]]></content>
  </entry>
  <entry>
    <title>Personal Development Environment</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/dev-environment/</id>
    <updated>2020-06-25T00:00:00Z</updated>
    <published>2020-06-25T00:00:00Z</published>
    <content type="html"><![CDATA[<p><img src="/images/tmux-example.png" alt="tmux-example"></p>
<h2 id="tools">Tools</h2>
<p>Here's a list of things I need to to and the tools I use to do it</p>
<ul>
<li>Development Environment
<ul>
<li>Editor
<ul>
<li><a href="https://www.vim.org/">vim</a>
<ul>
<li><a href="https://vim-adventures.com/">Learn VIM</a></li>
</ul>
</li>
</ul>
</li>
<li>Terminal Multiplexer
<ul>
<li>Let's you turn a single shell session into a bunch of shells, you can put
them side by side, have tabs, label them, etc.</li>
<li><a href="https://github.com/tmux/tmux/wiki">tmux</a>
<ul>
<li><a href="https://gist.github.com/MohamedAlaa/2961058">Cheatsheet by Mohamed Hassan</a></li>
<li><a href="https://github.com/git-pull/tao-of-tmux">The Tao of tmux by Tony Narlock</a></li>
</ul>
</li>
</ul>
</li>
<li>Testing
<ul>
<li><a href="https://nodemon.io/">nodemon</a>
<ul>
<li>This will change your life. Its a command line utility that will re-run
a command when files with certain extentions change. You can use it to
re-compile (if applicable) and re-test whatever your working on every
time you save a file! This will also introduce you to a massive reward
feedback loop like none other. Have fun.</li>
<li><code>nodemon -e py --exec 'clear; python script.py; test 1'</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Chat
<ul>
<li>IRC
<ul>
<li><a href="https://weechat.org/">weechat</a>
<ul>
<li><a href="https://weechat.org/files/doc/stable/weechat_quickstart.en.html">Quickstart</a></li>
</ul>
</li>
</ul>
</li>
<li>Web based
<ul>
<li><a href="">Gitter</a>
<ul>
<li>Good for GitHub communities</li>
</ul>
</li>
<li><a href="https://discord.com/">discord</a>
<ul>
<li>Has peer to peer (webrtc based) video and voice chat</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Documentation
<ul>
<li>Videos and Gifs
<ul>
<li><a href="https://obsproject.com">Open Broadcaster Software</a>
<ul>
<li>I use this to record my screen, it's cross platform and open source</li>
</ul>
</li>
<li><a href="https://ffmpeg.org/">ffmpeg</a>
<ul>
<li>I use this to convert videos I've recorded into gifs to use in README's
and documenation.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Meetings
<ul>
<li><a href="https://meet.google.com">Google Meet</a></li>
</ul>
</li>
<li>Email
<ul>
<li><a href="https://weechat.org/">mutt</a>
<ul>
<li><a href="https://weechat.org/files/doc/stable/weechat_quickstart.en.html">Quickstart</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="dotfiles">dotfiles</h2>
<p>Dotfiles is a term for configuration files. The name comes from their usually
being prefixed with a <code>.</code>. This is because on UNIX operating systems, files
prefixed with a <code>.</code> are <em>hidden</em>.</p>
<p>Here are mine: <a href="http://github.com/pdxjohnny/dotfiles">http://github.com/pdxjohnny/dotfiles</a></p>
<h2 id="linux-distros">Linux distros</h2>
<p>These days I stick mostly to the big three desktop distros, debian, ubuntu, and
fedora. I used to run Solus on my personal, it's out of commision at the moment
and I am waiting until Serpent OS releases <code>.iso</code> images to bring it back up
again.</p>
<p>I started using Fedora when I was doing the CR0/4 KVM work. Kristen and Rick told
me that Fedora gaurentees that you'll be able to run the
<a href="./linux-kernel/#terminology">upstream kernel</a>. Unless you want to mess with
building <code>.deb</code> files on ubuntu so that you have all their configs and patches,
which sounds not fun to me, it's probably best to stick to a well supported distro
that you can just do a clean build of the linux tree and run the kernel on. But
I've been busy trying to get CI ironed out for that project so I haven't gotten
back to running on fedora in a while.</p>
<h2 id="reasoning">Reasoning</h2>
<p>I forced myself to get used to a primarily terminal based development
environment because I constantly find myself on systems where I have either only
ssh or serial access.</p>
<p>Let me give you some scenarios where this might happen to you (and therefore its
nice to already be used to a terminal based workflow).</p>
<ul>
<li>You run Linux, your desktop crashed or froze
<ul>
<li>Press Ctrl-Alt-[F1 through F12] and you'll be presented with a terminal!</li>
<li>You're on a deadline (because when else would your desktop crash or freeze)
or your not sure what will happen / you will loose if you reboot the
machine.</li>
<li>No worries! Just <code>tmux attach</code> and you're right back where you were! Commit
your work, push it and reboot without worry.</li>
</ul>
</li>
<li>The production server broke
<ul>
<li>You're probably only going to have <code>ssh</code> access to this thing. You going to
want to read the logs and be able to poke around the file system with your
editor of choice (mine is <code>vim</code>) and restart stuff to see what's wrong.
(Chances are the server won't have <code>tmux</code>, but it might have
<a href="https://linuxize.com/post/how-to-use-linux-screen/"><code>screen</code></a> which is
similar so you'll be familiar with the concept).</li>
</ul>
</li>
<li>You started a VM from the command line using QEMU (likely with
<code>-nographic -append &quot;console=ttyS0&quot;</code>) so you have a terminal into the guest
Linux machine but it's not a full ssh session, you're likely limited to 80
columns here. You'll be glad you stuck to 80 columns now that's all you can
see without whacky &quot;scrolling&quot;.</li>
</ul>
<h3 id="alt-tab">Alt-Tab</h3>
<p>The top reason why I do everything in the terminal though is Alt-Tab.</p>
<p>If you keep all your chat, email, open code repos in tabs within <code>tmux</code> then
open one browser window for all the docs, web based chats, etc. The beauty of
this is you only ever have two windows open. Which means whenever you hit
Alt-Tab you never have to guess where your going to end up! This is going to
save you insane amounts of time in the long run. Ditch the clutter. Hakuna
Matata.</p>
<h2 id="notes">Notes</h2>
<p>TAKE NOTES. NOTES ARE A SUPERPOWER. WHAT IS NOT WRITTEN DOWN IS LOST.
WHAT IS NOT ORGANIZED IS LOST. THOSE WHO WANDER ARE LOST WITHOUT NOTES!</p>
<h3 id="format">Format</h3>
<blockquote>
<p><a href="https://github.com/intel/dffml/discussions/1369#discussioncomment-2675744">https://github.com/intel/dffml/discussions/1369#discussioncomment-2675744</a></p>
</blockquote>
<pre><code># YYYY-MM-DD Title or Meeting Name

- NTT
  - Ensure each of these are brought up
- Topic 1
  - Notes go here organized by topic
- TODO
  - Generic future actions
- Next Steps
  - ARs
    - Name will ...
  - Generic near term future actions
</code></pre><h4 id="shorthand">Shorthand</h4>
<p>NTT - Need To Talk about these things in the meeting, checklist of things
that must be addressed or brought up</p>
<h2 id="new-dev-box-bring-up">New dev box bring up</h2>
<p>This is me attempting to collect all the things I do when I set up a new
machine for development.</p>
<p>I should just put this in a container and then extract the layer over the
homedir via curl + tar.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">NAME_FIRST_LAST</span><span class="o">=</span><span class="s2">&#34;John Andersen&#34;</span>
<span class="nv">EMAIL</span><span class="o">=</span>johnandersenpdx@gmail.com

<span class="c1"># Create homedir venv</span>
mkdir -p ~/.local/.venv
python -m venv ~/.local/.venv <span class="o">||</span> python3 -m venv ~/.local/.venv
. ~/.local/.venv/bin/activate
python -m pip install -U pip setuptools wheel
python -m pip install -U keyring keyrings-alt

<span class="c1"># Install GitHub CLI</span>
<span class="c1"># https://github.com/cli/cli/blob/trunk/docs/install_linux.md</span>
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg <span class="p">|</span> sudo dd <span class="nv">of</span><span class="o">=</span>/usr/share/keyrings/githubcli-archive-keyring.gpg
<span class="nb">echo</span> <span class="s2">&#34;deb [arch=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="s2"> signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/github-cli.list &gt; /dev/null
sudo apt update
sudo apt install -y gh

<span class="c1"># Log into GitHub</span>
gh auth login

<span class="c1"># Configure git</span>
git config --global user.name <span class="nv">$NAME_FIRST_LAST</span>
git config --global user.email <span class="nv">$EMAIL</span>
git config --global pull.rebase <span class="nb">true</span>

<span class="c1"># Clone dotfiles</span>
git clone https://github.com/pdxjohnny/dotfiles ~/.dotfiles
<span class="nb">cd</span> ~/.dotfiles
./install.sh
<span class="nb">echo</span> -e <span class="s1">&#39;if [ -f ~/.pdxjohnnyrc ]; then\n. ~/.pdxjohnnyrc\nfi&#39;</span> <span class="p">|</span> tee <span class="s2">&#34;</span><span class="si">${</span><span class="nv">HOME</span><span class="si">}</span><span class="s2">/.bashrc&#34;</span>
<span class="nb">history</span> -a
<span class="nb">exec</span> bash
<span class="nv">dotfiles_branch</span><span class="o">=</span><span class="k">$(</span>hostname<span class="k">)</span>-<span class="k">$(</span>date <span class="s2">&#34;+%4Y-%m-%d-%H-%M&#34;</span><span class="k">)</span>
git checkout -b <span class="nv">$dotfiles_branch</span>
git push --set-upstream origin <span class="nv">$dotfiles_branch</span>

<span class="c1"># Modify dotfiles for host</span>
<span class="c1"># Open tmux and copy based the errors into invalid</span>
<span class="c1"># cat &gt; /tmp/invalid &lt;&lt;&#39;EOF&#39;</span>
<span class="c1"># EOF</span>
<span class="c1"># grep -vE $(invalid=$(&lt; /tmp/invalid); invalid=${invalid/$&#39;\n&#39;/ }; echo $invalid | sed -e &#39;s/ /|/g&#39; &lt; ~/.tmux.conf) \</span>
<span class="c1">#   | (temp_conf=$(mktemp); cat &gt; $temp_conf \</span>
<span class="c1">#      &amp;&amp; truncate  --no-create -s 0 ~/.tmux.conf \</span>
<span class="c1">#      &amp;&amp; tee -a  ~/.tmux.conf &lt; $temp_conf)</span>
sed -i <span class="s2">&#34;s/Dot Files/Dot Files: </span><span class="nv">$dotfiles_branch</span><span class="s2">/g&#34;</span> README.md
<span class="c1"># Save modifications</span>
<span class="nb">cd</span> ~/.dotfiles
git commit -sam <span class="s2">&#34;Initial auto-tailor for </span><span class="k">$(</span>hostname<span class="k">)</span><span class="s2">&#34;</span>
git push

<span class="c1"># Install extras</span>
pip install --force-reinstall -U https://github.com/ytdl-org/youtube-dl/archive/refs/heads/master.tar.gz#egg<span class="o">=</span>youtube_dl
</code></pre></div><h3 id="todo">TODO</h3>
<ul>
<li>
<p>dataflows</p>
<ul>
<li>
<p>tool install per-distro</p>
</li>
<li>
<p>login tasks (<code>~./bashrc</code> run something with <code>&amp;</code> to background)</p>
<ul>
<li>
<p>Check if everything in homedir is either tracked in git or explictly ignored</p>
<ul>
<li>notify-send or equivilent, easy bash pipe allowed triage</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Clear Containers on Arch Linux</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/clear-containers-on-arch-linux/</id>
    <updated>2017-01-18T05:06:04Z</updated>
    <published>2017-01-18T05:06:04Z</published>
    <content type="html"><![CDATA[<p>So you want the security of a virtual machine but the ease of use of docker and
containers? Well Clear Containers is the solution for you my friend. Here I am
going to show you how to install and configure the Clear Containers runtime on
your Arch Linux host.</p>
<p>I have created to packages in AUR to assit you in building the packages you
need.</p>
<h3 id="qemu-lite-package">qemu-lite package</h3>
<p><a href="https://github.com/01org/qemu-lite">qemu-lite</a> provides virtualisation for Clear Containers. It's a fork of qemu
that has a new machine type, pc-lite. Which is a traditional x86_64 machine
with a lot of things striped out. This lets them turn off a lot of things in
the Linux kernel config and thus increases the speed at which the VM (Container
in this case) is run. This also decreases time it takes the virtualised
container to start up.</p>
<p>Lets build qemu-lite, which will replace the hosts qemu package. We just need
to clone the package from the AUR, build it with makepkg, and install it with
pacman.</p>
<p>pacman will complain about qemu-arch-extra and qemu-launcher needing the
regular qemu so if you have those installed you need to remove them. They will
not work with qemu-lite.</p>
<pre><code># Download the one I built for you
wget https://github.com/pdxjohnny/pdxjohnny.github.io/releases/download/CCARCH/qemu-lite-2.7.1-1-x86_64.pkg.tar.xz
# Or build it yourself!
git clone https://aur.archlinux.org/qemu-lite.git
cd qemu-lite
makepkg -cs
# Then install
sudo pacman -U qemu-lite-2.7.1-1-x86_64.pkg.tar.xz
</code></pre><h3 id="cc-oci-runtime-package">cc-oci-runtime package</h3>
<p>The <a href="https://github.com/01org/cc-oci-runtime">Clear Containers runtime</a> is an alternative to runc. You can have some
containers running runc and some running cor (Clear Containers runtime), or all
one or the other. It provides the management of qemu-lite so you can use these
VMs as if they were containers. Basically its where the magic happens.</p>
<pre><code># Download the one I built for you
wget https://github.com/pdxjohnny/pdxjohnny.github.io/releases/download/CCARCH/cc-oci-runtime-2.1.0-1-x86_64.pkg.tar.xz
# Or build it yourself!
git clone https://aur.archlinux.org/cc-oci-runtime.git
cd qemu-lite
makepkg -cs
# Then install
sudo pacman -U cc-oci-runtime-2.1.0-1-x86_64.pkg.tar.xz
</code></pre><h3 id="configuration">Configuration</h3>
<p>Now we need to change how the docker deamon is run so that it knows about the
runtime he have just installed.</p>]]></content>
  </entry>
  <entry>
    <title>3 Resistor Bias Circuit with NMOS Transistor</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/3-resistor-bias-nmos/</id>
    <updated>2016-11-11T20:22:04Z</updated>
    <published>2016-11-11T20:22:04Z</published>
    <content type="html"><![CDATA[<h2 id="circuit">Circuit</h2>
<p><img src="/images/3-resistor-bias-circuit.png" alt="3-resistor-bias-circuit"></p>
<h2 id="steps">Steps</h2>
<ul>
<li>Pick a Vdd</li>
</ul>
<pre><code>9 Volts
</code></pre><ul>
<li>Pick a transistor and Vtn for it</li>
</ul>
<pre><code>2N7002
Vtn = 1.6
</code></pre><ul>
<li>Pick and Id</li>
</ul>
<pre><code>2 mA
</code></pre><ul>
<li>Find RL for Vdd and Id</li>
</ul>
<pre><code>RL = Vdd / Id
RL = 9 Volts / 2 mA
RL = 4.5 k Ohms
</code></pre><ul>
<li>Pick a much smaller current for R1 and R2, Ir (bias resistor current)</li>
</ul>
<pre><code>Ir = 200 uA
</code></pre><ul>
<li>Find R1 and R2 such that the voltage drop across R2 is the same as Vtn. This
is so that any input signal at all will act to turn on the transistor. Then
make R1 drop the rest of Vdd.</li>
</ul>
<pre><code>R2 = Vtn / Ir
R2 = 1.6 / 200 uA
R2 = 8 k Ohms

R2 = (Vdd - Vtn) / Ir
R2 = (9 - 1.6) / 200 uA
R2 = 7.4 / 200 uA
R2 = 37 k Ohms
</code></pre><ul>
<li>Plug in reasonable values for the rest</li>
</ul>
<p>Cin and Cout should both be much much (two orders of magnitude) less than their
respective resistors.</p>
<pre><code>Rin = 1 k Ohms
Cin = 470 nF
Cout = 470 nF
Rout = 100k
</code></pre>]]></content>
  </entry>
  <entry>
    <title>ARM workflow with qemu and arm-none-eabi</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/arm-qemu/</id>
    <updated>2016-11-09T22:57:07Z</updated>
    <published>2016-11-09T22:57:07Z</published>
    <content type="html"><![CDATA[<p>This is just the markdown portion of set of files which can be found here:
<a href="https://gist.github.com/pdxjohnny/3de9a9bdd38cacf3ea394207762f1002">https://gist.github.com/pdxjohnny/3de9a9bdd38cacf3ea394207762f1002</a></p>
<p>This should get you up and running writing ARM assembly without hardware.</p>
<p>Clone this the repo for this turtorial.</p>
<pre><code>git clone https://gist.github.com/pdxjohnny/3de9a9bdd38cacf3ea394207762f1002 arm-qemu
</code></pre><h2 id="dependencies">Dependencies</h2>
<p>The first step is to install the necessary packages. These are the
arm-none-eabi tool chain and qemu with arm support.</p>
<h4 id="arch-linux">Arch Linux</h4>
<pre><code>sudo pacman -S arm-none-eabi-gcc arm-none-eabi-binutils arm-none-eabi-gdb \
  arm-none-eabi-newlib qemu qemu-arch-extra
</code></pre><h4 id="ubuntu">Ubuntu</h4>
<pre><code>sudo apt -y install make qemu-system-arm \
    gcc-arm-none-eabi binutils-arm-none-eabi gdb-arm-none-eabi \
    libstdc++-arm-none-eabi-newlib libnewlib-arm-none-eabi
</code></pre><h2 id="gdb">GDB</h2>
<p>In <code>.gdbinit</code> we have placed commands which gdb will run on startup. But to
make this work the <code>.gdbinit</code> file in our home directory needs to say its ok
for gdb to load this <code>.gdbinit</code> file. To do that we just add the directory to
the auto-load safe-path.</p>
<pre><code>echo &quot;set auto-load safe-path $PWD&quot; &gt;&gt; ~/.gdbinit
</code></pre><h2 id="building">Building</h2>
<p>The Makefile should have plenty of comments to help you understand what is
being done in it. It takes all the <code>.s</code> assembly files in the current directory
and compiles them into object files. Then it runs the linker to create the ELF
binary. All of this is done with arm-none-eabi-gcc rather than your regular
gcc for host programs.</p>
<pre><code>make
</code></pre><p>Will rebuild all the modified <code>.s</code> files into their object file forms and
relink to the binary. Run <code>make clean all</code> if you are having really weird
errors. That usually fixes things.</p>
<h2 id="running">Running</h2>
<p>To run you can do <code>qemu-arm ./main</code>. But hey why not put it in the Makefile
right.</p>
<pre><code>make all qemu
</code></pre><p>Will rebuild any changed files and run the created binary in qemu.</p>
<h2 id="debugging">Debugging</h2>
<p>Oh you ran the program and everything exploded? Time to debug.</p>
<pre><code>make all gdb
</code></pre><p>Will rebuild all your source files and start the program in qemu with it as a
gdb target on port 1234, so make sure nothing else is using that port or change
it in the <code>.gdbinit</code> file and <code>Makefile</code>.</p>
<h2 id="help-nothing-works">Help nothing works</h2>
<p>Comment on the gist with the problem so we can figure it out and everyone else
can see the solution.</p>
<h2 id="arduino">Arduino</h2>
<pre><code class="language-console" data-lang="console">curl -sfL https://github.com/arduino/arduino-cli/releases/download/0.19.2/arduino-cli_0.19.2_Linux_64bit.tar.gz | tar xvz
# Hangs because proxies aren't set yet
timeout 1s ./arduino-cli config init --overwrite
./arduino-cli config set network.proxy $https_proxy
./arduino-cli core update-index
./arduino-cli core install arduino:avr
./arduino-cli compile --fqbn arduino:avr:leonardo .
</code></pre><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">Compile QEMU Version 5.1.0 or newer. 5.1.0 is when AVR support was introduced.
</span><span class="s2">
</span><span class="s2">.. code-block:: console
</span><span class="s2">
</span><span class="s2">    $ wget https://download.qemu.org/qemu-6.1.0.tar.xz
</span><span class="s2">    $ tar xvJf qemu-6.1.0.tar.xz
</span><span class="s2">    $ cd qemu-6.1.0
</span><span class="s2">    $ ./configure --target-list=&#34;avr-softmmu&#34;
</span><span class="s2">    $ make -j $(($(nproc)*4))
</span><span class="s2">
</span><span class="s2">Change directory to this file&#39;s parent directory and run using unittest
</span><span class="s2">
</span><span class="s2">.. code-block:: console
</span><span class="s2">
</span><span class="s2">    $ cd python/cmd_msg_test/
</span><span class="s2">    $ python -u -m unittest discover -v
</span><span class="s2">    test_connect (test_cmd_msg.TestSerial) ... qemu-system-avr: -chardev socket,id=serial_port,path=/tmp/tmpuuq3oqvj/socket,server=on: info: QEMU waiting for connection on: disconnected:unix:/tmp/tmpuuq3oqvj/socket,server=on
</span><span class="s2">    reading message from arduino
</span><span class="s2">    b&#39;&#39;
</span><span class="s2">    b&#39;&#39;
</span><span class="s2">    qemu-system-avr: terminating on signal 2 from pid 90395 (python)
</span><span class="s2">    ok
</span><span class="s2">
</span><span class="s2">    ----------------------------------------------------------------------
</span><span class="s2">    Ran 1 test in 4.601s
</span><span class="s2">
</span><span class="s2">    OK
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">signal</span>
<span class="kn">import</span> <span class="nn">pathlib</span>
<span class="kn">import</span> <span class="nn">tempfile</span>
<span class="kn">import</span> <span class="nn">unittest</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">contextlib</span>
<span class="kn">import</span> <span class="nn">dataclasses</span>

<span class="kn">import</span> <span class="nn">main</span>

<span class="c1"># top level directory in this git repo is three levels up</span>
<span class="n">REPO_ROOT</span> <span class="o">=</span> <span class="n">pathlib</span><span class="o">.</span><span class="n">Path</span><span class="p">(</span><span class="vm">__file__</span><span class="p">)</span><span class="o">.</span><span class="n">parents</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">resolve</span><span class="p">()</span>


<span class="nd">@contextlib.contextmanager</span>
<span class="k">def</span> <span class="nf">start_qemu</span><span class="p">(</span><span class="n">bios</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">tempfile</span><span class="o">.</span><span class="n">TemporaryDirectory</span><span class="p">()</span> <span class="k">as</span> <span class="n">tempdir</span><span class="p">:</span>
        <span class="n">socket_path</span> <span class="o">=</span> <span class="n">pathlib</span><span class="o">.</span><span class="n">Path</span><span class="p">(</span><span class="n">tempdir</span><span class="p">,</span> <span class="s2">&#34;socket&#34;</span><span class="p">)</span>
        <span class="n">qemu_cmd</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s2">&#34;qemu-system-avr&#34;</span><span class="p">,</span>
            <span class="s2">&#34;-mon&#34;</span><span class="p">,</span>
            <span class="s2">&#34;chardev=none&#34;</span><span class="p">,</span>
            <span class="s2">&#34;-chardev&#34;</span><span class="p">,</span>
            <span class="n">f</span><span class="s2">&#34;null,id=none&#34;</span><span class="p">,</span>
            <span class="s2">&#34;-serial&#34;</span><span class="p">,</span>
            <span class="s2">&#34;chardev:serial_port&#34;</span><span class="p">,</span>
            <span class="s2">&#34;-chardev&#34;</span><span class="p">,</span>
            <span class="n">f</span><span class="s2">&#34;socket,id=serial_port,path={socket_path},server=on&#34;</span><span class="p">,</span>
            <span class="s2">&#34;-nographic&#34;</span><span class="p">,</span>
            <span class="s2">&#34;-machine&#34;</span><span class="p">,</span>
            <span class="s2">&#34;arduino-uno&#34;</span><span class="p">,</span>
            <span class="s2">&#34;-cpu&#34;</span><span class="p">,</span>
            <span class="s2">&#34;avr6-avr-cpu&#34;</span><span class="p">,</span>
            <span class="s2">&#34;-bios&#34;</span><span class="p">,</span>
            <span class="nb">str</span><span class="p">(</span><span class="n">bios</span><span class="p">),</span>
        <span class="p">]</span>
        <span class="n">qemu_proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">qemu_cmd</span><span class="p">,</span> <span class="n">start_new_session</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">serial_port_path</span> <span class="o">=</span> <span class="n">pathlib</span><span class="o">.</span><span class="n">Path</span><span class="p">(</span><span class="n">tempdir</span><span class="p">,</span> <span class="s2">&#34;ttyACM0&#34;</span><span class="p">)</span>
        <span class="n">socat_cmd</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s2">&#34;socat&#34;</span><span class="p">,</span>
            <span class="n">f</span><span class="s2">&#34;PTY,link={serial_port_path},rawer,wait-slave&#34;</span><span class="p">,</span>
            <span class="n">f</span><span class="s2">&#34;UNIX:{socket_path}&#34;</span><span class="p">,</span>
        <span class="p">]</span>
        <span class="n">socat_proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">socat_cmd</span><span class="p">,</span> <span class="n">start_new_session</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="ow">not</span> <span class="n">serial_port_path</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>
                <span class="k">pass</span>
            <span class="k">yield</span> <span class="nb">str</span><span class="p">(</span><span class="n">serial_port_path</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># Kill the whole process group (for problematic processes like qemu)</span>
            <span class="n">os</span><span class="o">.</span><span class="n">killpg</span><span class="p">(</span><span class="n">qemu_proc</span><span class="o">.</span><span class="n">pid</span><span class="p">,</span> <span class="n">signal</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">)</span>
            <span class="n">os</span><span class="o">.</span><span class="n">killpg</span><span class="p">(</span><span class="n">socat_proc</span><span class="o">.</span><span class="n">pid</span><span class="p">,</span> <span class="n">signal</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">)</span>
        <span class="n">qemu_proc</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
        <span class="n">socat_proc</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>


<span class="k">class</span> <span class="nc">RunQEMU</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    Base class which will start QEMU to emulate an Arduino Uno machine using the
</span><span class="s2">    BIOS (the .elf output of arduino-cli compile) provided.
</span><span class="s2">
</span><span class="s2">    qemu-system-avr from QEMU Version 5.1.0 or newer is required.
</span><span class="s2">
</span><span class="s2">    Starts a new virtual machine for each test_ function.
</span><span class="s2">    &#34;&#34;&#34;</span>

    <span class="n">BIOS</span> <span class="o">=</span> <span class="n">REPO_ROOT</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s2">&#34;build&#34;</span><span class="p">,</span> <span class="s2">&#34;serial_cmd_test.ino.elf&#34;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">qemu</span> <span class="o">=</span> <span class="n">start_qemu</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">BIOS</span><span class="p">)</span>
        <span class="c1"># __enter__ is called at the begining of a `with` block. __exit__ is</span>
        <span class="c1"># called at the end of a `with` block. By calling these functions</span>
        <span class="c1"># explicitly within setUp() and tearDown() we ensure a new VM is created</span>
        <span class="c1"># and destroyed each time.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">serial_port</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">qemu</span><span class="o">.</span><span class="fm">__enter__</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">tearDown</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">qemu</span><span class="o">.</span><span class="fm">__exit__</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">qemu</span>


<span class="k">class</span> <span class="nc">TestSerial</span><span class="p">(</span><span class="n">RunQEMU</span><span class="p">,</span> <span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">test_connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">&#34;SERIAL_PORT&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">serial_port</span>
        <span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="n">sys</span><span class="o">.</span><span class="n">executable</span><span class="p">,</span> <span class="s2">&#34;main.py&#34;</span><span class="p">])</span>
</code></pre></div>]]></content>
  </entry>
  <entry>
    <title>Trinity fuzzer on Android (on Intel)</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/trinity-fuzzer-android/</id>
    <updated>2016-10-17T19:51:22Z</updated>
    <published>2016-10-17T19:51:22Z</published>
    <content type="html"><![CDATA[<h2 id="step-1---clone-trinity">Step 1 - Clone trinity</h2>
<p>Grab the source for trinity. We need to make some minor modifications.</p>
<blockquote>
<p>At the time of writing this the latest commit on master was
3a0e33d1db3214503316840ecfb90075d60ab3be adapt instructions as necessary. The
basic idea of static linking and disabling of feature's you don't need is
still the same.</p>
</blockquote>
<pre><code>git clone https://github.com/kernelslacker/trinity
cd trinity
./configure
</code></pre><h2 id="step-2---32-bit-and-static-compilation">Step 2 - 32 bit and static compilation</h2>
<p>Edit the make file and add <code>-m32</code> to any line containing <code>CFLAGS</code> and add
<code>-static</code> to any line containing <code>LDFLAGS</code>. Just one line not all of them that
say LD/CFLAGS. For example.</p>
<pre><code>CFLAGS += -Wall -Wextra -g -O2 -I. -Iinclude/ -Wimplicit -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -D__linux__
</code></pre><p>Becomes</p>
<pre><code>CFLAGS += -Wall -Wextra -g -O2 -I. -Iinclude/ -Wimplicit -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -D__linux__ -m32
</code></pre><p>And</p>
<pre><code>LDFLAGS += -rdynamic
</code></pre><p>Becomes</p>
<pre><code>LDFLAGS += -rdynamic -static
</code></pre><p>Just change two lines and you're done.</p>
<h2 id="step-3---fix-syscallssendc">Step 3 - Fix syscalls/send.c</h2>
<p>I found that gcc 6.2.1 said that this is an error so it wouldn't let me
compile without this typecast. I haven't noticed anything strange by doing this
so I assume everything still works.</p>
<p>Change the line that reads</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">proto</span><span class="o">-&gt;</span><span class="n">gen_packet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">si</span><span class="o">-&gt;</span><span class="n">triplet</span><span class="p">,</span> <span class="n">ptr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rec</span><span class="o">-&gt;</span><span class="n">a3</span><span class="p">);</span>
</code></pre></div><p>To</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">proto</span><span class="o">-&gt;</span><span class="n">gen_packet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">si</span><span class="o">-&gt;</span><span class="n">triplet</span><span class="p">,</span> <span class="n">ptr</span><span class="p">,</span> <span class="p">(</span><span class="n">size_t</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">rec</span><span class="o">-&gt;</span><span class="n">a3</span><span class="p">);</span>
</code></pre></div><p>And you should now make it past that compilation error.</p>
<blockquote>
<p>syscalls/send.c:33:41: error: passing argument 3 of ‘proto-&gt;gen_packet’ from
incompatible pointer type [-Werror=incompatible-pointer-types]</p>
</blockquote>
<h2 id="step-4---edit-configh">Step 4 - Edit config.h</h2>
<p>Take out anything you don't need or can't compile from <code>config.h</code>. For instance
Android recommends building on Ubuntu 16.04 so we were on a Ubuntu 16.04.1 LTS
machine which at the time of writing is Linux 4.4ish. So we couldn't compile
<code>fds/bpf.c</code> because the kernel headers didn't contain the right version of
<code>linux/bpf.h</code> (bpf_addr was missing some members).</p>
<p>The solution is to comment out <code>USE_BPF</code> from <code>config.h</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#define USE_BPF 1
</span></code></pre></div><p>After</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// #define USE_BPF 1
</span></code></pre></div><h2 id="step-5---verify">Step 5 - Verify</h2>
<p>Before we push to the device make sure it has a chance of working. This means
that it will be 32-bit staticly linked. For the edits we just made to the
commit refernced at the top of this doc file reports the following.</p>
<pre><code>file trinity
trinity: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=e533cc2db1db19c044bdbfa566c72299df7eefc2, not stripped
</code></pre><h2 id="step-6---push-and-run">Step 6 - Push and Run</h2>
<p>Put in on the device and run from <code>/sdcard</code> folder.</p>
<pre><code>adb root
adb remount rw
adb disable-verity
adb reboot
adb push trinity /data/trinity
adb shell 'cd /sdcard &amp;&amp; /data/trinity --dangerous -V /dev/ 2&gt;&amp;1' | tee trinity-dev-1.log
</code></pre><p>Take the blue pill and profit</p>]]></content>
  </entry>
  <entry>
    <title>Fuzzing network applications with peach</title>
    <author>
      <name>John Andersen</name>
      <uri>https://pdxjohnny.github.io/</uri>
    </author>
    <id>https://pdxjohnny.github.io/peach-network/</id>
    <updated>2016-08-10T20:35:13Z</updated>
    <published>2016-08-10T20:35:13Z</published>
    <content type="html"><![CDATA[<p>So you want to fuzz network applications with peach eh? Well you've come to the
right place. This is a tutorial on how to get you fuzzing TCP applications,
without TLS/SSL enabled. If you want to fuzz UDP or an application which only
communicates via TLS/SSL then this is a great place for you to start, however it
will not answer all your questions. I will point you in the right direction at
the end of this post.</p>
<p>The first step in fuzzing is to understand the structure of the protocol. It
often helps to have an example of this structure. Therefore we will be
capturing the data of our target and simply playing it back. If you were to
spend more time, which you should, then you would make data models in peach
which contain specific fields rather than the blob we will be using.</p>
<p>The two most well known ways of getting network traffic are tcpdump and
wireshark. Peach can use input from a file for the data model and mutate it. We
are going to use a tiny tool I wrote to capture the conversations back and
forth rather than telling you to open tcpdump / wireshark and copy paste to a
file. If you would rather do that be my guest.</p>
<h2 id="enter-convo-capture">Enter convo-capture</h2>
<p>This saves the TCP conversation to files. Give it the port and host it needs to
be monitoring. This is especially useful for fuzzing with peach on TCP based
programs so that you don't have to go into wireshark to capture then copy paste
the data from each sequence of packets. This will take all packets and put them
in a file until the other endpoint sends data. Then it will increment the
number on the exchange and write the data to that exchanges file.</p>
<p>The binary has been built and included in the gist for your convenience.</p>
<blockquote>
<p>By no means do I condone putting binaries in git repos but I know not
everyone has the go toolchain. You need libpcap and libpthread to run it.</p>
</blockquote>
<p>Building will use sudo because it will <code>set_cap_raw</code> on convo-capture. If you
don't want to set this then you have to run convo-capture as root.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git clone https://gist.github.com/pdxjohnny/e2d1df77e81f07254da192fe1bc568a0 convo-capture
<span class="nb">cd</span> !$
./build.sh
</code></pre></div><p>Now you can move it to bin if you want or run it prepended with ./ from the
directory you built it.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo mv convo-capture /usr/bin/convo-capture
</code></pre></div><blockquote>
<p>Personally I like to put things in ~/.local/bin/ but do as you will</p>
</blockquote>
<p>We are now ready to capture packets. Keep in mind that convo-capture will not
write over files that you have previously captured if they are in the directory
you are working in. Be sure to delete files from previous captures or change to
a new directory.</p>
<p>Let's try to capture HTTP traffic using curl and python3's http.server
(SimpleHTTPServer in python2). First we need to ssh to another computer and
start an HTTP server or we can start one on our local machine. If you start one
on your machine then everywhere you see example.com replace it with localhost
and add <code>-i lo</code> to convo-capture for capturing on the loopback interface.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>pdxjohnny@pdxjohnny convo-capture<span class="o">]</span>$ ssh example.com
<span class="o">[</span>pdxjohnny@example.com ~<span class="o">]</span>$ python3 -m http.server <span class="m">4444</span>
</code></pre></div><p>Now that we have a HTTP server running lets start convo-capture.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># For localhost add -i lo</span>
<span class="c1"># convo-capture -p 4444 -ip localhost -i lo -v</span>
<span class="o">[</span>pdxjohnny@pdxjohnny convo-capture<span class="o">]</span>$ convo-capture -p <span class="m">4444</span> -ip example.com -v
Capturing TCP port <span class="m">4444</span> <span class="k">for</span> host example.com
</code></pre></div><p>Ok great we are now capturing all traffic going to example.com on port 4444 from
our computer and from example.com port 4444 back to our computer.
Now we just need to use curl to generate a request we can capture.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">curl -v http://example.com:4444/file
</code></pre></div><p>Request sent! Look back at the session running convo-capture, you should see
that the output you observed in curl has been captured (expect for the &lt; and &gt;
left of the headers, curl adds those).</p>
<pre><code class="language-log" data-lang="log">[pdxjohnny@pdxjohnny convo-capture]$ convo-capture -p 4444 -ip example.com -v
Capturing TCP port 4444 for host example.com
GET /file HTTP/1.1
Host: example.com:4444
User-Agent: curl/7.47.0
Accept: */*

HTTP/1.0 200 OK
Server: SimpleHTTP/0.6 Python/3.4.2
Date: Wed, 10 Aug 2016 16:38:42 GMT
Content-type: text/plain
Content-Length: 514
Last-Modified: Tue, 26 Jul 2016 14:43:05 GMT

Yo this is the file
</code></pre><p>Now you can ctrl-c to stop the capture. As you can see we captured the
conversation from our local machine to the remote host and the response the
remote host sent us. If you do an ls you will also see the files that were
created by this capture.</p>
<pre><code class="language-log" data-lang="log">[pdxjohnny@pdxjohnny convo-capture]$ ls -lAF
total 5752
... Aug 10 09:34 10.7.202.149-&gt;10.7.202.78-0
... Aug 10 09:34 10.7.202.78-&gt;10.7.202.149-0
... Aug 10 08:35 build.sh*
... Aug 10 09:17 convo-capture*
... Aug 10 09:33 .git/
... Aug 10 09:16 .gitignore
... Aug 10 09:15 main.go
... Aug 10 09:58 README.md
</code></pre><p>cating the files will make convo-capture's usefulness apparent.</p>
<pre><code class="language-log" data-lang="log">[pdxjohnny@pdxjohnny convo-capture]$ cat 10.7.202.149-&gt;10.7.202.78-0
GET /file HTTP/1.1
Host: example.com:4444
User-Agent: curl/7.47.0
Accept: */*

[pdxjohnny@pdxjohnny convo-capture]$ cat 10.7.202.78-&gt;10.7.202.149-0
HTTP/1.0 200 OK
Server: SimpleHTTP/0.6 Python/3.4.2
Date: Wed, 10 Aug 2016 16:38:42 GMT
Content-type: text/plain
Content-Length: 514
Last-Modified: Tue, 26 Jul 2016 14:43:05 GMT

Yo this is the file
</code></pre><p>As you can see it has assembled the packets into files based on the order they
were sent in. For me the second file, the servers reply, was two packets.
convo-capture saw the two packets in a row from the server to client and said
ok this is all part of one message I'm going to save it to a file as such. A
message is a continuous sequence of packets ended when the other side starts
sending a message. The more messages that are collected the more files you will
see after you kill convo-capture.</p>
<p>There was only one back and forth so they are both 0 in the sequence. If you
were to have ran curl twice with convo-capture running then you would see the
contents of 0 repeated in 1.</p>
<p>This is very useful for fuzzing with peach. Peach allows us to order our call
and response to the target program. For example say you want to fuzz something
like git. git is not a simple call and response. It has an exchange of call,
response, call, response for a clone. Let's walk through how you would use
convo-capture to fuzz the git protocol with peach.</p>
<h2 id="capturing-the-git-protocol">Capturing the git protocol</h2>
<p><a href="https://asciinema.org/a/7xd0u4u0vfv7n7s7gq4f0zdg2"><img src="https://asciinema.org/a/7xd0u4u0vfv7n7s7gq4f0zdg2.png" alt="asciicast"></a></p>
<blockquote>
<p>This video goes shows the how to capture the data involved in a git clone
over the git protocol. Use it as a reference if you are having trouble with
the steps below.</p>
</blockquote>
<p>Let's take a stroll on over to tmp so we don't create a bunch of useless files.
We'll make a directory there to play in.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkdir /tmp/demo
<span class="nb">cd</span> /tmp/demo
</code></pre></div><p>Make a few directories so nothing writes over each other. Then well make a git
repo and populate it with some files.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkdir clonedir capture
mkdir testrepo
<span class="nb">cd</span> testrepo
cat <span class="s">&lt;&lt; EOF &gt; README.md
</span><span class="s">This is a super cool test repo
</span><span class="s">EOF</span>
git init
git add -A
git commit -sam <span class="s1">&#39;Added README.md&#39;</span>
<span class="nb">cd</span> ..
<span class="c1"># You should now be back in /tmp/demo</span>
</code></pre></div><p>We have our testrepo, now lets create a bare copy of it to be served by <a href="https://git-scm.com/book/en/v1/Git-on-the-Server-Git-Daemon">git
daemon</a>. This requires that we make the <code>git-daemon-export-ok</code> file
as well. Then we will start the git server.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git clone --bare testrepo testrepo.git
touch testrepo.git/git-daemon-export-ok
git daemon --reuseaddr --base-path<span class="o">=</span><span class="nv">$PWD</span> <span class="nv">$PWD</span>
<span class="c1"># PWD is faster than typing /tmp/demo</span>
</code></pre></div><p>Great! The git server is up! We can look up what port it is running on, but
if perhaps we were fuzzing something we didn't know we would have to find out.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Apparently netstat is depricated, so let&#39;s use ss</span>
ss -ltnp <span class="p">|</span> grep git
</code></pre></div><p>Alright its port 9418. In another shell go to the capture directory and start
convo-capture.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /tmp/demo/capture
convo-capture -p <span class="m">9418</span> -i lo
</code></pre></div><p>Capture is running, git server is up, all that's left is to go to clonedir and
watch the magic happen.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /tmp/demo/clonedir
git clone git://localhost/testrepo.git
</code></pre></div><p>Now switch back to the shell running convo-capture and hit it will ctrl-c. You
should see four files in the capture directory. We are going to fuzz the git
client so right now we are interested in the files which go from port 9418 to
some other port.</p>
<h2 id="using-our-captured-data-to-fuzz-with-peach">Using our captured data to fuzz with peach</h2>
<p>You should usually test against the master branch or the latest version of
whatever you are fuzzing. You don't want to waste time finding something which
has already been fixed. This is why we are going to build git from source. Of
course you don't have to do this. But if you have never built something from
source it would be good practice.</p>
<p><a href="https://asciinema.org/a/82390"><img src="https://asciinema.org/a/82390.png" alt="asciicast"></a></p>
<blockquote>
<p>This video shows the peach process. You probably want to skip past the
part were we run make on git.</p>
</blockquote>
<p>Now that we know what the git server is sending to the client we could either
fuzz the server or the client. The client is easy because it exits after
cloning were as the server stays up to serve requests.</p>
<p>We are going to compile git from source so we need to download its
dependencies.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get -y install libcurl4-gnutls-dev libexpat1-dev gettext <span class="se">\
</span><span class="se"></span>  libz-dev libssl-dev <span class="se">\
</span><span class="se"></span>  <span class="o">||</span> sudo yum install curl-devel expat-devel gettext-devel <span class="se">\
</span><span class="se"></span>  openssl-devel perl-devel zlib-devel
</code></pre></div><p>Now we are going to clone git build it and install it.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkdir -p /tmp/demo/
<span class="nb">cd</span> /tmp/demo/
git clone --depth<span class="o">=</span><span class="m">1</span> https://github.com/git/git
<span class="nb">cd</span> /tmp/demo/git/
<span class="c1"># I found that the latest git doesn&#39;t cooperate unless I install it</span>
sudo make install
git --version
</code></pre></div><p>Git is installed, now lets copy our relevant captures to a testing directory.
Here we clone the repo for this post and copy the git.xml file out of it. But
you could of course make your own or modify the one here.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /tmp/demo/
mkdir gitfuzzy
<span class="nb">cd</span> gitfuzzy
cp /tmp/demo/capture/<span class="se">\:\:</span>1<span class="se">\:</span>9418-<span class="se">\&gt;</span>* ./
git clone https://gist.github.com/pdxjohnny/e2d1df77e81f07254da192fe1bc568a0 t
cp t/git.xml ./
</code></pre></div><p><code>git.xml</code></p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span class="nt">&lt;Peach&gt;</span>
    <span class="nt">&lt;DataModel</span> <span class="na">name=</span><span class="s">&#34;TheDataModel&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;Blob/&gt;</span>
    <span class="nt">&lt;/DataModel&gt;</span>
    <span class="nt">&lt;StateModel</span> <span class="na">name=</span><span class="s">&#34;TheState&#34;</span> <span class="na">initialState=</span><span class="s">&#34;Initial&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;State</span> <span class="na">name=</span><span class="s">&#34;Initial&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Action</span> <span class="na">type=</span><span class="s">&#34;accept&#34;</span><span class="nt">/&gt;</span>
            <span class="c">&lt;!-- receive bytes --&gt;</span>
            <span class="nt">&lt;Action</span> <span class="na">type=</span><span class="s">&#34;input&#34;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;DataModel</span> <span class="na">ref=</span><span class="s">&#34;TheDataModel&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/Action&gt;</span>
            <span class="c">&lt;!-- send bytes --&gt;</span>
            <span class="nt">&lt;Action</span> <span class="na">type=</span><span class="s">&#34;output&#34;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;DataModel</span> <span class="na">ref=</span><span class="s">&#34;TheDataModel&#34;</span><span class="nt">/&gt;</span>
                <span class="c">&lt;!-- Change this to be whatever port your git client was on --&gt;</span>
                <span class="nt">&lt;Data</span> <span class="na">fileName=</span><span class="s">&#34;::1:9418-&gt;::1:58226-0&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/Action&gt;</span>
            <span class="c">&lt;!-- receive bytes --&gt;</span>
            <span class="nt">&lt;Action</span> <span class="na">type=</span><span class="s">&#34;input&#34;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;DataModel</span> <span class="na">ref=</span><span class="s">&#34;TheDataModel&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/Action&gt;</span>
            <span class="c">&lt;!-- send bytes --&gt;</span>
            <span class="nt">&lt;Action</span> <span class="na">type=</span><span class="s">&#34;output&#34;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;DataModel</span> <span class="na">ref=</span><span class="s">&#34;TheDataModel&#34;</span><span class="nt">/&gt;</span>
                <span class="c">&lt;!-- Change this to be whatever port your git client was on --&gt;</span>
                <span class="nt">&lt;Data</span> <span class="na">fileName=</span><span class="s">&#34;::1:9418-&gt;::1:58226-1&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/Action&gt;</span>
        <span class="nt">&lt;/State&gt;</span>
    <span class="nt">&lt;/StateModel&gt;</span>
    <span class="nt">&lt;Agent</span> <span class="na">name=</span><span class="s">&#34;LinAgent&#34;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- Register for core file notifications. --&gt;</span>
        <span class="nt">&lt;Monitor</span> <span class="na">class=</span><span class="s">&#34;LinuxDebugger&#34;</span><span class="nt">&gt;</span>
            <span class="c">&lt;!-- This is the program we&#39;re going to run inside of the debugger --&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;Executable&#34;</span> <span class="na">value=</span><span class="s">&#34;git&#34;</span><span class="nt">/&gt;</span>
            <span class="c">&lt;!-- These are arguments to the executable we want to run --&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;Arguments&#34;</span> <span class="na">value=</span><span class="s">&#34;clone git://127.0.0.1/testrepo.git&#34;</span><span class="nt">/&gt;</span>
            <span class="c">&lt;!-- This parameter will cause the monitor to terminate the process
</span><span class="c">								 once the CPU usage reaches zero. --&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;CpuKill&#34;</span> <span class="na">value=</span><span class="s">&#34;true&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/Monitor&gt;</span>
        <span class="nt">&lt;Monitor</span> <span class="na">class=</span><span class="s">&#34;CleanupFolder&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;Folder&#34;</span> <span class="na">value=</span><span class="s">&#34;testrepo&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/Monitor&gt;</span>
    <span class="nt">&lt;/Agent&gt;</span>
    <span class="nt">&lt;Test</span> <span class="na">name=</span><span class="s">&#34;Default&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;Agent</span> <span class="na">ref=</span><span class="s">&#34;LinAgent&#34;</span> <span class="na">platform=</span><span class="s">&#34;linux&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;StateModel</span> <span class="na">ref=</span><span class="s">&#34;TheState&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;Publisher</span> <span class="na">class=</span><span class="s">&#34;TcpListener&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;Interface&#34;</span> <span class="na">value=</span><span class="s">&#34;127.0.0.1&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;Port&#34;</span> <span class="na">value=</span><span class="s">&#34;9418&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/Publisher&gt;</span>
        <span class="nt">&lt;Strategy</span> <span class="na">class=</span><span class="s">&#34;Random&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;Logger</span> <span class="na">class=</span><span class="s">&#34;Filesystem&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Param</span> <span class="na">name=</span><span class="s">&#34;Path&#34;</span> <span class="na">value=</span><span class="s">&#34;logs&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/Logger&gt;</span>
    <span class="nt">&lt;/Test&gt;</span>
<span class="nt">&lt;/Peach&gt;</span>
</code></pre></div><p>Your git client used a different port to connect to the git server when we did
the capture than mine did. When you copy the xml file you will have to change
the values as indicated with comments so that peach knows what files to use.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Change to the correct files</span>
vim git.xml
peach git.xml
</code></pre></div><p>Peach is fuzzing the git protocol now! Good job you rock!</p>]]></content>
  </entry>
</feed>
